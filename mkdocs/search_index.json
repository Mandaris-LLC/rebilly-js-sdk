{
    "docs": [
        {
            "location": "/",
            "text": "Rebilly JS SDK Library (Pre-Release)\n\u00b6\n\n\nThe Rebilly JS SDK library allows you to consume the Rebilly API using either Node or the browser.\n\n\n\n\nThe library is not production ready yet. Version 1.0.0 will be the first stable release.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPCI Compliance Note\n\u00b6\n\n\nIf you need to handle raw payment card data, you should use the \nRebilly Token library\n to generate tokens for your server-side logic.\n\n\nRebilly API Spec\n\u00b6\n\n\nThe library is a semantic representation of the \nRebilly API spec\n. A secondary \nexperimental API spec for reports\n is also available.\n\n\nQuick Start\n\u00b6\n\n\nInstall the latest version of the SDK with \nYarn\n:\n\nyarn add rebilly-js-sdk\n\n\n\nOr using NPM:\n\nnpm install rebilly-js-sdk --save\n\n\n\nThen import the library into your project:\n\nimport\n \nRebillyAPI\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n\nSemver\n\u00b6\n\n\nThe JS SDK is released following \nSemver 2.0.0\n guidelines. Each minor and patch version will be backward-compatible and we will strive to introduce incompatible changes using major releases only.",
            "title": "Introduction"
        },
        {
            "location": "/#rebilly-js-sdk-library-pre-release",
            "text": "The Rebilly JS SDK library allows you to consume the Rebilly API using either Node or the browser.   The library is not production ready yet. Version 1.0.0 will be the first stable release.",
            "title": "Rebilly JS SDK Library (Pre-Release)"
        },
        {
            "location": "/#pci-compliance-note",
            "text": "If you need to handle raw payment card data, you should use the  Rebilly Token library  to generate tokens for your server-side logic.",
            "title": "PCI Compliance Note"
        },
        {
            "location": "/#rebilly-api-spec",
            "text": "The library is a semantic representation of the  Rebilly API spec . A secondary  experimental API spec for reports  is also available.",
            "title": "Rebilly API Spec"
        },
        {
            "location": "/#quick-start",
            "text": "Install the latest version of the SDK with  Yarn : yarn add rebilly-js-sdk  Or using NPM: npm install rebilly-js-sdk --save  Then import the library into your project: import   RebillyAPI   from   'rebilly-js-sdk' ;",
            "title": "Quick Start"
        },
        {
            "location": "/#semver",
            "text": "The JS SDK is released following  Semver 2.0.0  guidelines. Each minor and patch version will be backward-compatible and we will strive to introduce incompatible changes using major releases only.",
            "title": "Semver"
        },
        {
            "location": "/getting-started/",
            "text": "Getting Started\n\u00b6\n\n\nThe library runs in Node or browsers without any configuration requirements.\n\n\nInstallation\n\u00b6\n\n\nUsing Yarn\n\u00b6\n\n\nWe recommend \nYarn\n for package management.\n\nyarn add rebilly-js-sdk\n\n\n\nUsing NPM\n\u00b6\n\n\nnpm install rebilly-js-sdk --save\n\n\n\n\nUsage\n\u00b6\n\n\nImporting from the package\n\u00b6\n\n\nTwo different API clients are exposed within the library, the standard client (\nRebillyAPI\n), and the experimental client (\nRebillyExperimentalAPI\n). The default package export is \nRebillyAPI\n.\n\n\nES6 or newer\n\u00b6\n\n\nimport\n \nRebillyAPI\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n\n\nES5\n\u00b6\n\n\nThe main API client is exposed as \ndefault\n in CommonJS.\n\nvar\n \nRebillyAPI\n \n=\n \nrequire\n(\n'rebilly-js-sdk'\n).\ndefault\n;\n\n\n\n\nOther Modules\n\u00b6\n\n\nThe library exposes two additional modules: the experimental API client and the error types returned by both clients.\n\nimport\n \n{\nRebillyExperimentalAPI\n,\n \nRebillyErrors\n}\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRebillyExperimentalAPI\n\n\nSecondary API client. Reserved for experimental endpoints like reports and statistics. This client can break backward-compatibility. Based on the \nExperimental Reports API spec.\n\n\n\n\n\n\nRebillyErrors\n\n\nExposes the different errors returned by both API clients.\n\n\n\n\n\n\n\n\nCreating an instance\n\u00b6\n\n\nThe API clients need either a private API key for backend use, or to be provided with a JWT session token when used in a browser.\n\n\nNode\n\u00b6\n\n\nUse a secret API key found in Rebilly under \nDeveloper > API Keys\n.\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \n'secret-api-key'\n});\n\n\n\n\n\n\nNode Environment Variables\n\n\nFor added security your secret API key should be kept as a \nNode environment variable\n.\n\n\n\n\nBrowsers\n\u00b6\n\n\nYou should never use a secret API key in the browser because it will be exposed by each API call in plain text. Instead a JWT session token can be provided to the API instance.\n\nconst\n \napi\n \n=\n \nRebillyAPI\n();\n\n\n\n//fetch a JWT session token via a user login using the API\n\n\n//then set it as the session token for the current instance\n\n\napi\n.\nsetSessionToken\n(\ntoken\n);\n\n\n\n\nConfiguration\n\u00b6\n\n\nAll client API configuration parameters are optional. However a secret API key can only be provided at instantiation.\n\n\n\n\nAPI Environments\n\n\nBy default an instance is always generated in the \nLive\n environment. The \nSandbox\n mode is only recommended while developing your integration. \n\n\n\n\nParameters\n\u00b6\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \n'secret-api-key'\n,\n \nsandbox\n:\n \ntrue\n,\n \ntimeout\n:\n \n10000\n});\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiKey\n\n\nstring\n\n\nnull\n\n\nYour secret API key. To be used only for Node integration. See \nDeveloper > API Keys\n.\n\n\n\n\n\n\nsandbox\n\n\nboolean\n\n\nfalse\n\n\nFlag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n6000\n\n\nDefine the timeout in milliseconds for API requests.\n\n\n\n\n\n\nversion\n\n\nstring\n\n\nv2.1\n\n\nDefine the version of the API to use. Defaults to v2.1.\nThis configuration option does not apply to RebillyExperimentalAPI.\n\n\n\n\n\n\n\n\nFull Example\n\u00b6\n\n\nThe following code will demonstrate how to retrieve the list of the newest customers in your account in Node.\n\n\n\n\nPromises\n\n\nEvery resource method in both the standard and experimental API clients returns a Promise.\n\n\n\n\nNode ES7\n\u00b6\n\n\nThe newest specification of ECMAScript allows us to drop callbacks for the Promises.\n\nimport\n \nRebillyAPI\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n//using an environment variable to store the secret API key\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \nprocess\n.\nenv\n.\nREBILLY_KEY\n});\n\n\n\ntry\n \n{\n\n    \n//requesting the list of customers \n\n    \n// with the default limit, offset and pagination\n\n    \nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n    \nconsole\n.\nlog\n(\n`There are \n${\ncustomers\n.\ntotal\n}\n customers`\n);\n\n\n}\n \ncatch\n(\nerror\n)\n \n{\n\n    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n);\n\n\n}\n\n\n\n\nNode ES5\n\u00b6\n\n\nIn ES5 the \ntry/catch\n structure is replaced by standard Promise \nthen/catch\n chains.\n\nvar\n \nRebillyAPI\n \n=\n \nrequire\n(\n'rebilly-js-sdk'\n).\ndefault\n;\n\n\n\n//using an environment variable to store the secret API key\n\n\nvar\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \nprocess\n.\nenv\n.\nREBILLY_KEY\n});\n\n\n\n//requesting the list of customers \n\n\n// with the default limit, offset and pagination\n\n\napi\n.\ncustomers\n.\ngetAll\n()\n\n    \n.\nthen\n(\nfunction\n(\ncustomers\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n`There are \n${\ncustomers\n.\ntotal\n}\n customers`\n);\n\n    \n})\n\n    \n.\ncatch\n(\nfunction\n(\nerror\n)\n \n{\n\n        \nconsole\n.\nerror\n(\nerr\n.\nmessage\n);\n\n    \n});",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "The library runs in Node or browsers without any configuration requirements.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/getting-started/#using-yarn",
            "text": "We recommend  Yarn  for package management. yarn add rebilly-js-sdk",
            "title": "Using Yarn"
        },
        {
            "location": "/getting-started/#using-npm",
            "text": "npm install rebilly-js-sdk --save",
            "title": "Using NPM"
        },
        {
            "location": "/getting-started/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/getting-started/#importing-from-the-package",
            "text": "Two different API clients are exposed within the library, the standard client ( RebillyAPI ), and the experimental client ( RebillyExperimentalAPI ). The default package export is  RebillyAPI .",
            "title": "Importing from the package"
        },
        {
            "location": "/getting-started/#es6-or-newer",
            "text": "import   RebillyAPI   from   'rebilly-js-sdk' ;",
            "title": "ES6 or newer"
        },
        {
            "location": "/getting-started/#es5",
            "text": "The main API client is exposed as  default  in CommonJS. var   RebillyAPI   =   require ( 'rebilly-js-sdk' ). default ;",
            "title": "ES5"
        },
        {
            "location": "/getting-started/#other-modules",
            "text": "The library exposes two additional modules: the experimental API client and the error types returned by both clients. import   { RebillyExperimentalAPI ,   RebillyErrors }   from   'rebilly-js-sdk' ;      Module  Description      RebillyExperimentalAPI  Secondary API client. Reserved for experimental endpoints like reports and statistics. This client can break backward-compatibility. Based on the  Experimental Reports API spec.    RebillyErrors  Exposes the different errors returned by both API clients.",
            "title": "Other Modules"
        },
        {
            "location": "/getting-started/#creating-an-instance",
            "text": "The API clients need either a private API key for backend use, or to be provided with a JWT session token when used in a browser.",
            "title": "Creating an instance"
        },
        {
            "location": "/getting-started/#node",
            "text": "Use a secret API key found in Rebilly under  Developer > API Keys . const   api   =   RebillyAPI ({ apiKey :   'secret-api-key' });    Node Environment Variables  For added security your secret API key should be kept as a  Node environment variable .",
            "title": "Node"
        },
        {
            "location": "/getting-started/#browsers",
            "text": "You should never use a secret API key in the browser because it will be exposed by each API call in plain text. Instead a JWT session token can be provided to the API instance. const   api   =   RebillyAPI ();  //fetch a JWT session token via a user login using the API  //then set it as the session token for the current instance  api . setSessionToken ( token );",
            "title": "Browsers"
        },
        {
            "location": "/getting-started/#configuration",
            "text": "All client API configuration parameters are optional. However a secret API key can only be provided at instantiation.   API Environments  By default an instance is always generated in the  Live  environment. The  Sandbox  mode is only recommended while developing your integration.",
            "title": "Configuration"
        },
        {
            "location": "/getting-started/#parameters",
            "text": "const   api   =   RebillyAPI ({ apiKey :   'secret-api-key' ,   sandbox :   true ,   timeout :   10000 });      Option  Type  Default  Description      apiKey  string  null  Your secret API key. To be used only for Node integration. See  Developer > API Keys .    sandbox  boolean  false  Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.    timeout  number  6000  Define the timeout in milliseconds for API requests.    version  string  v2.1  Define the version of the API to use. Defaults to v2.1. This configuration option does not apply to RebillyExperimentalAPI.",
            "title": "Parameters"
        },
        {
            "location": "/getting-started/#full-example",
            "text": "The following code will demonstrate how to retrieve the list of the newest customers in your account in Node.   Promises  Every resource method in both the standard and experimental API clients returns a Promise.",
            "title": "Full Example"
        },
        {
            "location": "/getting-started/#node-es7",
            "text": "The newest specification of ECMAScript allows us to drop callbacks for the Promises. import   RebillyAPI   from   'rebilly-js-sdk' ;  //using an environment variable to store the secret API key  const   api   =   RebillyAPI ({ apiKey :   process . env . REBILLY_KEY });  try   { \n     //requesting the list of customers  \n     // with the default limit, offset and pagination \n     const   customers   =   await   api . customers . getAll (); \n     console . log ( `There are  ${ customers . total }  customers` );  }   catch ( error )   { \n     console . log ( error . message );  }",
            "title": "Node ES7"
        },
        {
            "location": "/getting-started/#node-es5",
            "text": "In ES5 the  try/catch  structure is replaced by standard Promise  then/catch  chains. var   RebillyAPI   =   require ( 'rebilly-js-sdk' ). default ;  //using an environment variable to store the secret API key  var   api   =   RebillyAPI ({ apiKey :   process . env . REBILLY_KEY });  //requesting the list of customers   // with the default limit, offset and pagination  api . customers . getAll () \n     . then ( function ( customers )   { \n         console . log ( `There are  ${ customers . total }  customers` ); \n     }) \n     . catch ( function ( error )   { \n         console . error ( err . message ); \n     });",
            "title": "Node ES5"
        },
        {
            "location": "/reference/rebilly-api/",
            "text": "RebillyAPI\n\u00b6\n\n\nStandard Rebilly API client that will be backward-compatible within each major release of the library.\n\n\nAPI Spec\n\n\nSee the \nRebilly API spec\n for full details on the different API calls exposed within this client.\n\n\nImporting\n\u00b6\n\n\nThe \nRebillyAPI\n factory is the default export of the \nrebilly-js-sdk\n package.\n\n\nimport\n \nRebillyAPI\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n\n\nConfiguration\n\u00b6\n\n\nAll client API configuration parameters are optional. However a secret API key can only be provided at instantiation.\n\n\n\n\nAPI Environments\n\n\nBy default an instance is always generated in the \nLive\n environment. The \nSandbox\n mode is only recommended while developing your integration. \n\n\n\n\nParameters\n\u00b6\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \n'secret-api-key'\n,\n \nsandbox\n:\n \ntrue\n,\n \ntimeout\n:\n \n10000\n});\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiKey\n\n\nstring\n\n\nnull\n\n\nYour secret API key. To be used only for Node integrations. See \nDeveloper > API Keys\n.\n\n\n\n\n\n\nsandbox\n\n\nboolean\n\n\nfalse\n\n\nFlag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n6000\n\n\nDefine the timeout in milliseconds for API requests.\n\n\n\n\n\n\nversion\n\n\nstring\n\n\nv2.1\n\n\nDefine the version of the API to use. Defaults to v2.1.\n\n\n\n\n\n\n\n\nPublic Methods\n\u00b6\n\n\nThe API client exposes different configuration and utility methods you can use to customize your instance.\n\n\naddRequestInterceptor\n\u00b6\n\n\naddRequestInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.\n\n\nExample\n\n\napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=>\n \n{\n\n    \nconfig\n.\nparams\n[\n'extra-query-param'\n]\n \n=\n \n'foobar'\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. \n \nthenDelegate\n(\nconfig\n)\n \n=>\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nconfig\nObject\nThe request configuration. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the request is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=>\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveRequestInterceptor\n\u00b6\n\n\nremoveRequestInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific request interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=>\n \n{\n\n    \nconfig\n.\nparams\n[\n'extra-query-param'\n]\n \n=\n \n'foobar'\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveRequestInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added request interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\naddResponseInterceptor\n\u00b6\n\n\naddResponseInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.\n\n\nExample\n\n\napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=>\n \n{\n\n    \n// modify reponse data before having it processed by the API client\n\n    \nresponse\n.\ndata\n.\nshift\n();\n \n//removed first element\n\n    \nreturn\n \nresponse\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. \n \nthenDelegate\n(\nresponse\n)\n \n=>\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nresponse\nObject\nThe API response. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the response is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=>\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveResponseInterceptor\n\u00b6\n\n\nremoveResponseInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific response interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=>\n \n{\n\n    \nresponse\n.\ndata\n.\nshift\n();\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveResponseInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added response interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\ngetCancellationToken\n\u00b6\n\n\ngetCancellationToken\n() -> \n{CancelToken}\n\n\nReturns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.\n\n\nSince 0.12.0\n\n\n\n\nSee \nRebillyErrors\n\n\n\n\nExample\n\n\n// once created the token will be used for each subsequent API request\n\n\nconst\n \ntoken\n \n=\n \napi\n.\ngetCancellationToken\n();\n\n\n// when cancelling the request, a message can be provided\n\n\ntoken\n.\ncancel\n(\n'Cancelled request manually'\n);\n\n\n\n// any ongoing request will be canceled by the same token\n\n\ntry\n \n{\n\n    \n// trigger a request\n\n    \nawait\n \napi\n.\ncustomers\n.\nget\n({\nid\n:\n \n'cancellable-customer-id'\n});\n\n\n}\n \ncatch\n(\nerror\n)\n \n{\n\n    \n// you can detect if a request was canceled by checking \n\n    \n// the error.name\n\n    \nif\n \n(\nerror\n.\nname\n \n===\n \n'RebillyCanceledError'\n)\n \n{\n\n        \n// the message provided to 'token.cancel' will be reflected here\n\n        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n \n// returns 'Cancelled request manually'     \n\n    \n}\n \nelse\n \n{\n\n       \n// normal error handling \n\n    \n}\n\n\n}\n\n\n\n\n\nReturns\n\n\nThe global cancellation token. An instance of \naxios.CancelToken\n. Exposes method \ncancel(message)\n.\n\n\nType \nCancelToken\n\n\nsetTimeout\n\u00b6\n\n\nsetTimeout\n(\ntimeout\n)\n\n\nDefine the default timeout delay in milliseconds for the current API instance.\n\n\nExample\n\n\napi\n.\nsetTimeout\n(\n10000\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n-\n\n\nTimeout delay in milliseconds.\n\n\n\n\n\n\n\n\nsetSessionToken\n\u00b6\n\n\nsetSessionToken\n(\ntoken\n)\n\n\nUse a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the \nprivate API key\n when the client is used in a browser.\n\n\nTo retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.\n\n\n\n\nSee \napi.account.signIn\n\n\n\n\nExample\n\n\n// instantiate an unauthorized API client\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n();\n\n\n\n// build the sign in payload\n\n\nconst\n \npayload\n \n=\n \n{\ndata\n:\n \n{\nemail\n,\n \npassword\n,\n \nexpiredTime\n}};\n\n\n\n// the 'signIn' method does not require API authorization to complete\n\n\nconst\n \nresponse\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignIn\n(\npayload\n);\n\n\n\n// set the session token for future API requests that require\n\n\n// an authorization using the response fields\n\n\napi\n.\nsetSessionToken\n(\nresponse\n.\nfields\n.\ntoken\n);\n\n\n\n// this request will be authorized using the token\n\n\nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n\n\n\nsetEndpoints\n\u00b6\n\n\nsetEndpoints\n({\nlive\nopt\n, \nsandbox\nopt\n})\n\n\nUpdate the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.\n\n\n\n\nSecuring Communications\n\n\nWhen modifying the API endpoints always use \nHTTPS\n for a production environment. \n\n\n\n\nExample\n\n\napi\n.\nsetEndpoints\n({\nlive\n:\n \n'https://api.rebilly.com/experimental/version/url'\n});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlive\n\n\nstring\n\n\noptional\n\n\nURL for the live API mode.\n\n\n\n\n\n\nsandbox\n\n\nstring\n\n\noptional\n\n\nURL for the sandbox API mode.\n\n\n\n\n\n\n\n\nsetProxyAgent\n\u00b6\n\n\nsetProxyAgent\n({\nhost\n, \nport\n, \nauth\n})\n\n\nDefine a proxy for the current API instance. Authorized using \nHTTP Basic\n credentials. \n\n\nExample\n\n\nconst\n \nconfig\n \n=\n \n{\n\n    \nhost\n:\n \n'127.0.0.1'\n,\n\n    \nport\n:\n \n9000\n,\n\n    \nauth\n:\n \n{\n\n        \n//HTTP Basic\n\n        \nusername\n:\n \n'foobar'\n,\n\n        \npassword\n:\n \n'fuubar'\n\n    \n}\n\n\n};\n\n\n//all subsequent API requests will pass through the proxy\n\n\napi\n.\nsetProxyAgent\n(\nconfig\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nstring\n\n\n-\n\n\nHostname of the proxy server.\n\n\n\n\n\n\nport\n\n\nnumber\n\n\n-\n\n\nPort of the proxy server.\n\n\n\n\n\n\nauth\n\n\nObject\n\n\n-\n\n\nBasic credentials to connect to the proxy server. \n \nProperties\nName\nType\nDescription\nusername\nstring\nThe username required for basic authentication.\npassword\nstring\nThe password required for basic authentication.\n\n\n\n\n\n\n\n\nsetApiConsumer\n\u00b6\n\n\nsetApiConsumer\n(\nconsumerId\n)\n\n\nDefine a consumer identification \nHTTP header\n string for use with Rebilly. This allows you to identify your app in the API logs.\n\n\n\n\nTip\n\n\nDefining an API consumer is useful for filtering your integration API logs from those who use Rebilly's user interface.\n\n\n\n\nExample\n\n\napi\n.\nsetApiConsumer\n(\n'Acme Inc 1.0.4'\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconsumerId\n\n\nstring\n\n\noptional\n\n\nA string used to identify your application in the API logs.\n\n\n\n\n\n\n\n\nResources\n\u00b6\n\n\nResources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys.\n\n\nExample\n\n\n//get the latest 100 customers starting from the 100th one\n\n\napi\n.\ncustomers\n.\ngetAll\n({\noffset\n:\n \n100\n});\n\n\n\n\nAccount\n\u00b6\n\n\napi\n.\naccount\n\n\nAllows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset. \n\n\n\n\nSee the \nAccount resource\n for detailed method information.\n\n\n\n\nAPI Keys\n\u00b6\n\n\napi\n.\napiKeys\n\n\nAllows you to manage your API keys. Create or modify existing ones with different \ndatetime\n settings. API keys are private and should only be used for server-side operations. \n\n\n\n\nNote\n\n\nFor client-side requests using the JS SDK, you must use the session token returned by \napi\n.\naccount\n.\nsignIn\n()\n. See the \nAccounts resource\n for more details.\n\n\n\n\n\n\nSee the \nAPI Keys resource\n for detailed method information.\n\n\n\n\nBank Accounts\n\u00b6\n\n\napi\n.\nbankAccounts\n\n\nUsed to create new bank accounts and attach them to an existing customer. Can also deactivate bank accounts. \n\n\nBank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.\n\n\nSee Payment Instruments. \n\n\n\n\nSee the \nBank Accounts resource\n for detailed method information.\n\n\n\n\nBlacklists\n\u00b6\n\n\napi\n.\nblacklists\n\n\nManage blacklist items by creating new entries or deleting existing items. Blacklists are used to manage risk and fraud by aborting an operation.  \n\n\nRebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.\n\n\n\n\nSee the \nBlacklists resource\n for detailed method information.\n\n\n\n\nCheckout Pages\n\u00b6\n\n\napi\n.\ncheckoutPages\n\n\nCreate and manage checkout pages. Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements.\n\n\n\n\nSee the \nCheckout Pages resource\n for detailed method information.\n\n\n\n\nContacts\n\u00b6\n\n\napi\n.\ncontacts\n\n\nDefine contact information for your customers. Manage multiple addresses for the same customer.\n\n\n\n\nSee the \nContacts resource\n for detailed method information.\n\n\n\n\nCoupons\n\u00b6\n\n\napi\n.\ncoupons\n\n\nCreate permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.\n\n\n\n\nSee the \nCheckout Pages resource\n for detailed method information.\n\n\n\n\nCredential Hashes\n\u00b6\n\n\napi\n.\ncredentialHashes\n\n\nGenerate credential hashes to authorize your webhooks or emails in various parts of Rebilly. \n\n\n\n\nSee the \nCredential Hashes resource\n for detailed method information.\n\n\n\n\nCustom Events\n\u00b6\n\n\napi\n.\ncustomEvents\n\n\nCreate custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. For example, a custom event could be used to send you an email before a customer's subscription is about to expire.\n\n\nSee Rules Engine.  \n\n\n\n\nSee the \nCustom Events resource\n for detailed method information.\n\n\n\n\nCustom Fields\n\u00b6\n\n\napi\n.\ncustomFields\n\n\nCreate and manage custom fields to be added to other Resources. A variety of fields are supported from datetime to booleans.\n\n\n\n\nSee the \nCustom Fields resource\n for detailed method information.\n\n\n\n\nCustomer Authentication\n\u00b6\n\n\napi\n.\ncustomerAuthentication\n\n\nCreate and manage login credentials for your customers. This feature can be used to integrate Rebilly directly into your own website and display your customers their subscription or product information. \n\n\n\n\nSee the \nCustom Fields resource\n for detailed method information.\n\n\n\n\nCustomers\n\u00b6\n\n\napi\n.\ncustomers\n\n\nCreate and manage your customers and their lead sources. Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models.\n\n\n\n\nSee the \nCustomers resource\n for detailed method information.\n\n\n\n\nDisputes\n\u00b6\n\n\napi\n.\ndisputes\n\n\nManage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly.\n\n\n\n\nSee the \nDisputes resource\n for detailed method information.\n\n\n\n\nEvents\n\u00b6\n\n\napi\n.\nevents\n\n\nCreate and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed.\n\n\nThe actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation.\n\n\nSee Rules Engine.  \n\n\n\n\nSee the \nEvents resource\n for detailed method information.\n\n\n\n\nFiles\n\u00b6\n\n\napi\n.\nfiles\n\n\nUpload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business.  \n\n\n\n\nSee the \nFiles resource\n for detailed method information.\n\n\n\n\nGateway Accounts\n\u00b6\n\n\napi\n.\ngatewayAccounts\n\n\nCreate and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use. \n\n\nA payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets.\n\n\nSee Supported Gateway Accounts.\n\n\n\n\nSee the \nGateway Accounts resource\n for detailed method information.\n\n\n\n\nInvoices\n\u00b6\n\n\napi\n.\ninvoices\n\n\nIssue invoices to your customers and manage their lead sources. Issuing an invoice allows you to calculate or recalculate an invoice\u2019s shipping, taxes, and customer\u2019s redeemed coupons (as applicable, according to coupon configuration and restrictions), and apply them to the invoice.\n\n\nSee also:\n\n\n\n\nProducts \n\n\nTaxes\n\n\nShipping\n\n\nIssuing an Invoice\n\n\n\n\n\n\nSee the \nInvoices resource\n for detailed method information.\n\n\n\n\nLayouts\n\u00b6\n\n\napi\n.\nlayouts\n\n\nCreate and manage your plan layouts. Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a \npricing\n or \nplans\n page integrated into your website.  \n\n\n\n\nSee the \nLayouts resource\n for detailed method information.\n\n\n\n\nLists (Rules Engine)\n\u00b6\n\n\napi\n.\nlists\n\n\nCreate and manage your lists. A \nlist\n in an array of values that are stored in the database. The main purpose of a \nlist\n is its usage in Rules Engine, to provide a way to change a \nrule\n criteria without having to change the \nrule\n itself.  \n\n\n\n\nSee the \nLists resource\n for detailed method information.\n\n\n\n\nNotes\n\u00b6\n\n\napi\n.\nnotes\n\n\nLeave notes on a customer record to have a handy location to share with others who may interface with the customer. It's great for customer service.    \n\n\n\n\nSee the \nNotes resource\n for detailed method information.\n\n\n\n\nOrganizations\n\u00b6\n\n\napi\n.\norganizations\n\n\nOrganizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations.\n\n\n\n\nNote\n\n\nOrganizations are shared between the \nLive\n and \nSandbox\n modes.    \n\n\n\n\n\n\nSee the \nOrganizations resource\n for detailed method information.\n\n\n\n\nPayment Cards\n\u00b6\n\n\napi\n.\npaymentCards\n\n\nUsed to create new payment cards and attach them to an existing customer. Can also deactivate payment cards. \n\n\nSee Payment Instruments. \n\n\n\n\nSee the \nPayment Cards resource\n for detailed method information.\n\n\n\n\nPayment Tokens\n\u00b6\n\n\napi\n.\npaymentTokens\n\n\nTokens are an encrypted string representing a payment instrument. A token expires within 24 hours.\n\n\nPayment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens.\n\n\nSee Rebilly.js library    \n\n\n\n\nSee the \nPayment Tokens resource\n for detailed method information.\n\n\n\n\nPaypal Accounts\n\u00b6\n\n\napi\n.\npaypalAccounts\n\n\nUsed to attach Paypal accounts to an existing customer. Can also deactivate Paypal accounts on a customer's account. Paypal serves as both an acquirer and an alternate payment method. \n\n\nSee Payment Instruments. \n\n\n\n\nSee the \nPaypal Accounts resource\n for detailed method information.\n\n\n\n\nPlans\n\u00b6\n\n\napi\n.\nplans\n\n\nCreate and manage plans. Used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences. \n\n\n\n\nSee the \nPlans resource\n for detailed method information.\n\n\n\n\nPreviews\n\u00b6\n\n\napi\n.\npreviews\n\n\nPreview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine. \n\n\n\n\nSee the \nPreviews resource\n for detailed method information.\n\n\n\n\nProducts\n\u00b6\n\n\napi\n.\nproducts\n\n\nCreate and manage products. You may attach them to plans. Products can have a tax category, accounting code and may require shipping.\n\n\n\n\nSee the \nProducts resource\n for detailed method information.\n\n\n\n\nProfile\n\u00b6\n\n\napi\n.\nprofile\n\n\nManage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in.\n\n\n\n\nSee the \nProfile resource\n for detailed method information.\n\n\n\n\nSessions\n\u00b6\n\n\napi\n.\nsessions\n\n\nCreate and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys.\n\n\nThis token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API.\n\n\n\n\nSee the \nSessions resource\n for detailed method information.\n\n\n\n\nShipping Zones\n\u00b6\n\n\napi\n.\nshippingZones\n\n\nCreate and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each contains regions and countries that you ship to, and has its own shipping rates.\n\n\n\n\nSee the \nShipping Zones resource\n for detailed method information.\n\n\n\n\nStatus (API)\n\u00b6\n\n\napi\n.\nstatus\n\n\nGet the current status of the Rebilly API.\n\n\n\n\nTip\n\n\nYou can poll this endpoint on interval to check the status of the API.\n\n\n\n\n\n\nSee the \nStatus resource\n for detailed method information.\n\n\n\n\nSubscriptions\n\u00b6\n\n\napi\n.\nsubscriptions\n\n\nCreate and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination.\n\n\n\n\nSee the \nSubscriptions resource\n for detailed method information.\n\n\n\n\nThree D Secure (3DS)\n\u00b6\n\n\napi\n.\nthreeDSecure\n\n\nCreate and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure.\n\n\nThe merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant\u2019s site. This allows the merchant to shift liability from themselves to the issuing bank in some cases.  3D Secure requires cardholder interaction to be completed.\n\n\n\n\nSee the \nThree D Secure resource\n for detailed method information.\n\n\n\n\nTracking\n\u00b6\n\n\napi\n.\ntracking\n\n\nInspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing.\n\n\n\n\nSee the \nTracking resource\n for detailed method information.\n\n\n\n\nTransactions\n\u00b6\n\n\napi\n.\ntransactions\n\n\nCreate and manage transactions. A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future.\n\n\n\n\nSee the \nTransactions resource\n for detailed method information.\n\n\n\n\nUsers\n\u00b6\n\n\napi\n.\nusers\n\n\nCreate and manage users. A \nuser\n represents a person who can login to Rebilly, and take actions subject to their granted permissions.\n\n\n\n\nSee the \nUsers resource\n for detailed method information.\n\n\n\n\nWebhooks\n\u00b6\n\n\napi\n.\nwebhooks\n\n\nCreate and manage webhooks. Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice. \n\n\nThey allow you to collect information about those events. Rebilly can send this information to an URL of your choice.\n\n\n\n\nSee the \nWebhooks resource\n for detailed method information.\n\n\n\n\nWebsites\n\u00b6\n\n\napi\n.\nwebsites\n\n\nCreate and manage websites. The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business.\n\n\n\n\nSee the \nWebsites resource\n for detailed method information.",
            "title": "RebillyAPI"
        },
        {
            "location": "/reference/rebilly-api/#rebillyapi",
            "text": "Standard Rebilly API client that will be backward-compatible within each major release of the library.  API Spec  See the  Rebilly API spec  for full details on the different API calls exposed within this client.",
            "title": "RebillyAPI"
        },
        {
            "location": "/reference/rebilly-api/#importing",
            "text": "The  RebillyAPI  factory is the default export of the  rebilly-js-sdk  package.  import   RebillyAPI   from   'rebilly-js-sdk' ;",
            "title": "Importing"
        },
        {
            "location": "/reference/rebilly-api/#configuration",
            "text": "All client API configuration parameters are optional. However a secret API key can only be provided at instantiation.   API Environments  By default an instance is always generated in the  Live  environment. The  Sandbox  mode is only recommended while developing your integration.",
            "title": "Configuration"
        },
        {
            "location": "/reference/rebilly-api/#parameters",
            "text": "const   api   =   RebillyAPI ({ apiKey :   'secret-api-key' ,   sandbox :   true ,   timeout :   10000 });      Option  Type  Default  Description      apiKey  string  null  Your secret API key. To be used only for Node integrations. See  Developer > API Keys .    sandbox  boolean  false  Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.    timeout  number  6000  Define the timeout in milliseconds for API requests.    version  string  v2.1  Define the version of the API to use. Defaults to v2.1.",
            "title": "Parameters"
        },
        {
            "location": "/reference/rebilly-api/#public-methods",
            "text": "The API client exposes different configuration and utility methods you can use to customize your instance.",
            "title": "Public Methods"
        },
        {
            "location": "/reference/rebilly-api/#addrequestinterceptor",
            "text": "addRequestInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.  Example  api . addRequestInterceptor ({ thenDelegate :   ( config )   =>   { \n     config . params [ 'extra-query-param' ]   =   'foobar' ; \n     return   config ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue.    thenDelegate ( config )   =>   { Object }   Parameters   Name Type Description config Object The request configuration. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the request is executed for this interceptor.    catchDelegate ( error )   =>   Promise   Parameters   Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.",
            "title": "addRequestInterceptor"
        },
        {
            "location": "/reference/rebilly-api/#removerequestinterceptor",
            "text": "removeRequestInterceptor ( interceptor )  Removes a specific request interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addRequestInterceptor ({ thenDelegate :   ( config )   =>   { \n     config . params [ 'extra-query-param' ]   =   'foobar' ; \n     return   config ;  }});  // remove via reference  api . removeRequestInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added request interceptor that should be removed from the current instance.",
            "title": "removeRequestInterceptor"
        },
        {
            "location": "/reference/rebilly-api/#addresponseinterceptor",
            "text": "addResponseInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.  Example  api . addResponseInterceptor ({ thenDelegate :   ( response )   =>   { \n     // modify reponse data before having it processed by the API client \n     response . data . shift ();   //removed first element \n     return   response ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue.    thenDelegate ( response )   =>   { Object }   Parameters   Name Type Description response Object The API response. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the response is executed for this interceptor.    catchDelegate ( error )   =>   Promise   Parameters   Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.",
            "title": "addResponseInterceptor"
        },
        {
            "location": "/reference/rebilly-api/#removeresponseinterceptor",
            "text": "removeResponseInterceptor ( interceptor )  Removes a specific response interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addResponseInterceptor ({ thenDelegate :   ( response )   =>   { \n     response . data . shift (); \n     return   config ;  }});  // remove via reference  api . removeResponseInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added response interceptor that should be removed from the current instance.",
            "title": "removeResponseInterceptor"
        },
        {
            "location": "/reference/rebilly-api/#getcancellationtoken",
            "text": "getCancellationToken () ->  {CancelToken}  Returns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.  Since 0.12.0   See  RebillyErrors   Example  // once created the token will be used for each subsequent API request  const   token   =   api . getCancellationToken ();  // when cancelling the request, a message can be provided  token . cancel ( 'Cancelled request manually' );  // any ongoing request will be canceled by the same token  try   { \n     // trigger a request \n     await   api . customers . get ({ id :   'cancellable-customer-id' });  }   catch ( error )   { \n     // you can detect if a request was canceled by checking  \n     // the error.name \n     if   ( error . name   ===   'RebillyCanceledError' )   { \n         // the message provided to 'token.cancel' will be reflected here \n         console . log ( error . message )   // returns 'Cancelled request manually'      \n     }   else   { \n        // normal error handling  \n     }  }   Returns  The global cancellation token. An instance of  axios.CancelToken . Exposes method  cancel(message) .  Type  CancelToken",
            "title": "getCancellationToken"
        },
        {
            "location": "/reference/rebilly-api/#settimeout",
            "text": "setTimeout ( timeout )  Define the default timeout delay in milliseconds for the current API instance.  Example  api . setTimeout ( 10000 );   Parameters     Name  Type  Attribute  Description      timeout  number  -  Timeout delay in milliseconds.",
            "title": "setTimeout"
        },
        {
            "location": "/reference/rebilly-api/#setsessiontoken",
            "text": "setSessionToken ( token )  Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the  private API key  when the client is used in a browser.  To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.   See  api.account.signIn   Example  // instantiate an unauthorized API client  const   api   =   RebillyAPI ();  // build the sign in payload  const   payload   =   { data :   { email ,   password ,   expiredTime }};  // the 'signIn' method does not require API authorization to complete  const   response   =   await   api . account . signIn ( payload );  // set the session token for future API requests that require  // an authorization using the response fields  api . setSessionToken ( response . fields . token );  // this request will be authorized using the token  const   customers   =   await   api . customers . getAll ();",
            "title": "setSessionToken"
        },
        {
            "location": "/reference/rebilly-api/#setendpoints",
            "text": "setEndpoints ({ live opt ,  sandbox opt })  Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.   Securing Communications  When modifying the API endpoints always use  HTTPS  for a production environment.    Example  api . setEndpoints ({ live :   'https://api.rebilly.com/experimental/version/url' });   Parameters     Name  Type  Attribute  Description      live  string  optional  URL for the live API mode.    sandbox  string  optional  URL for the sandbox API mode.",
            "title": "setEndpoints"
        },
        {
            "location": "/reference/rebilly-api/#setproxyagent",
            "text": "setProxyAgent ({ host ,  port ,  auth })  Define a proxy for the current API instance. Authorized using  HTTP Basic  credentials.   Example  const   config   =   { \n     host :   '127.0.0.1' , \n     port :   9000 , \n     auth :   { \n         //HTTP Basic \n         username :   'foobar' , \n         password :   'fuubar' \n     }  };  //all subsequent API requests will pass through the proxy  api . setProxyAgent ( config );   Parameters     Name  Type  Attribute  Description      host  string  -  Hostname of the proxy server.    port  number  -  Port of the proxy server.    auth  Object  -  Basic credentials to connect to the proxy server.    Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication.",
            "title": "setProxyAgent"
        },
        {
            "location": "/reference/rebilly-api/#setapiconsumer",
            "text": "setApiConsumer ( consumerId )  Define a consumer identification  HTTP header  string for use with Rebilly. This allows you to identify your app in the API logs.   Tip  Defining an API consumer is useful for filtering your integration API logs from those who use Rebilly's user interface.   Example  api . setApiConsumer ( 'Acme Inc 1.0.4' );   Parameters     Name  Type  Attribute  Description      consumerId  string  optional  A string used to identify your application in the API logs.",
            "title": "setApiConsumer"
        },
        {
            "location": "/reference/rebilly-api/#resources",
            "text": "Resources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys.  Example  //get the latest 100 customers starting from the 100th one  api . customers . getAll ({ offset :   100 });",
            "title": "Resources"
        },
        {
            "location": "/reference/rebilly-api/#account",
            "text": "api . account  Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset.    See the  Account resource  for detailed method information.",
            "title": "Account"
        },
        {
            "location": "/reference/rebilly-api/#api-keys",
            "text": "api . apiKeys  Allows you to manage your API keys. Create or modify existing ones with different  datetime  settings. API keys are private and should only be used for server-side operations.    Note  For client-side requests using the JS SDK, you must use the session token returned by  api . account . signIn () . See the  Accounts resource  for more details.    See the  API Keys resource  for detailed method information.",
            "title": "API Keys"
        },
        {
            "location": "/reference/rebilly-api/#bank-accounts",
            "text": "api . bankAccounts  Used to create new bank accounts and attach them to an existing customer. Can also deactivate bank accounts.   Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.  See Payment Instruments.    See the  Bank Accounts resource  for detailed method information.",
            "title": "Bank Accounts"
        },
        {
            "location": "/reference/rebilly-api/#blacklists",
            "text": "api . blacklists  Manage blacklist items by creating new entries or deleting existing items. Blacklists are used to manage risk and fraud by aborting an operation.    Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.   See the  Blacklists resource  for detailed method information.",
            "title": "Blacklists"
        },
        {
            "location": "/reference/rebilly-api/#checkout-pages",
            "text": "api . checkoutPages  Create and manage checkout pages. Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements.   See the  Checkout Pages resource  for detailed method information.",
            "title": "Checkout Pages"
        },
        {
            "location": "/reference/rebilly-api/#contacts",
            "text": "api . contacts  Define contact information for your customers. Manage multiple addresses for the same customer.   See the  Contacts resource  for detailed method information.",
            "title": "Contacts"
        },
        {
            "location": "/reference/rebilly-api/#coupons",
            "text": "api . coupons  Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.   See the  Checkout Pages resource  for detailed method information.",
            "title": "Coupons"
        },
        {
            "location": "/reference/rebilly-api/#credential-hashes",
            "text": "api . credentialHashes  Generate credential hashes to authorize your webhooks or emails in various parts of Rebilly.    See the  Credential Hashes resource  for detailed method information.",
            "title": "Credential Hashes"
        },
        {
            "location": "/reference/rebilly-api/#custom-events",
            "text": "api . customEvents  Create custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. For example, a custom event could be used to send you an email before a customer's subscription is about to expire.  See Rules Engine.     See the  Custom Events resource  for detailed method information.",
            "title": "Custom Events"
        },
        {
            "location": "/reference/rebilly-api/#custom-fields",
            "text": "api . customFields  Create and manage custom fields to be added to other Resources. A variety of fields are supported from datetime to booleans.   See the  Custom Fields resource  for detailed method information.",
            "title": "Custom Fields"
        },
        {
            "location": "/reference/rebilly-api/#customer-authentication",
            "text": "api . customerAuthentication  Create and manage login credentials for your customers. This feature can be used to integrate Rebilly directly into your own website and display your customers their subscription or product information.    See the  Custom Fields resource  for detailed method information.",
            "title": "Customer Authentication"
        },
        {
            "location": "/reference/rebilly-api/#customers",
            "text": "api . customers  Create and manage your customers and their lead sources. Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models.   See the  Customers resource  for detailed method information.",
            "title": "Customers"
        },
        {
            "location": "/reference/rebilly-api/#disputes",
            "text": "api . disputes  Manage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly.   See the  Disputes resource  for detailed method information.",
            "title": "Disputes"
        },
        {
            "location": "/reference/rebilly-api/#events",
            "text": "api . events  Create and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed.  The actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation.  See Rules Engine.     See the  Events resource  for detailed method information.",
            "title": "Events"
        },
        {
            "location": "/reference/rebilly-api/#files",
            "text": "api . files  Upload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business.     See the  Files resource  for detailed method information.",
            "title": "Files"
        },
        {
            "location": "/reference/rebilly-api/#gateway-accounts",
            "text": "api . gatewayAccounts  Create and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use.   A payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets.  See Supported Gateway Accounts.   See the  Gateway Accounts resource  for detailed method information.",
            "title": "Gateway Accounts"
        },
        {
            "location": "/reference/rebilly-api/#invoices",
            "text": "api . invoices  Issue invoices to your customers and manage their lead sources. Issuing an invoice allows you to calculate or recalculate an invoice\u2019s shipping, taxes, and customer\u2019s redeemed coupons (as applicable, according to coupon configuration and restrictions), and apply them to the invoice.  See also:   Products   Taxes  Shipping  Issuing an Invoice    See the  Invoices resource  for detailed method information.",
            "title": "Invoices"
        },
        {
            "location": "/reference/rebilly-api/#layouts",
            "text": "api . layouts  Create and manage your plan layouts. Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a  pricing  or  plans  page integrated into your website.     See the  Layouts resource  for detailed method information.",
            "title": "Layouts"
        },
        {
            "location": "/reference/rebilly-api/#lists-rules-engine",
            "text": "api . lists  Create and manage your lists. A  list  in an array of values that are stored in the database. The main purpose of a  list  is its usage in Rules Engine, to provide a way to change a  rule  criteria without having to change the  rule  itself.     See the  Lists resource  for detailed method information.",
            "title": "Lists (Rules Engine)"
        },
        {
            "location": "/reference/rebilly-api/#notes",
            "text": "api . notes  Leave notes on a customer record to have a handy location to share with others who may interface with the customer. It's great for customer service.       See the  Notes resource  for detailed method information.",
            "title": "Notes"
        },
        {
            "location": "/reference/rebilly-api/#organizations",
            "text": "api . organizations  Organizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations.   Note  Organizations are shared between the  Live  and  Sandbox  modes.        See the  Organizations resource  for detailed method information.",
            "title": "Organizations"
        },
        {
            "location": "/reference/rebilly-api/#payment-cards",
            "text": "api . paymentCards  Used to create new payment cards and attach them to an existing customer. Can also deactivate payment cards.   See Payment Instruments.    See the  Payment Cards resource  for detailed method information.",
            "title": "Payment Cards"
        },
        {
            "location": "/reference/rebilly-api/#payment-tokens",
            "text": "api . paymentTokens  Tokens are an encrypted string representing a payment instrument. A token expires within 24 hours.  Payment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens.  See Rebilly.js library       See the  Payment Tokens resource  for detailed method information.",
            "title": "Payment Tokens"
        },
        {
            "location": "/reference/rebilly-api/#paypal-accounts",
            "text": "api . paypalAccounts  Used to attach Paypal accounts to an existing customer. Can also deactivate Paypal accounts on a customer's account. Paypal serves as both an acquirer and an alternate payment method.   See Payment Instruments.    See the  Paypal Accounts resource  for detailed method information.",
            "title": "Paypal Accounts"
        },
        {
            "location": "/reference/rebilly-api/#plans",
            "text": "api . plans  Create and manage plans. Used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences.    See the  Plans resource  for detailed method information.",
            "title": "Plans"
        },
        {
            "location": "/reference/rebilly-api/#previews",
            "text": "api . previews  Preview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine.    See the  Previews resource  for detailed method information.",
            "title": "Previews"
        },
        {
            "location": "/reference/rebilly-api/#products",
            "text": "api . products  Create and manage products. You may attach them to plans. Products can have a tax category, accounting code and may require shipping.   See the  Products resource  for detailed method information.",
            "title": "Products"
        },
        {
            "location": "/reference/rebilly-api/#profile",
            "text": "api . profile  Manage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in.   See the  Profile resource  for detailed method information.",
            "title": "Profile"
        },
        {
            "location": "/reference/rebilly-api/#sessions",
            "text": "api . sessions  Create and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys.  This token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API.   See the  Sessions resource  for detailed method information.",
            "title": "Sessions"
        },
        {
            "location": "/reference/rebilly-api/#shipping-zones",
            "text": "api . shippingZones  Create and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each contains regions and countries that you ship to, and has its own shipping rates.   See the  Shipping Zones resource  for detailed method information.",
            "title": "Shipping Zones"
        },
        {
            "location": "/reference/rebilly-api/#status-api",
            "text": "api . status  Get the current status of the Rebilly API.   Tip  You can poll this endpoint on interval to check the status of the API.    See the  Status resource  for detailed method information.",
            "title": "Status (API)"
        },
        {
            "location": "/reference/rebilly-api/#subscriptions",
            "text": "api . subscriptions  Create and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination.   See the  Subscriptions resource  for detailed method information.",
            "title": "Subscriptions"
        },
        {
            "location": "/reference/rebilly-api/#three-d-secure-3ds",
            "text": "api . threeDSecure  Create and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure.  The merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant\u2019s site. This allows the merchant to shift liability from themselves to the issuing bank in some cases.  3D Secure requires cardholder interaction to be completed.   See the  Three D Secure resource  for detailed method information.",
            "title": "Three D Secure (3DS)"
        },
        {
            "location": "/reference/rebilly-api/#tracking",
            "text": "api . tracking  Inspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing.   See the  Tracking resource  for detailed method information.",
            "title": "Tracking"
        },
        {
            "location": "/reference/rebilly-api/#transactions",
            "text": "api . transactions  Create and manage transactions. A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future.   See the  Transactions resource  for detailed method information.",
            "title": "Transactions"
        },
        {
            "location": "/reference/rebilly-api/#users",
            "text": "api . users  Create and manage users. A  user  represents a person who can login to Rebilly, and take actions subject to their granted permissions.   See the  Users resource  for detailed method information.",
            "title": "Users"
        },
        {
            "location": "/reference/rebilly-api/#webhooks",
            "text": "api . webhooks  Create and manage webhooks. Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice.   They allow you to collect information about those events. Rebilly can send this information to an URL of your choice.   See the  Webhooks resource  for detailed method information.",
            "title": "Webhooks"
        },
        {
            "location": "/reference/rebilly-api/#websites",
            "text": "api . websites  Create and manage websites. The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business.   See the  Websites resource  for detailed method information.",
            "title": "Websites"
        },
        {
            "location": "/reference/rebilly-experimental-api/",
            "text": "RebillyExperimentalAPI\n\u00b6\n\n\nExperimental Rebilly API client that can break backward-compatibility. This client contains compute-heavy features like reports and statistics and is bound to change over time.\n\n\nAPI Spec\n\n\nSee the \nRebilly Reports API spec \n  for full details on the different API calls exposed within this client.\n\n\nImporting\n\u00b6\n\n\nThe \nRebillyExperimentalAPI\n factory is part of the \nrebilly-js-sdk\n package as a \nnon-default\n export.\n\n\nimport\n \n{\nRebillyExperimentalAPI\n}\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n\n\nConfiguration\n\u00b6\n\n\nAll client API configuration parameters are optional. However a secret API key can only be provided at instantiation.\n\n\n\n\nAPI Environments\n\n\nBy default an instance is always generated in the \nLive\n environment. The \nSandbox\n mode is only recommended while developing your integration. \n\n\n\n\nParameters\n\u00b6\n\n\nconst\n \napi\n \n=\n \nRebillyExperimentalAPI\n({\napiKey\n:\n \n'secret-api-key'\n,\n \nsandbox\n:\n \ntrue\n,\n \ntimeout\n:\n \n10000\n});\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiKey\n\n\nstring\n\n\nnull\n\n\nYour secret API key. To be used only for Node integrations. See \nDeveloper > API Keys\n.\n\n\n\n\n\n\nsandbox\n\n\nboolean\n\n\nfalse\n\n\nFlag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n6000\n\n\nDefine the timeout in milliseconds for API requests.\n\n\n\n\n\n\n\n\n\n\nVersion Agnostic\n\n\nThe Experimental API client is version-less and does not support it as part of its configuration hash.\n\n\n\n\nPublic Methods\n\u00b6\n\n\nThe API client exposes different configuration and utility methods you can use to customize your instance.\n\n\naddRequestInterceptor\n\u00b6\n\n\naddRequestInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.\n\n\nExample\n\n\napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=>\n \n{\n\n    \nconfig\n.\nparams\n[\n'extra-query-param'\n]\n \n=\n \n'foobar'\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. \n \nthenDelegate\n(\nconfig\n)\n \n=>\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nconfig\nObject\nThe request configuration. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the request is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=>\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveRequestInterceptor\n\u00b6\n\n\nremoveRequestInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific request interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=>\n \n{\n\n    \nconfig\n.\nparams\n[\n'extra-query-param'\n]\n \n=\n \n'foobar'\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveRequestInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added request interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\naddResponseInterceptor\n\u00b6\n\n\naddResponseInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.\n\n\nExample\n\n\napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=>\n \n{\n\n    \n// modify reponse data before having it processed by the API client\n\n    \nresponse\n.\ndata\n.\nshift\n();\n \n//removed first element\n\n    \nreturn\n \nresponse\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. \n \nthenDelegate\n(\nresponse\n)\n \n=>\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nresponse\nObject\nThe API response. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the response is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=>\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveResponseInterceptor\n\u00b6\n\n\nremoveResponseInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific response interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=>\n \n{\n\n    \nresponse\n.\ndata\n.\nshift\n();\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveResponseInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added response interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\ngetCancellationToken\n\u00b6\n\n\ngetCancellationToken\n() -> \n{CancelToken}\n\n\nReturns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.\n\n\nSince 0.12.0\n\n\nExample\n\n\n// once created the token will be used for each subsequent API request\n\n\nconst\n \ntoken\n \n=\n \napi\n.\ngetCancellationToken\n();\n\n\n// when cancelling the request, a message can be provided\n\n\ntoken\n.\ncancel\n(\n'Cancelled request manually'\n);\n\n\n\n// any ongoing request will be canceled by the same token\n\n\ntry\n \n{\n\n    \n// trigger a request\n\n    \nawait\n \napi\n.\ncustomers\n.\nget\n({\nid\n:\n \n'cancellable-customer-id'\n});\n\n\n}\n \ncatch\n(\nerror\n)\n \n{\n\n    \n// you can detect if a request was canceled by checking \n\n    \n// the error.name\n\n    \nif\n \n(\nerror\n.\nname\n \n===\n \n'RebillyCanceledError'\n)\n \n{\n\n        \n// the message provided to 'token.cancel' will be reflected here\n\n        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n \n// returns 'Cancelled request manually'     \n\n    \n}\n \nelse\n \n{\n\n       \n// normal error handling \n\n    \n}\n\n\n}\n\n\n\n\n\nReturns\n\n\nThe global cancellation token. An instance of \naxios.CancelToken\n. Exposes method \ncancel(message)\n.\n\n\nType \nCancelToken\n\n\nsetTimeout\n\u00b6\n\n\nsetTimeout\n(\ntimeout\n)\n\n\nDefine the default timeout delay in milliseconds for the current API instance.\n\n\nExample\n\n\napi\n.\nsetTimeout\n(\n10000\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n-\n\n\nTimeout delay in milliseconds.\n\n\n\n\n\n\n\n\nsetSessionToken\n\u00b6\n\n\nsetSessionToken\n(\ntoken\n)\n\n\nUse a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the \nprivate API key\n when the client is used in a browser.\n\n\nTo retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.\n\n\nExample\n\n\n// instantiate an unauthorized API client\n\n\nconst\n \napi\n \n=\n \nRebillyExperimentalAPI\n();\n\n\n\n// build the sign in payload\n\n\nconst\n \npayload\n \n=\n \n{\ndata\n:\n \n{\nemail\n,\n \npassword\n,\n \nexpiredTime\n}};\n\n\n\n// the 'signIn' method does not require API authorization to complete\n\n\nconst\n \nresponse\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignIn\n(\npayload\n);\n\n\n\n// set the session token for future API requests that require\n\n\n// an authorization using the response fields\n\n\napi\n.\nsetSessionToken\n(\nresponse\n.\nfields\n.\ntoken\n);\n\n\n\n// this request will be authorized using the token\n\n\nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n\n\n\nsetEndpoints\n\u00b6\n\n\nsetEndpoints\n({\nlive\nopt\n, \nsandbox\nopt\n})\n\n\nUpdate the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.\n\n\n\n\nSecuring Communications\n\n\nWhen modifying the API endpoints always use \nHTTPS\n for a production environment. \n\n\n\n\nExample\n\n\napi\n.\nsetEndpoints\n({\nlive\n:\n \n'https://api.rebilly.com/experimental/version/url'\n});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlive\n\n\nstring\n\n\noptional\n\n\nURL for the live API mode.\n\n\n\n\n\n\nsandbox\n\n\nstring\n\n\noptional\n\n\nURL for the sandbox API mode.\n\n\n\n\n\n\n\n\nsetProxyAgent\n\u00b6\n\n\nsetProxyAgent\n({\nhost\n, \nport\n, \nauth\n})\n\n\nDefine a proxy for the current API instance. Authorized using \nHTTP Basic\n credentials. \n\n\nExample\n\n\nconst\n \nconfig\n \n=\n \n{\n\n    \nhost\n:\n \n'127.0.0.1'\n,\n\n    \nport\n:\n \n9000\n,\n\n    \nauth\n:\n \n{\n\n        \n//HTTP Basic\n\n        \nusername\n:\n \n'foobar'\n,\n\n        \npassword\n:\n \n'fuubar'\n\n    \n}\n\n\n};\n\n\n//all subsequent API requests will pass through the proxy\n\n\napi\n.\nsetProxyAgent\n(\nconfig\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nstring\n\n\n-\n\n\nHostname of the proxy server.\n\n\n\n\n\n\nport\n\n\nnumber\n\n\n-\n\n\nPort of the proxy server.\n\n\n\n\n\n\nauth\n\n\nObject\n\n\n-\n\n\nBasic credentials to connect to the proxy server. \n \nProperties\nName\nType\nDescription\nusername\nstring\nThe username required for basic authentication.\npassword\nstring\nThe password required for basic authentication.\n\n\n\n\n\n\n\n\nsetApiConsumer\n\u00b6\n\n\nsetApiConsumer\n(\nconsumerId\n)\n\n\nDefine a consumer identification \nHTTP header\n string for use with Rebilly. This allows you to identify your app in the API logs.\n\n\n\n\nTip\n\n\nDefining an API consumer is useful for filtering your integration API logs from those who use Rebilly's user interface.\n\n\n\n\nExample\n\n\napi\n.\nsetApiConsumer\n(\n'Acme Inc 1.0.4'\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconsumerId\n\n\nstring\n\n\noptional\n\n\nA string used to identify your application in the API logs.",
            "title": "RebillyExperimentalAPI"
        },
        {
            "location": "/reference/rebilly-experimental-api/#rebillyexperimentalapi",
            "text": "Experimental Rebilly API client that can break backward-compatibility. This client contains compute-heavy features like reports and statistics and is bound to change over time.  API Spec  See the  Rebilly Reports API spec    for full details on the different API calls exposed within this client.",
            "title": "RebillyExperimentalAPI"
        },
        {
            "location": "/reference/rebilly-experimental-api/#importing",
            "text": "The  RebillyExperimentalAPI  factory is part of the  rebilly-js-sdk  package as a  non-default  export.  import   { RebillyExperimentalAPI }   from   'rebilly-js-sdk' ;",
            "title": "Importing"
        },
        {
            "location": "/reference/rebilly-experimental-api/#configuration",
            "text": "All client API configuration parameters are optional. However a secret API key can only be provided at instantiation.   API Environments  By default an instance is always generated in the  Live  environment. The  Sandbox  mode is only recommended while developing your integration.",
            "title": "Configuration"
        },
        {
            "location": "/reference/rebilly-experimental-api/#parameters",
            "text": "const   api   =   RebillyExperimentalAPI ({ apiKey :   'secret-api-key' ,   sandbox :   true ,   timeout :   10000 });      Option  Type  Default  Description      apiKey  string  null  Your secret API key. To be used only for Node integrations. See  Developer > API Keys .    sandbox  boolean  false  Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.    timeout  number  6000  Define the timeout in milliseconds for API requests.      Version Agnostic  The Experimental API client is version-less and does not support it as part of its configuration hash.",
            "title": "Parameters"
        },
        {
            "location": "/reference/rebilly-experimental-api/#public-methods",
            "text": "The API client exposes different configuration and utility methods you can use to customize your instance.",
            "title": "Public Methods"
        },
        {
            "location": "/reference/rebilly-experimental-api/#addrequestinterceptor",
            "text": "addRequestInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.  Example  api . addRequestInterceptor ({ thenDelegate :   ( config )   =>   { \n     config . params [ 'extra-query-param' ]   =   'foobar' ; \n     return   config ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue.    thenDelegate ( config )   =>   { Object }   Parameters   Name Type Description config Object The request configuration. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the request is executed for this interceptor.    catchDelegate ( error )   =>   Promise   Parameters   Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.",
            "title": "addRequestInterceptor"
        },
        {
            "location": "/reference/rebilly-experimental-api/#removerequestinterceptor",
            "text": "removeRequestInterceptor ( interceptor )  Removes a specific request interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addRequestInterceptor ({ thenDelegate :   ( config )   =>   { \n     config . params [ 'extra-query-param' ]   =   'foobar' ; \n     return   config ;  }});  // remove via reference  api . removeRequestInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added request interceptor that should be removed from the current instance.",
            "title": "removeRequestInterceptor"
        },
        {
            "location": "/reference/rebilly-experimental-api/#addresponseinterceptor",
            "text": "addResponseInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.  Example  api . addResponseInterceptor ({ thenDelegate :   ( response )   =>   { \n     // modify reponse data before having it processed by the API client \n     response . data . shift ();   //removed first element \n     return   response ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue.    thenDelegate ( response )   =>   { Object }   Parameters   Name Type Description response Object The API response. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the response is executed for this interceptor.    catchDelegate ( error )   =>   Promise   Parameters   Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.",
            "title": "addResponseInterceptor"
        },
        {
            "location": "/reference/rebilly-experimental-api/#removeresponseinterceptor",
            "text": "removeResponseInterceptor ( interceptor )  Removes a specific response interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addResponseInterceptor ({ thenDelegate :   ( response )   =>   { \n     response . data . shift (); \n     return   config ;  }});  // remove via reference  api . removeResponseInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added response interceptor that should be removed from the current instance.",
            "title": "removeResponseInterceptor"
        },
        {
            "location": "/reference/rebilly-experimental-api/#getcancellationtoken",
            "text": "getCancellationToken () ->  {CancelToken}  Returns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.  Since 0.12.0  Example  // once created the token will be used for each subsequent API request  const   token   =   api . getCancellationToken ();  // when cancelling the request, a message can be provided  token . cancel ( 'Cancelled request manually' );  // any ongoing request will be canceled by the same token  try   { \n     // trigger a request \n     await   api . customers . get ({ id :   'cancellable-customer-id' });  }   catch ( error )   { \n     // you can detect if a request was canceled by checking  \n     // the error.name \n     if   ( error . name   ===   'RebillyCanceledError' )   { \n         // the message provided to 'token.cancel' will be reflected here \n         console . log ( error . message )   // returns 'Cancelled request manually'      \n     }   else   { \n        // normal error handling  \n     }  }   Returns  The global cancellation token. An instance of  axios.CancelToken . Exposes method  cancel(message) .  Type  CancelToken",
            "title": "getCancellationToken"
        },
        {
            "location": "/reference/rebilly-experimental-api/#settimeout",
            "text": "setTimeout ( timeout )  Define the default timeout delay in milliseconds for the current API instance.  Example  api . setTimeout ( 10000 );   Parameters     Name  Type  Attribute  Description      timeout  number  -  Timeout delay in milliseconds.",
            "title": "setTimeout"
        },
        {
            "location": "/reference/rebilly-experimental-api/#setsessiontoken",
            "text": "setSessionToken ( token )  Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the  private API key  when the client is used in a browser.  To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.  Example  // instantiate an unauthorized API client  const   api   =   RebillyExperimentalAPI ();  // build the sign in payload  const   payload   =   { data :   { email ,   password ,   expiredTime }};  // the 'signIn' method does not require API authorization to complete  const   response   =   await   api . account . signIn ( payload );  // set the session token for future API requests that require  // an authorization using the response fields  api . setSessionToken ( response . fields . token );  // this request will be authorized using the token  const   customers   =   await   api . customers . getAll ();",
            "title": "setSessionToken"
        },
        {
            "location": "/reference/rebilly-experimental-api/#setendpoints",
            "text": "setEndpoints ({ live opt ,  sandbox opt })  Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.   Securing Communications  When modifying the API endpoints always use  HTTPS  for a production environment.    Example  api . setEndpoints ({ live :   'https://api.rebilly.com/experimental/version/url' });   Parameters     Name  Type  Attribute  Description      live  string  optional  URL for the live API mode.    sandbox  string  optional  URL for the sandbox API mode.",
            "title": "setEndpoints"
        },
        {
            "location": "/reference/rebilly-experimental-api/#setproxyagent",
            "text": "setProxyAgent ({ host ,  port ,  auth })  Define a proxy for the current API instance. Authorized using  HTTP Basic  credentials.   Example  const   config   =   { \n     host :   '127.0.0.1' , \n     port :   9000 , \n     auth :   { \n         //HTTP Basic \n         username :   'foobar' , \n         password :   'fuubar' \n     }  };  //all subsequent API requests will pass through the proxy  api . setProxyAgent ( config );   Parameters     Name  Type  Attribute  Description      host  string  -  Hostname of the proxy server.    port  number  -  Port of the proxy server.    auth  Object  -  Basic credentials to connect to the proxy server.    Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication.",
            "title": "setProxyAgent"
        },
        {
            "location": "/reference/rebilly-experimental-api/#setapiconsumer",
            "text": "setApiConsumer ( consumerId )  Define a consumer identification  HTTP header  string for use with Rebilly. This allows you to identify your app in the API logs.   Tip  Defining an API consumer is useful for filtering your integration API logs from those who use Rebilly's user interface.   Example  api . setApiConsumer ( 'Acme Inc 1.0.4' );   Parameters     Name  Type  Attribute  Description      consumerId  string  optional  A string used to identify your application in the API logs.",
            "title": "setApiConsumer"
        },
        {
            "location": "/reference/rebilly-errors/",
            "text": "RebillyErrors\n\u00b6\n\n\nThe JS SDK returns custom error types based on the HTTP code when available or an internal condition like timeouts and manual cancellation.\n\n\nImporting\n\u00b6\n\n\nYou can import the error object into your project to access the different types of errors returned by the library..\n\nimport\n \n{\nRebillyErrors\n}\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n\nTypes\n\u00b6\n\n\nThe \nRebillyErrors\n object exposes the following types:\n\n\n\n\n\n\n\n\nName\n\n\nStatus Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRebillyRequestError\n\n\n-\n\n\nGeneric error when no response is available.\n\n\n\n\n\n\nRebillyTimeoutError\n\n\n-\n\n\nThe request timed out.\n\n\n\n\n\n\nRebillyCanceledError\n\n\n-\n\n\nThe request was manually canceled before being completed.\nSee \napi.getCancellationToken\n\n\n\n\n\n\nRebillyForbiddenError\n\n\n401\n\n\nIndicates an invalid API key or expired session token.\n\n\n\n\n\n\nRebillyNotFoundError\n\n\n404\n\n\nRequested resource was not found.\n\n\n\n\n\n\nRebillyMethodNotAllowedError\n\n\n405\n\n\nRequest method not allowed on this resource.\n\n\n\n\n\n\nRebillyConflictError\n\n\n409\n\n\nRequested operation triggered a conflict.\n\n\n\n\n\n\nRebillyValidationError\n\n\n422\n\n\nThe request payload triggered a validation error (see error \ndetails\n).\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWhen catching an error from any of the Rebilly API clients, check the \nerror.name\n to determine the type.\n\n\n\n\nExamples\n\u00b6\n\n\nThrowing \nRebillyErrors\n\u00b6\n\n\nUsing the imported errors you can throw them on demand in your integration.\n\nimport\n \n{\nRebillyErrors\n}\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\n// you can throw the errors internally\n\n\nif\n \n(\nresponse\n.\nfields\n.\nid\n \n===\n \nnull\n)\n \n{\n\n    \nconst\n \nerror\n \n=\n \n{\nmessage\n:\n \n'Missing ID'\n};\n\n    \nthrow\n \nnew\n \nRebillyErrors\n.\nRebillyRequestError\n({\nerror\n});\n\n\n}\n\n\n\n\n\n\nNote\n\n\nYou can pass an error instance directly to the constructor of any type within \nRebillyErrors\n.\n\ntry\n \n{\n\n    \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n}\n \ncatch\n \n(\nerror\n)\n \n{\n\n    \n// using the error that was caught as the parameters\n\n    \nthrow\n \nnew\n \nRebillyErrors\n.\nRebillyRequestError\n({\nerror\n});\n\n\n}\n\n\n\n\n\n\nVerifying the error type\n\u00b6\n\n\nWhen catching library errors you can use the imported errors to compare their types and handle them differently.\n\nimport\n \nRebillyAPI\n,\n \n{\nRebillyErrors\n}\n \nfrom\n \n'rebilly-js-sdk'\n;\n\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n'private-key'\n});\n\n\n\ntry\n \n{\n\n    \nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n}\n \ncatch\n \n(\nerror\n)\n \n{\n\n    \nif\n \n(\nerror\n.\nname\n \n===\n \nRebillyErrors\n.\nRebillyRequestError\n.\nname\n)\n \n{\n\n        \n// handle a request error differently\n\n        \n// from other error types\n\n    \n}\n\n    \nelse\n \n{\n\n        \n// handle any other error type\n\n    \n}\n\n\n}\n\n\n\n\n\n\nNote\n\n\nAlternatively you can compare the \nerror\n.\nname\n to the string representation of the error type.\n\nif\n \n(\nerror\n.\nname\n \n===\n \n'RebillyRequestError'\n)\n \n{\n\n    \n// handle error\n\n\n}",
            "title": "RebillyErrors"
        },
        {
            "location": "/reference/rebilly-errors/#rebillyerrors",
            "text": "The JS SDK returns custom error types based on the HTTP code when available or an internal condition like timeouts and manual cancellation.",
            "title": "RebillyErrors"
        },
        {
            "location": "/reference/rebilly-errors/#importing",
            "text": "You can import the error object into your project to access the different types of errors returned by the library.. import   { RebillyErrors }   from   'rebilly-js-sdk' ;",
            "title": "Importing"
        },
        {
            "location": "/reference/rebilly-errors/#types",
            "text": "The  RebillyErrors  object exposes the following types:     Name  Status Code  Description      RebillyRequestError  -  Generic error when no response is available.    RebillyTimeoutError  -  The request timed out.    RebillyCanceledError  -  The request was manually canceled before being completed. See  api.getCancellationToken    RebillyForbiddenError  401  Indicates an invalid API key or expired session token.    RebillyNotFoundError  404  Requested resource was not found.    RebillyMethodNotAllowedError  405  Request method not allowed on this resource.    RebillyConflictError  409  Requested operation triggered a conflict.    RebillyValidationError  422  The request payload triggered a validation error (see error  details ).      Tip  When catching an error from any of the Rebilly API clients, check the  error.name  to determine the type.",
            "title": "Types"
        },
        {
            "location": "/reference/rebilly-errors/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/reference/rebilly-errors/#throwing-rebillyerrors",
            "text": "Using the imported errors you can throw them on demand in your integration. import   { RebillyErrors }   from   'rebilly-js-sdk' ;  // you can throw the errors internally  if   ( response . fields . id   ===   null )   { \n     const   error   =   { message :   'Missing ID' }; \n     throw   new   RebillyErrors . RebillyRequestError ({ error });  }    Note  You can pass an error instance directly to the constructor of any type within  RebillyErrors . try   { \n     await   api . customers . getAll ();  }   catch   ( error )   { \n     // using the error that was caught as the parameters \n     throw   new   RebillyErrors . RebillyRequestError ({ error });  }",
            "title": "Throwing RebillyErrors"
        },
        {
            "location": "/reference/rebilly-errors/#verifying-the-error-type",
            "text": "When catching library errors you can use the imported errors to compare their types and handle them differently. import   RebillyAPI ,   { RebillyErrors }   from   'rebilly-js-sdk' ;  const   api   =   RebillyAPI ({ apiKey : 'private-key' });  try   { \n     const   customers   =   await   api . customers . getAll ();  }   catch   ( error )   { \n     if   ( error . name   ===   RebillyErrors . RebillyRequestError . name )   { \n         // handle a request error differently \n         // from other error types \n     } \n     else   { \n         // handle any other error type \n     }  }    Note  Alternatively you can compare the  error . name  to the string representation of the error type. if   ( error . name   ===   'RebillyRequestError' )   { \n     // handle error  }",
            "title": "Verifying the error type"
        },
        {
            "location": "/reference/resources/account/",
            "text": "Account \napi\n.\naccount\n\u00b6\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nAllows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset.\n\n\nsignUp\n\u00b6\n\n\nsignUp\n({\ndata\n}) -> \n{Member}\n\n\nCreates a new user in Rebilly and sends an email confirmation. The user will have to activate his account using the email confirmation that he receives.\n\n\nImportant\n\u00a0\u00a0This request does not require API authentication and can be completed as a guest.\n\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \n'acme+test@rebilly.com'\n,\n\n    \ncompany\n:\n \n'Acme Imports'\n,\n\n    \nfirstName\n:\n \n'John'\n,\n\n    \nlastName\n:\n \n'Doe'\n,\n\n    \nbusinessPhone\n:\n \n'14566789'\n,\n\n    \npassword\n:\n \n'helloworld123'\n,\n\n    \nwebsite\n:\n \n'http://acme-imports.com'\n\n\n};\n\n\n\nconst\n \nuser\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignUp\n({\ndata\n});\n\n\nconsole\n.\nlog\n(\nuser\n.\nfields\n.\nid\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the newly created user information.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nsignIn\n\u00b6\n\n\nsignIn\n({\ndata\n}) -> \n{Member}\n\n\nSign in to a user account and return the session token (JWT). \n\n\nOptionally you can provide the expired time of the session using \nexpiredTime\n as a \ndatetime\n in the future.\n\n\nImportant\n\u00a0\u00a0This request does not require API authentication and can be completed as a guest.\n\n\n\n\n\nSee \napi.setSessionToken\n\n\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \n'acme+test@rebilly.com'\n,\n\n    \npassword\n:\n \n'helloworld123'\n\n\n    \n// optionally you can define an `expiredTime` to \n\n    \n// limit the duration of the session token\n\n\n    \n//expiredTime: '2017-09-18T19:17:39Z'\n\n\n};\n\n\n\nconst\n \nsession\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignIn\n({\ndata\n});\n\n\n\n// the session token (JWT) can be used in\n\n\n// conjunction with api.setSessionToken to authorize API\n\n\n// requests in the browser \n\n\nconsole\n.\nlog\n(\nsession\n.\nfields\n.\ntoken\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the session information.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nactivate\n\u00b6\n\n\nactivate\n({\ntoken\n}) -> \n{Member}\n\n\nActivate a user account with the token he received by email when the user signed up to Rebilly. \n\n\nImportant\n\u00a0\u00a0This request does not require API authentication and can be completed as a guest.\n\n\n\nExample\n\n\nconst\n \ntoken\n \n=\n \n'1234567890abcdefghijklmnop'\n;\n\n\n\nconst\n \nactivation\n \n=\n \nawait\n \napi\n.\naccount\n.\nactivate\n({\ntoken\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nactivation\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nforgotPassword\n\u00b6\n\n\nforgotPassword\n({\ndata\n}) -> \n{Member}\n\n\nSends an email with a link containing a token to reset user password.\n\n\nImportant\n\u00a0\u00a0This request does not require API authentication and can be completed as a guest.\n\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \n'acme+test@rebilly.com'\n\n\n};\n\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\naccount\n.\nforgotPassword\n({\ndata\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nresetSandbox\n\u00b6\n\n\nresetSandbox\n() -> \n{Member}\n\n\nReset the contents of the sandbox mode. This is useful for testing and developing your integration with Rebilly.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\naccount\n.\nresetSandbox\n();\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember",
            "title": "Accounts"
        },
        {
            "location": "/reference/resources/account/#account-apiaccount",
            "text": "Member of  RebillyAPI   Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset.",
            "title": "Account api.account"
        },
        {
            "location": "/reference/resources/account/#signup",
            "text": "signUp ({ data }) ->  {Member}  Creates a new user in Rebilly and sends an email confirmation. The user will have to activate his account using the email confirmation that he receives.  Important \u00a0\u00a0This request does not require API authentication and can be completed as a guest.  Example  const   data   =   { \n     email :   'acme+test@rebilly.com' , \n     company :   'Acme Imports' , \n     firstName :   'John' , \n     lastName :   'Doe' , \n     businessPhone :   '14566789' , \n     password :   'helloworld123' , \n     website :   'http://acme-imports.com'  };  const   user   =   await   api . account . signUp ({ data });  console . log ( user . fields . id );   Returns  A member exposing the newly created user information.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "signUp"
        },
        {
            "location": "/reference/resources/account/#signin",
            "text": "signIn ({ data }) ->  {Member}  Sign in to a user account and return the session token (JWT).   Optionally you can provide the expired time of the session using  expiredTime  as a  datetime  in the future.  Important \u00a0\u00a0This request does not require API authentication and can be completed as a guest.   See  api.setSessionToken   Example  const   data   =   { \n     email :   'acme+test@rebilly.com' , \n     password :   'helloworld123' \n\n     // optionally you can define an `expiredTime` to  \n     // limit the duration of the session token \n\n     //expiredTime: '2017-09-18T19:17:39Z'  };  const   session   =   await   api . account . signIn ({ data });  // the session token (JWT) can be used in  // conjunction with api.setSessionToken to authorize API  // requests in the browser   console . log ( session . fields . token );   Returns  A member exposing the session information.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "signIn"
        },
        {
            "location": "/reference/resources/account/#activate",
            "text": "activate ({ token }) ->  {Member}  Activate a user account with the token he received by email when the user signed up to Rebilly.   Important \u00a0\u00a0This request does not require API authentication and can be completed as a guest.  Example  const   token   =   '1234567890abcdefghijklmnop' ;  const   activation   =   await   api . account . activate ({ token });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( activation . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "activate"
        },
        {
            "location": "/reference/resources/account/#forgotpassword",
            "text": "forgotPassword ({ data }) ->  {Member}  Sends an email with a link containing a token to reset user password.  Important \u00a0\u00a0This request does not require API authentication and can be completed as a guest.  Example  const   data   =   { \n     email :   'acme+test@rebilly.com'  };  const   request   =   await   api . account . forgotPassword ({ data });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "forgotPassword"
        },
        {
            "location": "/reference/resources/account/#resetsandbox",
            "text": "resetSandbox () ->  {Member}  Reset the contents of the sandbox mode. This is useful for testing and developing your integration with Rebilly.  Example  const   request   =   await   api . account . resetSandbox ();  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member",
            "title": "resetSandbox"
        },
        {
            "location": "/reference/resources/api-keys/",
            "text": "API Keys \napi\n.\napiKeys\n\u00b6\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nAllows you to manage your API keys. Create or modify existing ones with different \ndatetime\n settings. API keys are private and should only be used for server-side operations.\n\n\ngetAll\n\u00b6\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of API keys. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ngetAll\n();\n\n\n\n// alternatively you can speciy one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n'-createdTime'\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\napiKey\n \n=>\n \nconsole\n.\nlog\n(\napiKey\n.\nfields\n.\ndescription\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of API keys.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\u00b6\n\n\nget\n({\nid\n}) -> \n{Member}\n\n\nGet an API key by its \nid\n.\n\n\nExample\n\n\nconst\n \napiKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\nget\n({\nid\n:\n \n'foobar-001'\n});\n\n\nconsole\n.\nlog\n(\napiKey\n.\nfields\n.\ndescription\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the API key fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\u00b6\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -> \n{Member}\n\n\nCreate an API key. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nExample\n\n\n// first set the properties for the new API key\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \n'My new API key'\n,\n\n    \n// the `datetimeFormat` defines how dates will be saved \n\n    \n// and handled by Rebilly for this API key\n\n    \n// can be either `iso8601` (default) or `mysql`\n\n    \ndatetimeFormat\n:\n \n'iso8601'\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ncreate\n({\nid\n:\n \n'my-second-key'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created API key fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\u00b6\n\n\nupdate\n({\nid\n, \ndata\n}) -> \n{Member}\n\n\nUpdate an API key by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \n'A better description'\n\n\n};\n\n\n\nconst\n \napiKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\nupdate\n({\nid\n:\n \n'my-second-key'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated API key fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\u00b6\n\n\ndelete\n({\nid\n}) -> \n{Member}\n\n\nDelete an API key by using its \nid\n. \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ndelete\n({\nid\n:\n \n'my-second-key'\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.",
            "title": "API Keys"
        },
        {
            "location": "/reference/resources/api-keys/#api-keys-apiapikeys",
            "text": "Member of  RebillyAPI   Allows you to manage your API keys. Create or modify existing ones with different  datetime  settings. API keys are private and should only be used for server-side operations.",
            "title": "API Keys api.apiKeys"
        },
        {
            "location": "/reference/resources/api-keys/#getall",
            "text": "getAll ({\n         limit opt , \n         offset opt , \n         sort opt \n        }) ->  {Collection} \n       Get a collection of API keys. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . apiKeys . getAll ();  // alternatively you can speciy one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   '-createdTime' };   const   secondCollection   =   await   api . apiKeys . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( apiKey   =>   console . log ( apiKey . fields . description ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .     Returns  A collection of API keys.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "getAll"
        },
        {
            "location": "/reference/resources/api-keys/#get",
            "text": "get ({ id }) ->  {Member}  Get an API key by its  id .  Example  const   apiKey   =   await   api . apiKeys . get ({ id :   'foobar-001' });  console . log ( apiKey . fields . description );   Returns  A member exposing the API key fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "get"
        },
        {
            "location": "/reference/resources/api-keys/#create",
            "text": "create ({ id opt ,  data }) ->  {Member}  Create an API key. Optionally provide a specific  id  to use, or let Rebilly generate one.   Example  // first set the properties for the new API key  const   data   =   { \n     description :   'My new API key' , \n     // the `datetimeFormat` defines how dates will be saved  \n     // and handled by Rebilly for this API key \n     // can be either `iso8601` (default) or `mysql` \n     datetimeFormat :   'iso8601'  };  // the ID is optional  const   firstKey   =   await   api . apiKeys . create ({ data });  // or you can provide one  const   secondKey   =   await   api . apiKeys . create ({ id :   'my-second-key' ,   data });   Returns  A member exposing the created API key fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "create"
        },
        {
            "location": "/reference/resources/api-keys/#update",
            "text": "update ({ id ,  data }) ->  {Member}  Update an API key by using its  id .   Example  // define values to update  const   data   =   { \n     description :   'A better description'  };  const   apiKey   =   await   api . apiKeys . update ({ id :   'my-second-key' ,   data });   Returns  A member exposing the updated API key fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "update"
        },
        {
            "location": "/reference/resources/api-keys/#delete",
            "text": "delete ({ id }) ->  {Member}  Delete an API key by using its  id .   Example  const   request   =   await   api . apiKeys . delete ({ id :   'my-second-key' });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "delete"
        },
        {
            "location": "/reference/resources/bank-accounts/",
            "text": "Bank Accounts \napi\n.\nbankAccounts\n\u00b6\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nBank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.\n\n\ngetAll\n\u00b6\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of bank accounts. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ngetAll\n();\n\n\n\n// alternatively you can speciy one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n'-createdTime'\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nbankAccount\n \n=>\n \nconsole\n.\nlog\n(\nbankAccount\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of bank accounts.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\u00b6\n\n\nget\n({\nid\n}) -> \n{Member}\n\n\nGet a bank account by its \nid\n.\n\n\nExample\n\n\nconst\n \nbankAccount\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\nget\n({\nid\n:\n \n'foobar-001'\n});\n\n\nconsole\n.\nlog\n(\nbankAccount\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the bank account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\u00b6\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -> \n{Member}\n\n\nCreate a bank account. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nYou can either provide detailed bank account fields or replace them with the \ntoken\n (payment token) field.\n\n\nExample\n\n\n// first set the required properties for the new bank account\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nbankName\n:\n \n'My Fake Financial'\n,\n\n    \nroutingNumber\n:\n \n'12345678'\n,\n\n    \naccountNumber\n:\n \n'12345678'\n,\n\n    \naccountType\n:\n \n'checking'\n,\n\n    \ncustomerId\n:\n \n'acme-001'\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ncreate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created bank account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeactivate\n\u00b6\n\n\ndeactivate\n({\nid\n}) -> \n{Member}\n\n\nDeactivate a bank account by using its \nid\n. This will prevent it from being used by the customer. \n\n\nExample\n\n\nconst\n \nbankAccount\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ndeactivate\n({\nid\n:\n \n'my-second-key'\n});\n\n\n\n// the bank account status will be updated to reflect the modification\n\n\nconsole\n.\nlog\n(\nbankAccount\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the deactivated bank account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.",
            "title": "Bank Accounts"
        },
        {
            "location": "/reference/resources/bank-accounts/#bank-accounts-apibankaccounts",
            "text": "Member of  RebillyAPI   Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.",
            "title": "Bank Accounts api.bankAccounts"
        },
        {
            "location": "/reference/resources/bank-accounts/#getall",
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of bank accounts. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . bankAccounts . getAll ();  // alternatively you can speciy one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   '-createdTime' };   const   secondCollection   =   await   api . bankAccounts . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( bankAccount   =>   console . log ( bankAccount . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of bank accounts.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "getAll"
        },
        {
            "location": "/reference/resources/bank-accounts/#get",
            "text": "get ({ id }) ->  {Member}  Get a bank account by its  id .  Example  const   bankAccount   =   await   api . bankAccounts . get ({ id :   'foobar-001' });  console . log ( bankAccount . fields . status );   Returns  A member exposing the bank account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "get"
        },
        {
            "location": "/reference/resources/bank-accounts/#create",
            "text": "create ({ id opt ,  data }) ->  {Member}  Create a bank account. Optionally provide a specific  id  to use, or let Rebilly generate one.   You can either provide detailed bank account fields or replace them with the  token  (payment token) field.  Example  // first set the required properties for the new bank account  const   data   =   { \n     bankName :   'My Fake Financial' , \n     routingNumber :   '12345678' , \n     accountNumber :   '12345678' , \n     accountType :   'checking' , \n     customerId :   'acme-001'  };  // the ID is optional  const   firstKey   =   await   api . bankAccounts . create ({ data });  // or you can provide one  const   secondKey   =   await   api . bankAccounts . create ({ id :   'my-second-id' ,   data });   Returns  A member exposing the created bank account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "create"
        },
        {
            "location": "/reference/resources/bank-accounts/#deactivate",
            "text": "deactivate ({ id }) ->  {Member}  Deactivate a bank account by using its  id . This will prevent it from being used by the customer.   Example  const   bankAccount   =   await   api . bankAccounts . deactivate ({ id :   'my-second-key' });  // the bank account status will be updated to reflect the modification  console . log ( bankAccount . fields . status );   Returns  A member exposing the deactivated bank account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "deactivate"
        },
        {
            "location": "/reference/resources/blacklists/",
            "text": "Blacklists \napi\n.\nblacklists\n\u00b6\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nBlacklists are used to manage risk and fraud by aborting an operation if the blacklisted value matches a field related to a customer.  \n\n\nRebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.\n\n\ngetAll\n\u00b6\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of blacklist items. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ngetAll\n();\n\n\n\n// alternatively you can speciy one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n'-createdTime'\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nblacklistItem\n \n=>\n \nconsole\n.\nlog\n(\nblacklistItem\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of blacklist items.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\u00b6\n\n\nget\n({\nid\n}) -> \n{Member}\n\n\nGet a blacklist item by its \nid\n.\n\n\nExample\n\n\nconst\n \nblacklistItem\n \n=\n \nawait\n \napi\n.\nblacklists\n.\nget\n({\nid\n:\n \n'foobar-001'\n});\n\n\nconsole\n.\nlog\n(\nblacklistItem\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the blacklist item fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\u00b6\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -> \n{Member}\n\n\nCreate a blacklist item entry. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nIf you do not provide an expiry time the item will be permanent. \n\n\nThe supported blacklist item types are:\n\n\n\n\npayment-card-id\n \n\n\ncustomer-id\n\n\nemail\n \n\n\nip-address\n \n\n\ncountry\n \n\n\nfingerprint\n \n\n\nbin\n\n\n\n\nExample\n\n\n// first set the required properties for the new blacklist item\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ntype\n:\n \n'ip-address'\n,\n\n    \nvalue\n:\n \n'63.118.98.100'\n\n\n    \n// optionally provide an `expiredTime` to make\n\n    \n// the item expire and function like a `greylist`\n\n\n    \n// expiredTime: '2017-09-18T21:50:44Z'\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ncreate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created blacklist item fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\u00b6\n\n\ndelete\n({\nid\n}) -> \n{Member}\n\n\nDelete a blacklist item by using its \nid\n. This will remove any restrictions on the value of the blacklist item.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ndelete\n({\nid\n:\n \n'my-second-key'\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.",
            "title": "Blacklists"
        },
        {
            "location": "/reference/resources/blacklists/#blacklists-apiblacklists",
            "text": "Member of  RebillyAPI   Blacklists are used to manage risk and fraud by aborting an operation if the blacklisted value matches a field related to a customer.    Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.",
            "title": "Blacklists api.blacklists"
        },
        {
            "location": "/reference/resources/blacklists/#getall",
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of blacklist items. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . blacklists . getAll ();  // alternatively you can speciy one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   '-createdTime' };   const   secondCollection   =   await   api . blacklists . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( blacklistItem   =>   console . log ( blacklistItem . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of blacklist items.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "getAll"
        },
        {
            "location": "/reference/resources/blacklists/#get",
            "text": "get ({ id }) ->  {Member}  Get a blacklist item by its  id .  Example  const   blacklistItem   =   await   api . blacklists . get ({ id :   'foobar-001' });  console . log ( blacklistItem . fields . status );   Returns  A member exposing the blacklist item fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "get"
        },
        {
            "location": "/reference/resources/blacklists/#create",
            "text": "create ({ id opt ,  data }) ->  {Member}  Create a blacklist item entry. Optionally provide a specific  id  to use, or let Rebilly generate one.   If you do not provide an expiry time the item will be permanent.   The supported blacklist item types are:   payment-card-id    customer-id  email    ip-address    country    fingerprint    bin   Example  // first set the required properties for the new blacklist item  const   data   =   { \n     type :   'ip-address' , \n     value :   '63.118.98.100' \n\n     // optionally provide an `expiredTime` to make \n     // the item expire and function like a `greylist` \n\n     // expiredTime: '2017-09-18T21:50:44Z'  };  // the ID is optional  const   firstKey   =   await   api . blacklists . create ({ data });  // or you can provide one  const   secondKey   =   await   api . blacklists . create ({ id :   'my-second-id' ,   data });   Returns  A member exposing the created blacklist item fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "create"
        },
        {
            "location": "/reference/resources/blacklists/#delete",
            "text": "delete ({ id }) ->  {Member}  Delete a blacklist item by using its  id . This will remove any restrictions on the value of the blacklist item.    Example  const   request   =   await   api . blacklists . delete ({ id :   'my-second-key' });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "delete"
        },
        {
            "location": "/reference/resources/checkout-pages/",
            "text": "Checkout Pages \napi\n.\ncheckoutPages\n\u00b6\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nFully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. Each page is attached to a plan and website.\n\n\ngetAll\n\u00b6\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of checkout pages. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ngetAll\n();\n\n\n\n// alternatively you can speciy one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n'-createdTime'\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncheckoutPage\n \n=>\n \nconsole\n.\nlog\n(\ncheckoutPage\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of checkout pages.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\u00b6\n\n\nget\n({\nid\n}) -> \n{Member}\n\n\nGet a checkout page by its \nid\n.\n\n\nExample\n\n\nconst\n \ncheckoutPage\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\nget\n({\nid\n:\n \n'foobar-001'\n});\n\n\nconsole\n.\nlog\n(\ncheckoutPage\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\u00b6\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -> \n{Member}\n\n\nCreate a checkout page for a specific plan and website. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nThe final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's  \ncheckoutPageUri\n and your checkout page's \nuriPath\n.\n\n\nExample: \n\nhttps://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path\n\n\n\n\n\nWarning\n\n\nYou must have at least one plan and one website (with a \ncheckoutPageUri\n defined) before being able to create checkout pages.\n\n\n\n\nExample\n\n\n// first set the required properties for the new checkout page\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nuriPath\n:\n \n'my-first-checkout'\n,\n\n    \nname\n:\n \n'Main checkout page'\n,\n\n    \nplanId\n:\n \n'my-plan-id'\n,\n\n    \nwebsiteId\n:\n \n'my-website-id'\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ncreate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\u00b6\n\n\nupdate\n({\nid\n, \ndata\n}) -> \n{Member}\n\n\nUpdate a checkout page using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \n'Best checkout page'\n\n\n};\n\n\n\nconst\n \ncheckoutPage\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\nupdate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\u00b6\n\n\ndelete\n({\nid\n}) -> \n{Member}\n\n\nDelete a checkout page by using its \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ndelete\n({\nid\n:\n \n'my-second-key'\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.",
            "title": "Checkout Pages"
        },
        {
            "location": "/reference/resources/checkout-pages/#checkout-pages-apicheckoutpages",
            "text": "Member of  RebillyAPI   Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. Each page is attached to a plan and website.",
            "title": "Checkout Pages api.checkoutPages"
        },
        {
            "location": "/reference/resources/checkout-pages/#getall",
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of checkout pages. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . checkoutPages . getAll ();  // alternatively you can speciy one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   '-createdTime' };   const   secondCollection   =   await   api . checkoutPages . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( checkoutPage   =>   console . log ( checkoutPage . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of checkout pages.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "getAll"
        },
        {
            "location": "/reference/resources/checkout-pages/#get",
            "text": "get ({ id }) ->  {Member}  Get a checkout page by its  id .  Example  const   checkoutPage   =   await   api . checkoutPages . get ({ id :   'foobar-001' });  console . log ( checkoutPage . fields . status );   Returns  A member exposing the checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "get"
        },
        {
            "location": "/reference/resources/checkout-pages/#create",
            "text": "create ({ id opt ,  data }) ->  {Member}  Create a checkout page for a specific plan and website. Optionally provide a specific  id  to use, or let Rebilly generate one.  The final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's   checkoutPageUri  and your checkout page's  uriPath .  Example:  https://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path   Warning  You must have at least one plan and one website (with a  checkoutPageUri  defined) before being able to create checkout pages.   Example  // first set the required properties for the new checkout page  const   data   =   { \n     uriPath :   'my-first-checkout' , \n     name :   'Main checkout page' , \n     planId :   'my-plan-id' , \n     websiteId :   'my-website-id'  };  // the ID is optional  const   firstKey   =   await   api . checkoutPages . create ({ data });  // or you can provide one  const   secondKey   =   await   api . checkoutPages . create ({ id :   'my-second-id' ,   data });   Returns  A member exposing the created checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "create"
        },
        {
            "location": "/reference/resources/checkout-pages/#update",
            "text": "update ({ id ,  data }) ->  {Member}  Update a checkout page using its  id .  Example  // define the values to update  const   data   =   { \n     name :   'Best checkout page'  };  const   checkoutPage   =   await   api . checkoutPages . update ({ id :   'my-second-id' ,   data });   Returns  A member exposing the updated checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "update"
        },
        {
            "location": "/reference/resources/checkout-pages/#delete",
            "text": "delete ({ id }) ->  {Member}  Delete a checkout page by using its  id .    Example  const   request   =   await   api . checkoutPages . delete ({ id :   'my-second-key' });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "delete"
        },
        {
            "location": "/reference/resources/contacts/",
            "text": "Contacts \napi\n.\ncontacts\n\u00b6\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nDefine contact information for your customers. Manage multiple addresses for the same customer.\n\n\ngetAll\n\u00b6\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of contacts. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ngetAll\n();\n\n\n\n// alternatively you can speciy one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n'-createdTime'\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncontact\n \n=>\n \nconsole\n.\nlog\n(\ncontact\n.\nfields\n.\nfirstName\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of contacts.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\u00b6\n\n\nget\n({\nid\n}) -> \n{Member}\n\n\nGet a contact by its \nid\n.\n\n\nExample\n\n\nconst\n \ncontact\n \n=\n \nawait\n \napi\n.\ncontacts\n.\nget\n({\nid\n:\n \n'foobar-001'\n});\n\n\nconsole\n.\nlog\n(\ncontact\n.\nfields\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the contact fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\u00b6\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of contacts in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can speciy one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n'-createdTime'\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\u00b6\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -> \n{Member}\n\n\nCreate a contact for a specific customer. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new contact\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nfirstName\n:\n \n'John'\n,\n\n    \nlastName\n:\n \n'Doe'\n,\n\n    \nemails\n:\n \n[{\n\n        \nlabel\n:\n \n'main'\n,\n\n        \nvalue\n:\n \n'john.doe+test@grr.la'\n,\n\n        \nprimary\n:\n \ntrue\n\n    \n}],\n\n    \ncustomerId\n:\n \n'foobar-0001'\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstContact\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondContact\n=\n \nawait\n \napi\n.\ncontacts\n.\ncreate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created contact fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\u00b6\n\n\nupdate\n({\nid\n, \ndata\n}) -> \n{Member}\n\n\nUpdate a contact using its \nid\n for a specific customer.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nfirstName\n:\n \n'Johnny'\n,\n\n    \nlastName\n:\n \n'Brown'\n,\n\n    \nemails\n:\n \n[{\n\n        \nlabel\n:\n \n'main'\n,\n\n        \nvalue\n:\n \n'johnny+test@grr.la'\n,\n\n        \nprimary\n:\n \nfalse\n\n    \n}],\n\n    \ncustomerId\n:\n \n'foobar-0001'\n\n\n};\n\n\n\nconst\n \ncontact\n \n=\n \nawait\n \napi\n.\ncontacts\n.\nupdate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated contact fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\u00b6\n\n\ndelete\n({\nid\n}) -> \n{Member}\n\n\nDelete a contact by using its \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ndelete\n({\nid\n:\n \n'my-second-key'\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.",
            "title": "Contacts"
        },
        {
            "location": "/reference/resources/contacts/#contacts-apicontacts",
            "text": "Member of  RebillyAPI   Define contact information for your customers. Manage multiple addresses for the same customer.",
            "title": "Contacts api.contacts"
        },
        {
            "location": "/reference/resources/contacts/#getall",
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of contacts. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . contacts . getAll ();  // alternatively you can speciy one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   '-createdTime' };   const   secondCollection   =   await   api . contacts . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( contact   =>   console . log ( contact . fields . firstName ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of contacts.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "getAll"
        },
        {
            "location": "/reference/resources/contacts/#get",
            "text": "get ({ id }) ->  {Member}  Get a contact by its  id .  Example  const   contact   =   await   api . contacts . get ({ id :   'foobar-001' });  console . log ( contact . fields . firstName );   Returns  A member exposing the contact fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "get"
        },
        {
            "location": "/reference/resources/contacts/#downloadcsv",
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of contacts in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . contacts . downloadCSV ();  // alternatively you can speciy one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   '-createdTime' };   const   secondFile   =   await   api . contacts . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "downloadCSV"
        },
        {
            "location": "/reference/resources/contacts/#create",
            "text": "create ({ id opt ,  data }) ->  {Member}  Create a contact for a specific customer. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new contact  const   data   =   { \n     firstName :   'John' , \n     lastName :   'Doe' , \n     emails :   [{ \n         label :   'main' , \n         value :   'john.doe+test@grr.la' , \n         primary :   true \n     }], \n     customerId :   'foobar-0001'  };  // the ID is optional  const   firstContact   =   await   api . contacts . create ({ data });  // or you can provide one  const   secondContact =   await   api . contacts . create ({ id :   'my-second-id' ,   data });   Returns  A member exposing the created contact fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "create"
        },
        {
            "location": "/reference/resources/contacts/#update",
            "text": "update ({ id ,  data }) ->  {Member}  Update a contact using its  id  for a specific customer.  Example  // define the values to update  const   data   =   { \n     firstName :   'Johnny' , \n     lastName :   'Brown' , \n     emails :   [{ \n         label :   'main' , \n         value :   'johnny+test@grr.la' , \n         primary :   false \n     }], \n     customerId :   'foobar-0001'  };  const   contact   =   await   api . contacts . update ({ id :   'my-second-id' ,   data });   Returns  A member exposing the updated contact fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "update"
        },
        {
            "location": "/reference/resources/contacts/#delete",
            "text": "delete ({ id }) ->  {Member}  Delete a contact by using its  id .    Example  const   request   =   await   api . contacts . delete ({ id :   'my-second-key' });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "delete"
        },
        {
            "location": "/reference/resources/coupons/",
            "text": "Coupons \napi\n.\ncoupons\n\u00b6\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.\n\n\ngetAll\n\u00b6\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of checkout pages. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ngetAll\n();\n\n\n\n// alternatively you can speciy one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n'-createdTime'\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncheckoutPage\n \n=>\n \nconsole\n.\nlog\n(\ncheckoutPage\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of checkout pages.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\u00b6\n\n\nget\n({\nid\n}) -> \n{Member}\n\n\nGet a checkout page by its \nid\n.\n\n\nExample\n\n\nconst\n \ncheckoutPage\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\nget\n({\nid\n:\n \n'foobar-001'\n});\n\n\nconsole\n.\nlog\n(\ncheckoutPage\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\u00b6\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -> \n{Member}\n\n\nCreate a checkout page for a specific plan and website. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nThe final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's  \ncheckoutPageUri\n and your checkout page's \nuriPath\n.\n\n\nExample: \n\nhttps://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path\n\n\n\n\n\nWarning\n\n\nYou must have at least one plan and one website (with a \ncheckoutPageUri\n defined) before being able to create checkout pages.\n\n\n\n\nExample\n\n\n// first set the required properties for the new checkout page\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nuriPath\n:\n \n'my-first-checkout'\n,\n\n    \nname\n:\n \n'Main checkout page'\n,\n\n    \nplanId\n:\n \n'my-plan-id'\n,\n\n    \nwebsiteId\n:\n \n'my-website-id'\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ncreate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\u00b6\n\n\nupdate\n({\nid\n, \ndata\n}) -> \n{Member}\n\n\nUpdate a checkout page using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \n'Best checkout page'\n\n\n};\n\n\n\nconst\n \ncheckoutPage\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\nupdate\n({\nid\n:\n \n'my-second-id'\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\u00b6\n\n\ndelete\n({\nid\n}) -> \n{Member}\n\n\nDelete a checkout page by using its \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ndelete\n({\nid\n:\n \n'my-second-key'\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.",
            "title": "Coupons"
        },
        {
            "location": "/reference/resources/coupons/#coupons-apicoupons",
            "text": "Member of  RebillyAPI   Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.",
            "title": "Coupons api.coupons"
        },
        {
            "location": "/reference/resources/coupons/#getall",
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of checkout pages. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . checkoutPages . getAll ();  // alternatively you can speciy one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   '-createdTime' };   const   secondCollection   =   await   api . checkoutPages . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( checkoutPage   =>   console . log ( checkoutPage . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of checkout pages.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "getAll"
        },
        {
            "location": "/reference/resources/coupons/#get",
            "text": "get ({ id }) ->  {Member}  Get a checkout page by its  id .  Example  const   checkoutPage   =   await   api . checkoutPages . get ({ id :   'foobar-001' });  console . log ( checkoutPage . fields . status );   Returns  A member exposing the checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "get"
        },
        {
            "location": "/reference/resources/coupons/#create",
            "text": "create ({ id opt ,  data }) ->  {Member}  Create a checkout page for a specific plan and website. Optionally provide a specific  id  to use, or let Rebilly generate one.  The final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's   checkoutPageUri  and your checkout page's  uriPath .  Example:  https://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path   Warning  You must have at least one plan and one website (with a  checkoutPageUri  defined) before being able to create checkout pages.   Example  // first set the required properties for the new checkout page  const   data   =   { \n     uriPath :   'my-first-checkout' , \n     name :   'Main checkout page' , \n     planId :   'my-plan-id' , \n     websiteId :   'my-website-id'  };  // the ID is optional  const   firstKey   =   await   api . checkoutPages . create ({ data });  // or you can provide one  const   secondKey   =   await   api . checkoutPages . create ({ id :   'my-second-id' ,   data });   Returns  A member exposing the created checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "create"
        },
        {
            "location": "/reference/resources/coupons/#update",
            "text": "update ({ id ,  data }) ->  {Member}  Update a checkout page using its  id .  Example  // define the values to update  const   data   =   { \n     name :   'Best checkout page'  };  const   checkoutPage   =   await   api . checkoutPages . update ({ id :   'my-second-id' ,   data });   Returns  A member exposing the updated checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "update"
        },
        {
            "location": "/reference/resources/coupons/#delete",
            "text": "delete ({ id }) ->  {Member}  Delete a checkout page by using its  id .    Example  const   request   =   await   api . checkoutPages . delete ({ id :   'my-second-key' });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.",
            "title": "delete"
        },
        {
            "location": "/reference/resources/experimental/accounts/",
            "text": "Accounts\n\u00b6",
            "title": "Accounts"
        },
        {
            "location": "/reference/resources/experimental/accounts/#accounts",
            "text": "",
            "title": "Accounts"
        },
        {
            "location": "/reference/types/member/",
            "text": "Member\n\u00b6",
            "title": "Member"
        },
        {
            "location": "/reference/types/member/#member",
            "text": "",
            "title": "Member"
        },
        {
            "location": "/reference/types/collection/",
            "text": "Collection\n\u00b6",
            "title": "Collection"
        },
        {
            "location": "/reference/types/collection/#collection",
            "text": "",
            "title": "Collection"
        },
        {
            "location": "/reference/types/file/",
            "text": "File\n\u00b6",
            "title": "File"
        },
        {
            "location": "/reference/types/file/#file",
            "text": "",
            "title": "File"
        },
        {
            "location": "/guides/criteria/",
            "text": "Criteria\n\u00b6\n\n\nN/A",
            "title": "Criteria"
        },
        {
            "location": "/guides/criteria/#criteria",
            "text": "N/A",
            "title": "Criteria"
        },
        {
            "location": "/guides/filters/",
            "text": "Filters\n\u00b6\n\n\nN/A",
            "title": "Filters"
        },
        {
            "location": "/guides/filters/#filters",
            "text": "N/A",
            "title": "Filters"
        },
        {
            "location": "/license/",
            "text": "License\n\u00b6\n\n\nMIT License\n\n\nCopyright (c) 2017, Rebilly, Inc.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "MIT License  Copyright (c) 2017, Rebilly, Inc.  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "License"
        }
    ]
}