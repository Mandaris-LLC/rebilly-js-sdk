{
    "docs": [
        {
            "location": "/", 
            "text": "Rebilly JS SDK Library\n\n\nThe Rebilly JS SDK library allows you to consume the Rebilly API using either Node or the browser.\n\n\n\n\n\n\n\n\n\n\n\n\nPCI Compliance Note\n\n\nIf you need to handle raw payment card data, you should use the \nRebilly Token library\n to generate tokens for your server-side logic.\n\n\nRebilly API Spec\n\n\nThe library is a semantic representation of the \nRebilly API spec\n. A secondary \nexperimental API spec for reports\n is also available.\n\n\nQuick Start\n\n\nInstall the latest version of the SDK with \nYarn\n:\n\nyarn add rebilly-js-sdk\n\n\n\nOr using NPM:\n\nnpm install rebilly-js-sdk --save\n\n\n\nThen import the library into your project:\n\nimport\n \nRebillyAPI\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n\nSemver\n\n\nThe JS SDK is released following \nSemver 2.0.0\n guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#rebilly-js-sdk-library", 
            "text": "The Rebilly JS SDK library allows you to consume the Rebilly API using either Node or the browser.", 
            "title": "Rebilly JS SDK Library"
        }, 
        {
            "location": "/#pci-compliance-note", 
            "text": "If you need to handle raw payment card data, you should use the  Rebilly Token library  to generate tokens for your server-side logic.", 
            "title": "PCI Compliance Note"
        }, 
        {
            "location": "/#rebilly-api-spec", 
            "text": "The library is a semantic representation of the  Rebilly API spec . A secondary  experimental API spec for reports  is also available.", 
            "title": "Rebilly API Spec"
        }, 
        {
            "location": "/#quick-start", 
            "text": "Install the latest version of the SDK with  Yarn : yarn add rebilly-js-sdk  Or using NPM: npm install rebilly-js-sdk --save  Then import the library into your project: import   RebillyAPI   from   rebilly-js-sdk ;", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#semver", 
            "text": "The JS SDK is released following  Semver 2.0.0  guidelines. Each minor and patch version will be backward-compatible and incompatible changes will be introduced using major releases only.", 
            "title": "Semver"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nThe library runs in Node or browsers without any configuration requirements.\n\n\nInstallation\n\n\nUsing Yarn\n\n\nWe recommend \nYarn\n for package management.\n\nyarn add rebilly-js-sdk\n\n\n\nUsing NPM\n\n\nnpm install rebilly-js-sdk --save\n\n\n\n\nUsage\n\n\nImporting from the package\n\n\nTwo different API clients are exposed within the library, the standard client (\nRebillyAPI\n), and the experimental client (\nRebillyExperimentalAPI\n). The default package export is \nRebillyAPI\n.\n\n\nES6 or newer\n\n\nimport\n \nRebillyAPI\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n\nES5\n\n\nThe main API client is exposed as \ndefault\n in CommonJS.\n\nvar\n \nRebillyAPI\n \n=\n \nrequire\n(\nrebilly-js-sdk\n).\ndefault\n;\n\n\n\n\nOther Modules\n\n\nThe library exposes two additional modules: the experimental API client and the error types returned by both clients.\n\nimport\n \n{\nRebillyExperimentalAPI\n,\n \nRebillyErrors\n}\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n\n\n\n\n\n\n\nModule\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRebillyExperimentalAPI\n\n\nSecondary API client. Reserved for experimental endpoints like reports and statistics. This client can break backward-compatibility. Based on the \nExperimental Reports API spec.\n\n\n\n\n\n\nRebillyErrors\n\n\nExposes the different errors returned by both API clients.\n\n\n\n\n\n\n\n\nCreating an instance\n\n\nThe API clients need either a private API key for backend use, or to be provided with a JWT session token when used in a browser.\n\n\nNode\n\n\nUse a secret API key found in Rebilly under \nDeveloper \n API Keys\n.\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \nsecret-api-key\n});\n\n\n\n\n\n\nNode Environment Variables\n\n\nFor added security your secret API key should be kept as a \nNode environment variable\n.\n\n\n\n\nBrowsers\n\n\nYou should never use a secret API key in the browser because it will be exposed by each API call in plain text. Instead a JWT session token can be provided to the API instance.\n\nconst\n \napi\n \n=\n \nRebillyAPI\n();\n\n\n\n//fetch a JWT session token via a user login using the API\n\n\n//then set it as the session token for the current instance\n\n\napi\n.\nsetSessionToken\n(\ntoken\n);\n\n\n\n\n\n\nSee \napi.setSessionToken\n\n\n\n\nConfiguration\n\n\nAll client API configuration parameters are optional. However a secret API key can only be provided at instantiation.\n\n\n\n\nAPI Environments\n\n\nBy default an instance is always generated in the \nLive\n environment. The \nSandbox\n mode is only recommended while developing your integration. \n\n\n\n\nParameters\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \nsecret-api-key\n,\n \nsandbox\n:\n \ntrue\n,\n \ntimeout\n:\n \n10000\n});\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiKey\n\n\nstring\n\n\nnull\n\n\nYour secret API key. To be used only for Node integration. See \nDeveloper \n API Keys\n.\n\n\n\n\n\n\nsandbox\n\n\nboolean\n\n\nfalse\n\n\nFlag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n6000\n\n\nDefine the timeout in milliseconds for API requests.\n\n\n\n\n\n\nversion\n\n\nstring\n\n\nv2.1\n\n\nDefine the version of the API to use. Defaults to v2.1.\nThis configuration option does not apply to RebillyExperimentalAPI.\n\n\n\n\n\n\n\n\nFull Example\n\n\nThe following code will demonstrate how to retrieve the list of the newest customers in your account in Node.\n\n\n\n\nPromises\n\n\nEvery resource method in both the standard and experimental API clients returns a Promise.\n\n\n\n\nNode ES7\n\n\nThe newest specification of ECMAScript allows us to drop callbacks for the Promises.\n\nimport\n \nRebillyAPI\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n//using an environment variable to store the secret API key\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \nprocess\n.\nenv\n.\nREBILLY_KEY\n});\n\n\n\ntry\n \n{\n\n    \n//requesting the list of customers \n\n    \n// with the default limit, offset and pagination\n\n    \nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n    \nconsole\n.\nlog\n(\n`There are \n${\ncustomers\n.\ntotal\n}\n customers`\n);\n\n\n}\n \ncatch\n(\nerror\n)\n \n{\n\n    \nconsole\n.\nlog\n(\nerror\n.\nmessage\n);\n\n\n}\n\n\n\n\nNode ES5\n\n\nIn ES5 the \ntry/catch\n structure is replaced by standard Promise \nthen/catch\n chains.\n\nvar\n \nRebillyAPI\n \n=\n \nrequire\n(\nrebilly-js-sdk\n).\ndefault\n;\n\n\n\n//using an environment variable to store the secret API key\n\n\nvar\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \nprocess\n.\nenv\n.\nREBILLY_KEY\n});\n\n\n\n//requesting the list of customers \n\n\n// with the default limit, offset and pagination\n\n\napi\n.\ncustomers\n.\ngetAll\n()\n\n    \n.\nthen\n(\nfunction\n(\ncustomers\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n`There are \n${\ncustomers\n.\ntotal\n}\n customers`\n);\n\n    \n})\n\n    \n.\ncatch\n(\nfunction\n(\nerror\n)\n \n{\n\n        \nconsole\n.\nerror\n(\nerr\n.\nmessage\n);\n\n    \n});", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "The library runs in Node or browsers without any configuration requirements.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/#using-yarn", 
            "text": "We recommend  Yarn  for package management. yarn add rebilly-js-sdk", 
            "title": "Using Yarn"
        }, 
        {
            "location": "/getting-started/#using-npm", 
            "text": "npm install rebilly-js-sdk --save", 
            "title": "Using NPM"
        }, 
        {
            "location": "/getting-started/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/getting-started/#importing-from-the-package", 
            "text": "Two different API clients are exposed within the library, the standard client ( RebillyAPI ), and the experimental client ( RebillyExperimentalAPI ). The default package export is  RebillyAPI .  ES6 or newer  import   RebillyAPI   from   rebilly-js-sdk ;   ES5  The main API client is exposed as  default  in CommonJS. var   RebillyAPI   =   require ( rebilly-js-sdk ). default ;", 
            "title": "Importing from the package"
        }, 
        {
            "location": "/getting-started/#other-modules", 
            "text": "The library exposes two additional modules: the experimental API client and the error types returned by both clients. import   { RebillyExperimentalAPI ,   RebillyErrors }   from   rebilly-js-sdk ;      Module  Description      RebillyExperimentalAPI  Secondary API client. Reserved for experimental endpoints like reports and statistics. This client can break backward-compatibility. Based on the  Experimental Reports API spec.    RebillyErrors  Exposes the different errors returned by both API clients.", 
            "title": "Other Modules"
        }, 
        {
            "location": "/getting-started/#creating-an-instance", 
            "text": "The API clients need either a private API key for backend use, or to be provided with a JWT session token when used in a browser.", 
            "title": "Creating an instance"
        }, 
        {
            "location": "/getting-started/#node", 
            "text": "Use a secret API key found in Rebilly under  Developer   API Keys . const   api   =   RebillyAPI ({ apiKey :   secret-api-key });    Node Environment Variables  For added security your secret API key should be kept as a  Node environment variable .", 
            "title": "Node"
        }, 
        {
            "location": "/getting-started/#browsers", 
            "text": "You should never use a secret API key in the browser because it will be exposed by each API call in plain text. Instead a JWT session token can be provided to the API instance. const   api   =   RebillyAPI ();  //fetch a JWT session token via a user login using the API  //then set it as the session token for the current instance  api . setSessionToken ( token );    See  api.setSessionToken", 
            "title": "Browsers"
        }, 
        {
            "location": "/getting-started/#configuration", 
            "text": "All client API configuration parameters are optional. However a secret API key can only be provided at instantiation.   API Environments  By default an instance is always generated in the  Live  environment. The  Sandbox  mode is only recommended while developing your integration.", 
            "title": "Configuration"
        }, 
        {
            "location": "/getting-started/#parameters", 
            "text": "const   api   =   RebillyAPI ({ apiKey :   secret-api-key ,   sandbox :   true ,   timeout :   10000 });      Option  Type  Default  Description      apiKey  string  null  Your secret API key. To be used only for Node integration. See  Developer   API Keys .    sandbox  boolean  false  Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.    timeout  number  6000  Define the timeout in milliseconds for API requests.    version  string  v2.1  Define the version of the API to use. Defaults to v2.1. This configuration option does not apply to RebillyExperimentalAPI.", 
            "title": "Parameters"
        }, 
        {
            "location": "/getting-started/#full-example", 
            "text": "The following code will demonstrate how to retrieve the list of the newest customers in your account in Node.   Promises  Every resource method in both the standard and experimental API clients returns a Promise.", 
            "title": "Full Example"
        }, 
        {
            "location": "/getting-started/#node-es7", 
            "text": "The newest specification of ECMAScript allows us to drop callbacks for the Promises. import   RebillyAPI   from   rebilly-js-sdk ;  //using an environment variable to store the secret API key  const   api   =   RebillyAPI ({ apiKey :   process . env . REBILLY_KEY });  try   { \n     //requesting the list of customers  \n     // with the default limit, offset and pagination \n     const   customers   =   await   api . customers . getAll (); \n     console . log ( `There are  ${ customers . total }  customers` );  }   catch ( error )   { \n     console . log ( error . message );  }", 
            "title": "Node ES7"
        }, 
        {
            "location": "/getting-started/#node-es5", 
            "text": "In ES5 the  try/catch  structure is replaced by standard Promise  then/catch  chains. var   RebillyAPI   =   require ( rebilly-js-sdk ). default ;  //using an environment variable to store the secret API key  var   api   =   RebillyAPI ({ apiKey :   process . env . REBILLY_KEY });  //requesting the list of customers   // with the default limit, offset and pagination  api . customers . getAll () \n     . then ( function ( customers )   { \n         console . log ( `There are  ${ customers . total }  customers` ); \n     }) \n     . catch ( function ( error )   { \n         console . error ( err . message ); \n     });", 
            "title": "Node ES5"
        }, 
        {
            "location": "/reference/rebilly-api/", 
            "text": "RebillyAPI\n\n\nStandard Rebilly API client that will be backward-compatible within each major release of the library.\n\n\nAPI Spec\n\n\nSee the \nRebilly API spec\n for full details on the different API calls exposed within this client.\n\n\nImporting\n\n\nThe \nRebillyAPI\n factory is the default export of the \nrebilly-js-sdk\n package.\n\n\nimport\n \nRebillyAPI\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n\n\nConfiguration\n\n\nAll client API configuration parameters are optional. However a secret API key can only be provided at instantiation.\n\n\n\n\nAPI Environments\n\n\nBy default an instance is always generated in the \nLive\n environment. The \nSandbox\n mode is only recommended while developing your integration. \n\n\n\n\nParameters\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\n \nsecret-api-key\n,\n \nsandbox\n:\n \ntrue\n,\n \ntimeout\n:\n \n10000\n});\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiKey\n\n\nstring\n\n\nnull\n\n\nYour secret API key. To be used only for Node integrations. See \nDeveloper \n API Keys\n.\n\n\n\n\n\n\nsandbox\n\n\nboolean\n\n\nfalse\n\n\nFlag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n6000\n\n\nDefine the timeout in milliseconds for API requests.\n\n\n\n\n\n\nversion\n\n\nstring\n\n\nv2.1\n\n\nDefine the version of the API to use. Defaults to v2.1.\n\n\n\n\n\n\n\n\nPublic Methods\n\n\nThe API client exposes different configuration and utility methods you can use to customize your instance.\n\n\naddRequestInterceptor\n\n\naddRequestInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.\n\n\nExample\n\n\napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=\n \n{\n\n    \nconfig\n.\nparams\n[\nextra-query-param\n]\n \n=\n \nfoobar\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. \n \nthenDelegate\n(\nconfig\n)\n \n=\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nconfig\nObject\nThe request configuration. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the request is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveRequestInterceptor\n\n\nremoveRequestInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific request interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=\n \n{\n\n    \nconfig\n.\nparams\n[\nextra-query-param\n]\n \n=\n \nfoobar\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveRequestInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added request interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\naddResponseInterceptor\n\n\naddResponseInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.\n\n\nExample\n\n\napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=\n \n{\n\n    \n// modify reponse data before having it processed by the API client\n\n    \nresponse\n.\ndata\n.\nshift\n();\n \n//removed first element\n\n    \nreturn\n \nresponse\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. \n \nthenDelegate\n(\nresponse\n)\n \n=\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nresponse\nObject\nThe API response. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the response is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveResponseInterceptor\n\n\nremoveResponseInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific response interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=\n \n{\n\n    \nresponse\n.\ndata\n.\nshift\n();\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveResponseInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added response interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\ngetCancellationToken\n\n\ngetCancellationToken\n() -\n \n{CancelToken}\n\n\nReturns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.\n\n\nSince 0.12.0\n\n\n\n\nSee \nRebillyErrors\n\n\n\n\nExample\n\n\n// once created the token will be used for each subsequent API request\n\n\nconst\n \ntoken\n \n=\n \napi\n.\ngetCancellationToken\n();\n\n\n// when cancelling the request, a message can be provided\n\n\ntoken\n.\ncancel\n(\nCancelled request manually\n);\n\n\n\n// any ongoing request will be canceled by the same token\n\n\ntry\n \n{\n\n    \n// trigger a request\n\n    \nawait\n \napi\n.\ncustomers\n.\nget\n({\nid\n:\n \ncancellable-customer-id\n});\n\n\n}\n \ncatch\n(\nerror\n)\n \n{\n\n    \n// you can detect if a request was canceled by checking \n\n    \n// the error.name\n\n    \nif\n \n(\nerror\n.\nname\n \n===\n \nRebillyCanceledError\n)\n \n{\n\n        \n// the message provided to \ntoken.cancel\n will be reflected here\n\n        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n \n// returns \nCancelled request manually\n     \n\n    \n}\n \nelse\n \n{\n\n       \n// normal error handling \n\n    \n}\n\n\n}\n\n\n\n\n\nReturns\n\n\nThe global cancellation token. An instance of \naxios.CancelToken\n. Exposes method \ncancel(message)\n.\n\n\nType \nCancelToken\n\n\ngenerateSignature\n\n\ngenerateSignature\n({\napiUser\n, \napiKey\n}) -\n \n{string}\n\n\nGenerates a signature used to authenticate payment token creation requests. This should be used in conjunction with the \nRebilly JS Token library\n, which powers your checkout form and removes the need to send sensitive customer information directly to your servers.\n\n\n\n\nServer-side Only\n\n\nYou should use the signature generation method only on the server-side as it will otherwise expose your secret \napiKey\n to the browser.\n\n\n\n\nSince 1.1.0\n\n\n\n\nSee \nRebilly JS Token Library\n\n\n\n\nExample\n\n\nconst\n \ncredentials\n \n=\n \n{\napiUser\n:\nfoobar\n,\n \napiKey\n:\n \n01234567890\n};\n\n\nconst\n \nsignature\n \n=\n \napi\n.\ngenerateSignature\n(\ncredentials\n);\n\n\n\n// in your checkout page authenticate your requests\n\n\n// using the Rebilly.js token library\n\n\nRebilly\n.\nsetAuth\n(\n`the signature\ns content`\n);\n\n\n\n\n\nReturns\n\n\nA signature that can be used to authenticate \nRebilly JS token\n creation for use in a checkout page.\n\n\nType \nstring\n\n\nsetTimeout\n\n\nsetTimeout\n(\ntimeout\n)\n\n\nDefine the default timeout delay in milliseconds for the current API instance.\n\n\nExample\n\n\napi\n.\nsetTimeout\n(\n10000\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n-\n\n\nTimeout delay in milliseconds.\n\n\n\n\n\n\n\n\nsetSessionToken\n\n\nsetSessionToken\n(\ntoken\n)\n\n\nUse a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the \nprivate API key\n when the client is used in a browser.\n\n\nTo retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.\n\n\n\n\nSee \napi.account.signIn\n\n\n\n\nExample\n\n\n// instantiate an unauthorized API client\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n();\n\n\n\n// build the sign in payload\n\n\nconst\n \npayload\n \n=\n \n{\ndata\n:\n \n{\nemail\n,\n \npassword\n,\n \nexpiredTime\n}};\n\n\n\n// the \nsignIn\n method does not require API authorization to complete\n\n\nconst\n \nresponse\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignIn\n(\npayload\n);\n\n\n\n// set the session token for future API requests that require\n\n\n// an authorization using the response fields\n\n\napi\n.\nsetSessionToken\n(\nresponse\n.\nfields\n.\ntoken\n);\n\n\n\n// this request will be authorized using the token\n\n\nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n\n\n\nsetEndpoints\n\n\nsetEndpoints\n({\nlive\nopt\n, \nsandbox\nopt\n})\n\n\nUpdate the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.\n\n\n\n\nSecuring Communications\n\n\nWhen modifying the API endpoints always use \nHTTPS\n for a production environment. \n\n\n\n\nExample\n\n\napi\n.\nsetEndpoints\n({\nlive\n:\n \nhttps://api.rebilly.com/experimental/version/url\n});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlive\n\n\nstring\n\n\noptional\n\n\nURL for the live API mode.\n\n\n\n\n\n\nsandbox\n\n\nstring\n\n\noptional\n\n\nURL for the sandbox API mode.\n\n\n\n\n\n\n\n\nsetProxyAgent\n\n\nsetProxyAgent\n({\nhost\n, \nport\n, \nauth\n})\n\n\nDefine a proxy for the current API instance. Authorized using \nHTTP Basic\n credentials. \n\n\nExample\n\n\nconst\n \nconfig\n \n=\n \n{\n\n    \nhost\n:\n \n127.0.0.1\n,\n\n    \nport\n:\n \n9000\n,\n\n    \nauth\n:\n \n{\n\n        \n//HTTP Basic\n\n        \nusername\n:\n \nfoobar\n,\n\n        \npassword\n:\n \nfuubar\n\n    \n}\n\n\n};\n\n\n//all subsequent API requests will pass through the proxy\n\n\napi\n.\nsetProxyAgent\n(\nconfig\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nstring\n\n\n-\n\n\nHostname of the proxy server.\n\n\n\n\n\n\nport\n\n\nnumber\n\n\n-\n\n\nPort of the proxy server.\n\n\n\n\n\n\nauth\n\n\nObject\n\n\n-\n\n\nBasic credentials to connect to the proxy server. \n \nProperties\nName\nType\nDescription\nusername\nstring\nThe username required for basic authentication.\npassword\nstring\nThe password required for basic authentication.\n\n\n\n\n\n\n\n\nResources\n\n\nResources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys.\n\n\n\n\nPromises\n\n\nAll resource methods return chainable Promises.\n\n\n\n\nExample\n\n\n//get the latest 100 customers starting from the 100th one\n\n\napi\n.\ncustomers\n.\ngetAll\n({\noffset\n:\n \n100\n});\n\n\n\n\nAccount\n\n\napi\n.\naccount\n\n\nAllows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset. \n\n\n\n\nSee the \nAccount resource\n for detailed method information.\n\n\n\n\nAPI Keys\n\n\napi\n.\napiKeys\n\n\nAllows you to manage your API keys. Create or modify existing ones with different \ndatetime\n settings. API keys are private and should only be used for server-side operations. \n\n\n\n\nNote\n\n\nFor client-side requests using the JS SDK, you must use the session token returned by \napi\n.\naccount\n.\nsignIn\n()\n. See the \nAccounts resource\n for more details.\n\n\n\n\n\n\nSee the \nAPI Keys resource\n for detailed method information.\n\n\n\n\nBank Accounts\n\n\napi\n.\nbankAccounts\n\n\nUsed to create new bank accounts and attach them to an existing customer. Can also deactivate bank accounts. \n\n\nBank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.\n\n\nSee Payment Instruments. \n\n\n\n\nSee the \nBank Accounts resource\n for detailed method information.\n\n\n\n\nBlacklists\n\n\napi\n.\nblacklists\n\n\nManage blacklist items by creating new entries or deleting existing items. Blacklists are used to manage risk and fraud by aborting an operation.  \n\n\nRebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.\n\n\n\n\nSee the \nBlacklists resource\n for detailed method information.\n\n\n\n\nCheckout Pages\n\n\napi\n.\ncheckoutPages\n\n\nCreate and manage checkout pages. Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements.\n\n\n\n\nSee the \nCheckout Pages resource\n for detailed method information.\n\n\n\n\nContacts\n\n\napi\n.\ncontacts\n\n\nDefine contact information for your customers. Manage multiple addresses for the same customer.\n\n\n\n\nSee the \nContacts resource\n for detailed method information.\n\n\n\n\nCoupons\n\n\napi\n.\ncoupons\n\n\nCreate permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.\n\n\n\n\nSee the \nCoupons resource\n for detailed method information.\n\n\n\n\nCredential Hashes\n\n\napi\n.\ncredentialHashes\n\n\nGenerate credential hashes to authorize your webhooks or emails in various parts of Rebilly. \n\n\n\n\nSee the \nCredential Hashes resource\n for detailed method information.\n\n\n\n\nCustom Events\n\n\napi\n.\ncustomEvents\n\n\nCreate custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. \n\n\nFor example, a custom event could be used to send you an email before a customer's subscription is about to expire.\n\n\nSee Rules Engine.  \n\n\n\n\nSee the \nCustom Events resource\n for detailed method information.\n\n\n\n\nCustom Fields\n\n\napi\n.\ncustomFields\n\n\nCreate and manage custom fields to be added to other Resources. A variety of fields are supported from datetime to booleans.\n\n\n\n\nSee the \nCustom Fields resource\n for detailed method information.\n\n\n\n\nCustomers\n\n\napi\n.\ncustomers\n\n\nCreate and manage your customers and their lead sources. Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models.\n\n\n\n\nSee the \nCustomers resource\n for detailed method information.\n\n\n\n\nCustomer Authentication\n\n\napi\n.\ncustomerAuthentication\n\n\nCreate and manage login credentials for your customers. This feature can be used to integrate Rebilly directly into your own website and display your customers their subscription or product information. \n\n\n\n\nSee the \nCustomer Authentication resource\n for detailed method information.\n\n\n\n\nDisputes\n\n\napi\n.\ndisputes\n\n\nManage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly.\n\n\n\n\nSee the \nDisputes resource\n for detailed method information.\n\n\n\n\nEvents\n\n\napi\n.\nevents\n\n\nCreate and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed.\n\n\nThe actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation.\n\n\nSee Rules Engine.  \n\n\n\n\nSee the \nEvents resource\n for detailed method information.\n\n\n\n\nFiles\n\n\napi\n.\nfiles\n\n\nUpload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business.  \n\n\n\n\nSee the \nFiles resource\n for detailed method information.\n\n\n\n\nGateway Accounts\n\n\napi\n.\ngatewayAccounts\n\n\nCreate and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use. \n\n\nA payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets.\n\n\nSee Supported Gateway Accounts.\n\n\n\n\nSee the \nGateway Accounts resource\n for detailed method information.\n\n\n\n\nInvoices\n\n\napi\n.\ninvoices\n\n\nAn invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer.  Payment terms are usually stated on the invoice.\n\n\nSee also:\n\n\n\n\nProducts \n\n\nTaxes\n\n\nShipping\n\n\nIssuing an Invoice\n\n\n\n\n\n\nSee the \nInvoices resource\n for detailed method information.\n\n\n\n\nLayouts\n\n\napi\n.\nlayouts\n\n\nCreate and manage your plan layouts. Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a \npricing\n or \nplans\n page integrated into your website.  \n\n\n\n\nSee the \nLayouts resource\n for detailed method information.\n\n\n\n\nLists (Rules Engine)\n\n\napi\n.\nlists\n\n\nCreate and manage your lists. A list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself.  \n\n\n\n\nSee the \nLists resource\n for detailed method information.\n\n\n\n\nNotes\n\n\napi\n.\nnotes\n\n\nLeave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service.    \n\n\n\n\nSee the \nNotes resource\n for detailed method information.\n\n\n\n\nOrganizations\n\n\napi\n.\norganizations\n\n\nOrganizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations.\n\n\n\n\nShared Modes\n\n\nOrganizations are shared between the \nLive\n and \nSandbox\n modes.    \n\n\n\n\n\n\nSee the \nOrganizations resource\n for detailed method information.\n\n\n\n\nPayment Cards\n\n\napi\n.\npaymentCards\n\n\nA form of payment instrument, payment cards enable customers to do transactions when buying your products. \n\n\nSee Payment Instruments. \n\n\n\n\nSee the \nPayment Cards resource\n for detailed method information.\n\n\n\n\nPayment Tokens\n\n\napi\n.\npaymentTokens\n\n\nTokens are an encrypted string representing a payment instrument. A token expires within 24 hours.\n\n\nPayment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens.\n\n\nSee \nRebilly.js\n library    \n\n\n\n\nSee the \nPayment Tokens resource\n for detailed method information.\n\n\n\n\nPaypal Accounts\n\n\napi\n.\npaypalAccounts\n\n\nA form of payment instrument, paypal accounts enable customers to do transactions when buying your products. \n\n\nSee Payment Instruments. \n\n\n\n\nSee the \nPaypal Accounts resource\n for detailed method information.\n\n\n\n\nPlans\n\n\napi\n.\nplans\n\n\nCreate and manage plans. Plans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences. \n\n\n\n\nSee the \nPlans resource\n for detailed method information.\n\n\n\n\nPreviews\n\n\napi\n.\npreviews\n\n\nPreview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine. \n\n\n\n\nSee the \nPreviews resource\n for detailed method information.\n\n\n\n\nProducts\n\n\napi\n.\nproducts\n\n\nCreate and manage products. You may attach them to plans. Products can have a tax category, accounting code and may require shipping.\n\n\n\n\nSee the \nProducts resource\n for detailed method information.\n\n\n\n\nProfile\n\n\napi\n.\nprofile\n\n\nManage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in.\n\n\nThe profile includes information about the currently authenticated user like his name, email and preferences.\n\n\n\n\nSee the \nProfile resource\n for detailed method information.\n\n\n\n\nSessions\n\n\napi\n.\nsessions\n\n\nCreate and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys.\n\n\nThis token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API.\n\n\n\n\nSee the \nSessions resource\n for detailed method information.\n\n\n\n\nShipping Zones\n\n\napi\n.\nshippingZones\n\n\nCreate and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates.\n\n\n\n\nSee the \nShipping Zones resource\n for detailed method information.\n\n\n\n\nStatus (API)\n\n\napi\n.\nstatus\n\n\nGet the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not.\n\n\n\n\nTip\n\n\nYou can poll this endpoint on interval to check the status of the API.\n\n\n\n\n\n\nSee the \nStatus resource\n for detailed method information.\n\n\n\n\nSubscriptions\n\n\napi\n.\nsubscriptions\n\n\nCreate and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination.\n\n\n\n\nSee the \nSubscriptions resource\n for detailed method information.\n\n\n\n\nThree D Secure (3DS)\n\n\napi\n.\nthreeDSecure\n\n\nCreate and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure.\n\n\nThe merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases.  3D Secure requires cardholder interaction to be completed.\n\n\n\n\nSee the \nThree D Secure resource\n for detailed method information.\n\n\n\n\nTracking\n\n\napi\n.\ntracking\n\n\nInspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing.\n\n\n\n\nSee the \nTracking resource\n for detailed method information.\n\n\n\n\nTransactions\n\n\napi\n.\ntransactions\n\n\nCreate and manage transactions. A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future.\n\n\n\n\nSee the \nTransactions resource\n for detailed method information.\n\n\n\n\nUsers\n\n\napi\n.\nusers\n\n\nCreate and manage users. A \nuser\n represents a person who can login to Rebilly, and take actions subject to their granted permissions.\n\n\n\n\nSee the \nUsers resource\n for detailed method information.\n\n\n\n\nWebhooks\n\n\napi\n.\nwebhooks\n\n\nCreate and manage webhooks. Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice. \n\n\nThey allow you to collect information about those events. Rebilly can send this information to an URL of your choice.\n\n\n\n\nSee the \nWebhooks resource\n for detailed method information.\n\n\n\n\nWebsites\n\n\napi\n.\nwebsites\n\n\nCreate and manage websites. The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business.\n\n\n\n\nSee the \nWebsites resource\n for detailed method information.", 
            "title": "RebillyAPI"
        }, 
        {
            "location": "/reference/rebilly-api/#rebillyapi", 
            "text": "Standard Rebilly API client that will be backward-compatible within each major release of the library.  API Spec  See the  Rebilly API spec  for full details on the different API calls exposed within this client.", 
            "title": "RebillyAPI"
        }, 
        {
            "location": "/reference/rebilly-api/#importing", 
            "text": "The  RebillyAPI  factory is the default export of the  rebilly-js-sdk  package.  import   RebillyAPI   from   rebilly-js-sdk ;", 
            "title": "Importing"
        }, 
        {
            "location": "/reference/rebilly-api/#configuration", 
            "text": "All client API configuration parameters are optional. However a secret API key can only be provided at instantiation.   API Environments  By default an instance is always generated in the  Live  environment. The  Sandbox  mode is only recommended while developing your integration.", 
            "title": "Configuration"
        }, 
        {
            "location": "/reference/rebilly-api/#parameters", 
            "text": "const   api   =   RebillyAPI ({ apiKey :   secret-api-key ,   sandbox :   true ,   timeout :   10000 });      Option  Type  Default  Description      apiKey  string  null  Your secret API key. To be used only for Node integrations. See  Developer   API Keys .    sandbox  boolean  false  Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.    timeout  number  6000  Define the timeout in milliseconds for API requests.    version  string  v2.1  Define the version of the API to use. Defaults to v2.1.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/rebilly-api/#public-methods", 
            "text": "The API client exposes different configuration and utility methods you can use to customize your instance.", 
            "title": "Public Methods"
        }, 
        {
            "location": "/reference/rebilly-api/#addrequestinterceptor", 
            "text": "addRequestInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.  Example  api . addRequestInterceptor ({ thenDelegate :   ( config )   =   { \n     config . params [ extra-query-param ]   =   foobar ; \n     return   config ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue.    thenDelegate ( config )   =   { Object }   Parameters   Name Type Description config Object The request configuration. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the request is executed for this interceptor.    catchDelegate ( error )   =   Promise   Parameters   Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.", 
            "title": "addRequestInterceptor"
        }, 
        {
            "location": "/reference/rebilly-api/#removerequestinterceptor", 
            "text": "removeRequestInterceptor ( interceptor )  Removes a specific request interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addRequestInterceptor ({ thenDelegate :   ( config )   =   { \n     config . params [ extra-query-param ]   =   foobar ; \n     return   config ;  }});  // remove via reference  api . removeRequestInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added request interceptor that should be removed from the current instance.", 
            "title": "removeRequestInterceptor"
        }, 
        {
            "location": "/reference/rebilly-api/#addresponseinterceptor", 
            "text": "addResponseInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.  Example  api . addResponseInterceptor ({ thenDelegate :   ( response )   =   { \n     // modify reponse data before having it processed by the API client \n     response . data . shift ();   //removed first element \n     return   response ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue.    thenDelegate ( response )   =   { Object }   Parameters   Name Type Description response Object The API response. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the response is executed for this interceptor.    catchDelegate ( error )   =   Promise   Parameters   Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.", 
            "title": "addResponseInterceptor"
        }, 
        {
            "location": "/reference/rebilly-api/#removeresponseinterceptor", 
            "text": "removeResponseInterceptor ( interceptor )  Removes a specific response interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addResponseInterceptor ({ thenDelegate :   ( response )   =   { \n     response . data . shift (); \n     return   config ;  }});  // remove via reference  api . removeResponseInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added response interceptor that should be removed from the current instance.", 
            "title": "removeResponseInterceptor"
        }, 
        {
            "location": "/reference/rebilly-api/#getcancellationtoken", 
            "text": "getCancellationToken () -   {CancelToken}  Returns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.  Since 0.12.0   See  RebillyErrors   Example  // once created the token will be used for each subsequent API request  const   token   =   api . getCancellationToken ();  // when cancelling the request, a message can be provided  token . cancel ( Cancelled request manually );  // any ongoing request will be canceled by the same token  try   { \n     // trigger a request \n     await   api . customers . get ({ id :   cancellable-customer-id });  }   catch ( error )   { \n     // you can detect if a request was canceled by checking  \n     // the error.name \n     if   ( error . name   ===   RebillyCanceledError )   { \n         // the message provided to  token.cancel  will be reflected here \n         console . log ( error . message )   // returns  Cancelled request manually       \n     }   else   { \n        // normal error handling  \n     }  }   Returns  The global cancellation token. An instance of  axios.CancelToken . Exposes method  cancel(message) .  Type  CancelToken", 
            "title": "getCancellationToken"
        }, 
        {
            "location": "/reference/rebilly-api/#generatesignature", 
            "text": "generateSignature ({ apiUser ,  apiKey }) -   {string}  Generates a signature used to authenticate payment token creation requests. This should be used in conjunction with the  Rebilly JS Token library , which powers your checkout form and removes the need to send sensitive customer information directly to your servers.   Server-side Only  You should use the signature generation method only on the server-side as it will otherwise expose your secret  apiKey  to the browser.   Since 1.1.0   See  Rebilly JS Token Library   Example  const   credentials   =   { apiUser : foobar ,   apiKey :   01234567890 };  const   signature   =   api . generateSignature ( credentials );  // in your checkout page authenticate your requests  // using the Rebilly.js token library  Rebilly . setAuth ( `the signature s content` );   Returns  A signature that can be used to authenticate  Rebilly JS token  creation for use in a checkout page.  Type  string", 
            "title": "generateSignature"
        }, 
        {
            "location": "/reference/rebilly-api/#settimeout", 
            "text": "setTimeout ( timeout )  Define the default timeout delay in milliseconds for the current API instance.  Example  api . setTimeout ( 10000 );   Parameters     Name  Type  Attribute  Description      timeout  number  -  Timeout delay in milliseconds.", 
            "title": "setTimeout"
        }, 
        {
            "location": "/reference/rebilly-api/#setsessiontoken", 
            "text": "setSessionToken ( token )  Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the  private API key  when the client is used in a browser.  To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.   See  api.account.signIn   Example  // instantiate an unauthorized API client  const   api   =   RebillyAPI ();  // build the sign in payload  const   payload   =   { data :   { email ,   password ,   expiredTime }};  // the  signIn  method does not require API authorization to complete  const   response   =   await   api . account . signIn ( payload );  // set the session token for future API requests that require  // an authorization using the response fields  api . setSessionToken ( response . fields . token );  // this request will be authorized using the token  const   customers   =   await   api . customers . getAll ();", 
            "title": "setSessionToken"
        }, 
        {
            "location": "/reference/rebilly-api/#setendpoints", 
            "text": "setEndpoints ({ live opt ,  sandbox opt })  Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.   Securing Communications  When modifying the API endpoints always use  HTTPS  for a production environment.    Example  api . setEndpoints ({ live :   https://api.rebilly.com/experimental/version/url });   Parameters     Name  Type  Attribute  Description      live  string  optional  URL for the live API mode.    sandbox  string  optional  URL for the sandbox API mode.", 
            "title": "setEndpoints"
        }, 
        {
            "location": "/reference/rebilly-api/#setproxyagent", 
            "text": "setProxyAgent ({ host ,  port ,  auth })  Define a proxy for the current API instance. Authorized using  HTTP Basic  credentials.   Example  const   config   =   { \n     host :   127.0.0.1 , \n     port :   9000 , \n     auth :   { \n         //HTTP Basic \n         username :   foobar , \n         password :   fuubar \n     }  };  //all subsequent API requests will pass through the proxy  api . setProxyAgent ( config );   Parameters     Name  Type  Attribute  Description      host  string  -  Hostname of the proxy server.    port  number  -  Port of the proxy server.    auth  Object  -  Basic credentials to connect to the proxy server.    Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication.", 
            "title": "setProxyAgent"
        }, 
        {
            "location": "/reference/rebilly-api/#resources", 
            "text": "Resources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys.   Promises  All resource methods return chainable Promises.   Example  //get the latest 100 customers starting from the 100th one  api . customers . getAll ({ offset :   100 });", 
            "title": "Resources"
        }, 
        {
            "location": "/reference/rebilly-api/#account", 
            "text": "api . account  Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset.    See the  Account resource  for detailed method information.", 
            "title": "Account"
        }, 
        {
            "location": "/reference/rebilly-api/#api-keys", 
            "text": "api . apiKeys  Allows you to manage your API keys. Create or modify existing ones with different  datetime  settings. API keys are private and should only be used for server-side operations.    Note  For client-side requests using the JS SDK, you must use the session token returned by  api . account . signIn () . See the  Accounts resource  for more details.    See the  API Keys resource  for detailed method information.", 
            "title": "API Keys"
        }, 
        {
            "location": "/reference/rebilly-api/#bank-accounts", 
            "text": "api . bankAccounts  Used to create new bank accounts and attach them to an existing customer. Can also deactivate bank accounts.   Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.  See Payment Instruments.    See the  Bank Accounts resource  for detailed method information.", 
            "title": "Bank Accounts"
        }, 
        {
            "location": "/reference/rebilly-api/#blacklists", 
            "text": "api . blacklists  Manage blacklist items by creating new entries or deleting existing items. Blacklists are used to manage risk and fraud by aborting an operation.    Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.   See the  Blacklists resource  for detailed method information.", 
            "title": "Blacklists"
        }, 
        {
            "location": "/reference/rebilly-api/#checkout-pages", 
            "text": "api . checkoutPages  Create and manage checkout pages. Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements.   See the  Checkout Pages resource  for detailed method information.", 
            "title": "Checkout Pages"
        }, 
        {
            "location": "/reference/rebilly-api/#contacts", 
            "text": "api . contacts  Define contact information for your customers. Manage multiple addresses for the same customer.   See the  Contacts resource  for detailed method information.", 
            "title": "Contacts"
        }, 
        {
            "location": "/reference/rebilly-api/#coupons", 
            "text": "api . coupons  Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.   See the  Coupons resource  for detailed method information.", 
            "title": "Coupons"
        }, 
        {
            "location": "/reference/rebilly-api/#credential-hashes", 
            "text": "api . credentialHashes  Generate credential hashes to authorize your webhooks or emails in various parts of Rebilly.    See the  Credential Hashes resource  for detailed method information.", 
            "title": "Credential Hashes"
        }, 
        {
            "location": "/reference/rebilly-api/#custom-events", 
            "text": "api . customEvents  Create custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule.   For example, a custom event could be used to send you an email before a customer's subscription is about to expire.  See Rules Engine.     See the  Custom Events resource  for detailed method information.", 
            "title": "Custom Events"
        }, 
        {
            "location": "/reference/rebilly-api/#custom-fields", 
            "text": "api . customFields  Create and manage custom fields to be added to other Resources. A variety of fields are supported from datetime to booleans.   See the  Custom Fields resource  for detailed method information.", 
            "title": "Custom Fields"
        }, 
        {
            "location": "/reference/rebilly-api/#customers", 
            "text": "api . customers  Create and manage your customers and their lead sources. Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models.   See the  Customers resource  for detailed method information.", 
            "title": "Customers"
        }, 
        {
            "location": "/reference/rebilly-api/#customer-authentication", 
            "text": "api . customerAuthentication  Create and manage login credentials for your customers. This feature can be used to integrate Rebilly directly into your own website and display your customers their subscription or product information.    See the  Customer Authentication resource  for detailed method information.", 
            "title": "Customer Authentication"
        }, 
        {
            "location": "/reference/rebilly-api/#disputes", 
            "text": "api . disputes  Manage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly.   See the  Disputes resource  for detailed method information.", 
            "title": "Disputes"
        }, 
        {
            "location": "/reference/rebilly-api/#events", 
            "text": "api . events  Create and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed.  The actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation.  See Rules Engine.     See the  Events resource  for detailed method information.", 
            "title": "Events"
        }, 
        {
            "location": "/reference/rebilly-api/#files", 
            "text": "api . files  Upload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business.     See the  Files resource  for detailed method information.", 
            "title": "Files"
        }, 
        {
            "location": "/reference/rebilly-api/#gateway-accounts", 
            "text": "api . gatewayAccounts  Create and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use.   A payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets.  See Supported Gateway Accounts.   See the  Gateway Accounts resource  for detailed method information.", 
            "title": "Gateway Accounts"
        }, 
        {
            "location": "/reference/rebilly-api/#invoices", 
            "text": "api . invoices  An invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer.  Payment terms are usually stated on the invoice.  See also:   Products   Taxes  Shipping  Issuing an Invoice    See the  Invoices resource  for detailed method information.", 
            "title": "Invoices"
        }, 
        {
            "location": "/reference/rebilly-api/#layouts", 
            "text": "api . layouts  Create and manage your plan layouts. Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a  pricing  or  plans  page integrated into your website.     See the  Layouts resource  for detailed method information.", 
            "title": "Layouts"
        }, 
        {
            "location": "/reference/rebilly-api/#lists-rules-engine", 
            "text": "api . lists  Create and manage your lists. A list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself.     See the  Lists resource  for detailed method information.", 
            "title": "Lists (Rules Engine)"
        }, 
        {
            "location": "/reference/rebilly-api/#notes", 
            "text": "api . notes  Leave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service.       See the  Notes resource  for detailed method information.", 
            "title": "Notes"
        }, 
        {
            "location": "/reference/rebilly-api/#organizations", 
            "text": "api . organizations  Organizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations.   Shared Modes  Organizations are shared between the  Live  and  Sandbox  modes.        See the  Organizations resource  for detailed method information.", 
            "title": "Organizations"
        }, 
        {
            "location": "/reference/rebilly-api/#payment-cards", 
            "text": "api . paymentCards  A form of payment instrument, payment cards enable customers to do transactions when buying your products.   See Payment Instruments.    See the  Payment Cards resource  for detailed method information.", 
            "title": "Payment Cards"
        }, 
        {
            "location": "/reference/rebilly-api/#payment-tokens", 
            "text": "api . paymentTokens  Tokens are an encrypted string representing a payment instrument. A token expires within 24 hours.  Payment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens.  See  Rebilly.js  library       See the  Payment Tokens resource  for detailed method information.", 
            "title": "Payment Tokens"
        }, 
        {
            "location": "/reference/rebilly-api/#paypal-accounts", 
            "text": "api . paypalAccounts  A form of payment instrument, paypal accounts enable customers to do transactions when buying your products.   See Payment Instruments.    See the  Paypal Accounts resource  for detailed method information.", 
            "title": "Paypal Accounts"
        }, 
        {
            "location": "/reference/rebilly-api/#plans", 
            "text": "api . plans  Create and manage plans. Plans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences.    See the  Plans resource  for detailed method information.", 
            "title": "Plans"
        }, 
        {
            "location": "/reference/rebilly-api/#previews", 
            "text": "api . previews  Preview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine.    See the  Previews resource  for detailed method information.", 
            "title": "Previews"
        }, 
        {
            "location": "/reference/rebilly-api/#products", 
            "text": "api . products  Create and manage products. You may attach them to plans. Products can have a tax category, accounting code and may require shipping.   See the  Products resource  for detailed method information.", 
            "title": "Products"
        }, 
        {
            "location": "/reference/rebilly-api/#profile", 
            "text": "api . profile  Manage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in.  The profile includes information about the currently authenticated user like his name, email and preferences.   See the  Profile resource  for detailed method information.", 
            "title": "Profile"
        }, 
        {
            "location": "/reference/rebilly-api/#sessions", 
            "text": "api . sessions  Create and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys.  This token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API.   See the  Sessions resource  for detailed method information.", 
            "title": "Sessions"
        }, 
        {
            "location": "/reference/rebilly-api/#shipping-zones", 
            "text": "api . shippingZones  Create and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates.   See the  Shipping Zones resource  for detailed method information.", 
            "title": "Shipping Zones"
        }, 
        {
            "location": "/reference/rebilly-api/#status-api", 
            "text": "api . status  Get the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not.   Tip  You can poll this endpoint on interval to check the status of the API.    See the  Status resource  for detailed method information.", 
            "title": "Status (API)"
        }, 
        {
            "location": "/reference/rebilly-api/#subscriptions", 
            "text": "api . subscriptions  Create and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination.   See the  Subscriptions resource  for detailed method information.", 
            "title": "Subscriptions"
        }, 
        {
            "location": "/reference/rebilly-api/#three-d-secure-3ds", 
            "text": "api . threeDSecure  Create and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure.  The merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases.  3D Secure requires cardholder interaction to be completed.   See the  Three D Secure resource  for detailed method information.", 
            "title": "Three D Secure (3DS)"
        }, 
        {
            "location": "/reference/rebilly-api/#tracking", 
            "text": "api . tracking  Inspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing.   See the  Tracking resource  for detailed method information.", 
            "title": "Tracking"
        }, 
        {
            "location": "/reference/rebilly-api/#transactions", 
            "text": "api . transactions  Create and manage transactions. A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future.   See the  Transactions resource  for detailed method information.", 
            "title": "Transactions"
        }, 
        {
            "location": "/reference/rebilly-api/#users", 
            "text": "api . users  Create and manage users. A  user  represents a person who can login to Rebilly, and take actions subject to their granted permissions.   See the  Users resource  for detailed method information.", 
            "title": "Users"
        }, 
        {
            "location": "/reference/rebilly-api/#webhooks", 
            "text": "api . webhooks  Create and manage webhooks. Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice.   They allow you to collect information about those events. Rebilly can send this information to an URL of your choice.   See the  Webhooks resource  for detailed method information.", 
            "title": "Webhooks"
        }, 
        {
            "location": "/reference/rebilly-api/#websites", 
            "text": "api . websites  Create and manage websites. The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business.   See the  Websites resource  for detailed method information.", 
            "title": "Websites"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/", 
            "text": "RebillyExperimentalAPI\n\n\nExperimental Rebilly API client that can break backward-compatibility. This client contains compute-heavy features like reports and statistics and is bound to change over time.\n\n\nAPI Spec\n\n\nSee the \nRebilly Reports API spec \n  for full details on the different API calls exposed within this client.\n\n\nImporting\n\n\nThe \nRebillyExperimentalAPI\n factory is part of the \nrebilly-js-sdk\n package as a \nnon-default\n export.\n\n\nimport\n \n{\nRebillyExperimentalAPI\n}\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n\n\nConfiguration\n\n\nAll client API configuration parameters are optional. However a secret API key can only be provided at instantiation.\n\n\n\n\nAPI Environments\n\n\nBy default an instance is always generated in the \nLive\n environment. The \nSandbox\n mode is only recommended while developing your integration. \n\n\n\n\nParameters\n\n\nconst\n \napi\n \n=\n \nRebillyExperimentalAPI\n({\napiKey\n:\n \nsecret-api-key\n,\n \nsandbox\n:\n \ntrue\n,\n \ntimeout\n:\n \n10000\n});\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiKey\n\n\nstring\n\n\nnull\n\n\nYour secret API key. To be used only for Node integrations. See \nDeveloper \n API Keys\n.\n\n\n\n\n\n\nsandbox\n\n\nboolean\n\n\nfalse\n\n\nFlag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n6000\n\n\nDefine the timeout in milliseconds for API requests.\n\n\n\n\n\n\n\n\n\n\nVersion Agnostic\n\n\nThe Experimental API client is version-less and does not support it as part of its configuration hash.\n\n\n\n\nPublic Methods\n\n\nThe API client exposes different configuration and utility methods you can use to customize your instance.\n\n\naddRequestInterceptor\n\n\naddRequestInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.\n\n\nExample\n\n\napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=\n \n{\n\n    \nconfig\n.\nparams\n[\nextra-query-param\n]\n \n=\n \nfoobar\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue. \n \nthenDelegate\n(\nconfig\n)\n \n=\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nconfig\nObject\nThe request configuration. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the request is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveRequestInterceptor\n\n\nremoveRequestInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific request interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddRequestInterceptor\n({\nthenDelegate\n:\n \n(\nconfig\n)\n \n=\n \n{\n\n    \nconfig\n.\nparams\n[\nextra-query-param\n]\n \n=\n \nfoobar\n;\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveRequestInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added request interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\naddResponseInterceptor\n\n\naddResponseInterceptor\n({\nthenDelegate\n, \ncatchDelegate\nopt\n})\n\n\nAdds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.\n\n\nExample\n\n\napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=\n \n{\n\n    \n// modify reponse data before having it processed by the API client\n\n    \nresponse\n.\ndata\n.\nshift\n();\n \n//removed first element\n\n    \nreturn\n \nresponse\n;\n\n\n}});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nthenDelegate\n\n\nFunction\n\n\n-\n\n\nDefines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue. \n \nthenDelegate\n(\nresponse\n)\n \n=\n \n{\nObject\n}\n \nParameters\n \nName\nType\nDescription\nresponse\nObject\nThe API response. Must be returned after being modified.\n\n\n\n\n\n\ncatchDelegate\n\n\nFunction\n\n\nOptional\n\n\nDefines a callback to run before the catch block of the response is executed for this interceptor. \n \ncatchDelegate\n(\nerror\n)\n \n=\n \nPromise\n \nParameters\n \nName\nType\nDescription\nerror\nObject\nThe response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.\n\n\n\n\n\n\n\n\nremoveResponseInterceptor\n\n\nremoveResponseInterceptor\n(\ninterceptor\n)\n\n\nRemoves a specific response interceptor from the current API instance.\n\n\nExample\n\n\n// set reference to interceptor\n\n\nconst\n \ninterceptor\n \n=\n \napi\n.\naddResponseInterceptor\n({\nthenDelegate\n:\n \n(\nresponse\n)\n \n=\n \n{\n\n    \nresponse\n.\ndata\n.\nshift\n();\n\n    \nreturn\n \nconfig\n;\n\n\n}});\n\n\n// remove via reference\n\n\napi\n.\nremoveResponseInterceptor\n(\ninterceptor\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninterceptor\n\n\nFunction\n\n\n-\n\n\nThe reference to the previously added response interceptor that should be removed from the current instance.\n\n\n\n\n\n\n\n\ngetCancellationToken\n\n\ngetCancellationToken\n() -\n \n{CancelToken}\n\n\nReturns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.\n\n\nSince 0.12.0\n\n\nExample\n\n\n// once created the token will be used for each subsequent API request\n\n\nconst\n \ntoken\n \n=\n \napi\n.\ngetCancellationToken\n();\n\n\n// when cancelling the request, a message can be provided\n\n\ntoken\n.\ncancel\n(\nCancelled request manually\n);\n\n\n\n// any ongoing request will be canceled by the same token\n\n\ntry\n \n{\n\n    \n// trigger a request\n\n    \nawait\n \napi\n.\ncustomers\n.\nget\n({\nid\n:\n \ncancellable-customer-id\n});\n\n\n}\n \ncatch\n(\nerror\n)\n \n{\n\n    \n// you can detect if a request was canceled by checking \n\n    \n// the error.name\n\n    \nif\n \n(\nerror\n.\nname\n \n===\n \nRebillyCanceledError\n)\n \n{\n\n        \n// the message provided to \ntoken.cancel\n will be reflected here\n\n        \nconsole\n.\nlog\n(\nerror\n.\nmessage\n)\n \n// returns \nCancelled request manually\n     \n\n    \n}\n \nelse\n \n{\n\n       \n// normal error handling \n\n    \n}\n\n\n}\n\n\n\n\n\nReturns\n\n\nThe global cancellation token. An instance of \naxios.CancelToken\n. Exposes method \ncancel(message)\n.\n\n\nType \nCancelToken\n\n\nsetTimeout\n\n\nsetTimeout\n(\ntimeout\n)\n\n\nDefine the default timeout delay in milliseconds for the current API instance.\n\n\nExample\n\n\napi\n.\nsetTimeout\n(\n10000\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimeout\n\n\nnumber\n\n\n-\n\n\nTimeout delay in milliseconds.\n\n\n\n\n\n\n\n\nsetSessionToken\n\n\nsetSessionToken\n(\ntoken\n)\n\n\nUse a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the \nprivate API key\n when the client is used in a browser.\n\n\nTo retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.\n\n\nExample\n\n\n// instantiate an unauthorized API client\n\n\nconst\n \napi\n \n=\n \nRebillyExperimentalAPI\n();\n\n\n\n// build the sign in payload\n\n\nconst\n \npayload\n \n=\n \n{\ndata\n:\n \n{\nemail\n,\n \npassword\n,\n \nexpiredTime\n}};\n\n\n\n// the \nsignIn\n method does not require API authorization to complete\n\n\nconst\n \nresponse\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignIn\n(\npayload\n);\n\n\n\n// set the session token for future API requests that require\n\n\n// an authorization using the response fields\n\n\napi\n.\nsetSessionToken\n(\nresponse\n.\nfields\n.\ntoken\n);\n\n\n\n// this request will be authorized using the token\n\n\nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n\n\n\nsetEndpoints\n\n\nsetEndpoints\n({\nlive\nopt\n, \nsandbox\nopt\n})\n\n\nUpdate the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.\n\n\n\n\nSecuring Communications\n\n\nWhen modifying the API endpoints always use \nHTTPS\n for a production environment. \n\n\n\n\nExample\n\n\napi\n.\nsetEndpoints\n({\nlive\n:\n \nhttps://api.rebilly.com/experimental/version/url\n});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlive\n\n\nstring\n\n\noptional\n\n\nURL for the live API mode.\n\n\n\n\n\n\nsandbox\n\n\nstring\n\n\noptional\n\n\nURL for the sandbox API mode.\n\n\n\n\n\n\n\n\nsetProxyAgent\n\n\nsetProxyAgent\n({\nhost\n, \nport\n, \nauth\n})\n\n\nDefine a proxy for the current API instance. Authorized using \nHTTP Basic\n credentials. \n\n\nExample\n\n\nconst\n \nconfig\n \n=\n \n{\n\n    \nhost\n:\n \n127.0.0.1\n,\n\n    \nport\n:\n \n9000\n,\n\n    \nauth\n:\n \n{\n\n        \n//HTTP Basic\n\n        \nusername\n:\n \nfoobar\n,\n\n        \npassword\n:\n \nfuubar\n\n    \n}\n\n\n};\n\n\n//all subsequent API requests will pass through the proxy\n\n\napi\n.\nsetProxyAgent\n(\nconfig\n);\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nstring\n\n\n-\n\n\nHostname of the proxy server.\n\n\n\n\n\n\nport\n\n\nnumber\n\n\n-\n\n\nPort of the proxy server.\n\n\n\n\n\n\nauth\n\n\nObject\n\n\n-\n\n\nBasic credentials to connect to the proxy server. \n \nProperties\nName\nType\nDescription\nusername\nstring\nThe username required for basic authentication.\npassword\nstring\nThe password required for basic authentication.\n\n\n\n\n\n\n\n\nResources\n\n\nResources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys.\n\n\n\n\nPromises\n\n\nAll resource methods return chainable Promises.\n\n\n\n\nCustomers\n\n\napi\n.\ncustomers\n\n\nAccess customer lifetime metrics. \n\n\n\n\nSee the \nCustomers resource\n for detailed method information.\n\n\n\n\nExports\n\n\napi\n.\nexports\n\n\nQueue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported. \n\n\n\n\nSee the \nExports resource\n for detailed method information.\n\n\n\n\nHistograms\n\n\napi\n.\nhistograms\n\n\nHistograms are for a particular kinds of reports with cohorts and periods. \n\n\n\n\nSee the \nHistograms resource\n for detailed method information.\n\n\n\n\nReports\n\n\napi\n.\nreports\n\n\nRetrieve summary information about your customers, subscriptions, transactions, and more. \n\n\n\n\nSee the \nReports resource\n for detailed method information.", 
            "title": "RebillyExperimentalAPI"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#rebillyexperimentalapi", 
            "text": "Experimental Rebilly API client that can break backward-compatibility. This client contains compute-heavy features like reports and statistics and is bound to change over time.  API Spec  See the  Rebilly Reports API spec    for full details on the different API calls exposed within this client.", 
            "title": "RebillyExperimentalAPI"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#importing", 
            "text": "The  RebillyExperimentalAPI  factory is part of the  rebilly-js-sdk  package as a  non-default  export.  import   { RebillyExperimentalAPI }   from   rebilly-js-sdk ;", 
            "title": "Importing"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#configuration", 
            "text": "All client API configuration parameters are optional. However a secret API key can only be provided at instantiation.   API Environments  By default an instance is always generated in the  Live  environment. The  Sandbox  mode is only recommended while developing your integration.", 
            "title": "Configuration"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#parameters", 
            "text": "const   api   =   RebillyExperimentalAPI ({ apiKey :   secret-api-key ,   sandbox :   true ,   timeout :   10000 });      Option  Type  Default  Description      apiKey  string  null  Your secret API key. To be used only for Node integrations. See  Developer   API Keys .    sandbox  boolean  false  Flag used to enable sandbox mode for the instance. This allows you to run requests without processing real transactions on your account.    timeout  number  6000  Define the timeout in milliseconds for API requests.      Version Agnostic  The Experimental API client is version-less and does not support it as part of its configuration hash.", 
            "title": "Parameters"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#public-methods", 
            "text": "The API client exposes different configuration and utility methods you can use to customize your instance.", 
            "title": "Public Methods"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#addrequestinterceptor", 
            "text": "addRequestInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a request interceptor to the current API instance. Wrapped around Axios' request interceptor.  Example  api . addRequestInterceptor ({ thenDelegate :   ( config )   =   { \n     config . params [ extra-query-param ]   =   foobar ; \n     return   config ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the request is completed. Receives the request configuration as a parameter. Must return the configuration for the request chain to continue.    thenDelegate ( config )   =   { Object }   Parameters   Name Type Description config Object The request configuration. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the request is executed for this interceptor.    catchDelegate ( error )   =   Promise   Parameters   Name Type Description error Object The request error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.", 
            "title": "addRequestInterceptor"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#removerequestinterceptor", 
            "text": "removeRequestInterceptor ( interceptor )  Removes a specific request interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addRequestInterceptor ({ thenDelegate :   ( config )   =   { \n     config . params [ extra-query-param ]   =   foobar ; \n     return   config ;  }});  // remove via reference  api . removeRequestInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added request interceptor that should be removed from the current instance.", 
            "title": "removeRequestInterceptor"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#addresponseinterceptor", 
            "text": "addResponseInterceptor ({ thenDelegate ,  catchDelegate opt })  Adds a response interceptor to the current API instance. Wrapped around Axios' response interceptor.  Example  api . addResponseInterceptor ({ thenDelegate :   ( response )   =   { \n     // modify reponse data before having it processed by the API client \n     response . data . shift ();   //removed first element \n     return   response ;  }});   Parameters     Name  Type  Attribute  Description      thenDelegate  Function  -  Defines the delegate logic to run when the response is completed. Receives the API response as a parameter. Must return the response chain to continue.    thenDelegate ( response )   =   { Object }   Parameters   Name Type Description response Object The API response. Must be returned after being modified.    catchDelegate  Function  Optional  Defines a callback to run before the catch block of the response is executed for this interceptor.    catchDelegate ( error )   =   Promise   Parameters   Name Type Description error Object The response error. Should be resolved as a Promise. This method can be used to prevent certain errors from being caught.", 
            "title": "addResponseInterceptor"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#removeresponseinterceptor", 
            "text": "removeResponseInterceptor ( interceptor )  Removes a specific response interceptor from the current API instance.  Example  // set reference to interceptor  const   interceptor   =   api . addResponseInterceptor ({ thenDelegate :   ( response )   =   { \n     response . data . shift (); \n     return   config ;  }});  // remove via reference  api . removeResponseInterceptor ( interceptor );   Parameters     Name  Type  Attribute  Description      interceptor  Function  -  The reference to the previously added response interceptor that should be removed from the current instance.", 
            "title": "removeResponseInterceptor"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#getcancellationtoken", 
            "text": "getCancellationToken () -   {CancelToken}  Returns a cancellation token for the active instance. Based on the withdrawn cancelable promises proposal. Can be used to cancel any ongoing request. This feature is useful for stopping requests that are no longer required to complete.  Since 0.12.0  Example  // once created the token will be used for each subsequent API request  const   token   =   api . getCancellationToken ();  // when cancelling the request, a message can be provided  token . cancel ( Cancelled request manually );  // any ongoing request will be canceled by the same token  try   { \n     // trigger a request \n     await   api . customers . get ({ id :   cancellable-customer-id });  }   catch ( error )   { \n     // you can detect if a request was canceled by checking  \n     // the error.name \n     if   ( error . name   ===   RebillyCanceledError )   { \n         // the message provided to  token.cancel  will be reflected here \n         console . log ( error . message )   // returns  Cancelled request manually       \n     }   else   { \n        // normal error handling  \n     }  }   Returns  The global cancellation token. An instance of  axios.CancelToken . Exposes method  cancel(message) .  Type  CancelToken", 
            "title": "getCancellationToken"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#settimeout", 
            "text": "setTimeout ( timeout )  Define the default timeout delay in milliseconds for the current API instance.  Example  api . setTimeout ( 10000 );   Parameters     Name  Type  Attribute  Description      timeout  number  -  Timeout delay in milliseconds.", 
            "title": "setTimeout"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#setsessiontoken", 
            "text": "setSessionToken ( token )  Use a JWT session token to identify the API requests. This removes the private API key header if present. This method of authentication should be applied instead of the  private API key  when the client is used in a browser.  To retrieve a session token, first initialize the API client without an API key and use the sign in resource to login the user to Rebilly. The token will be available in the response fields.  Example  // instantiate an unauthorized API client  const   api   =   RebillyExperimentalAPI ();  // build the sign in payload  const   payload   =   { data :   { email ,   password ,   expiredTime }};  // the  signIn  method does not require API authorization to complete  const   response   =   await   api . account . signIn ( payload );  // set the session token for future API requests that require  // an authorization using the response fields  api . setSessionToken ( response . fields . token );  // this request will be authorized using the token  const   customers   =   await   api . customers . getAll ();", 
            "title": "setSessionToken"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#setendpoints", 
            "text": "setEndpoints ({ live opt ,  sandbox opt })  Update the endpoints URL for live, sandbox or both mode in the current API instance's active URL. This is useful for testing a different version of the API.   Securing Communications  When modifying the API endpoints always use  HTTPS  for a production environment.    Example  api . setEndpoints ({ live :   https://api.rebilly.com/experimental/version/url });   Parameters     Name  Type  Attribute  Description      live  string  optional  URL for the live API mode.    sandbox  string  optional  URL for the sandbox API mode.", 
            "title": "setEndpoints"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#setproxyagent", 
            "text": "setProxyAgent ({ host ,  port ,  auth })  Define a proxy for the current API instance. Authorized using  HTTP Basic  credentials.   Example  const   config   =   { \n     host :   127.0.0.1 , \n     port :   9000 , \n     auth :   { \n         //HTTP Basic \n         username :   foobar , \n         password :   fuubar \n     }  };  //all subsequent API requests will pass through the proxy  api . setProxyAgent ( config );   Parameters     Name  Type  Attribute  Description      host  string  -  Hostname of the proxy server.    port  number  -  Port of the proxy server.    auth  Object  -  Basic credentials to connect to the proxy server.    Properties Name Type Description username string The username required for basic authentication. password string The password required for basic authentication.", 
            "title": "setProxyAgent"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#resources", 
            "text": "Resources are accessible at the root of the API client and represent a domain for specific API endpoints. Methods within each domain are semantically named and expect a single argument as an object literal with different keys.   Promises  All resource methods return chainable Promises.", 
            "title": "Resources"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#customers", 
            "text": "api . customers  Access customer lifetime metrics.    See the  Customers resource  for detailed method information.", 
            "title": "Customers"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#exports", 
            "text": "api . exports  Queue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported.    See the  Exports resource  for detailed method information.", 
            "title": "Exports"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#histograms", 
            "text": "api . histograms  Histograms are for a particular kinds of reports with cohorts and periods.    See the  Histograms resource  for detailed method information.", 
            "title": "Histograms"
        }, 
        {
            "location": "/reference/rebilly-experimental-api/#reports", 
            "text": "api . reports  Retrieve summary information about your customers, subscriptions, transactions, and more.    See the  Reports resource  for detailed method information.", 
            "title": "Reports"
        }, 
        {
            "location": "/reference/rebilly-errors/", 
            "text": "RebillyErrors\n\n\nThe JS SDK returns custom error types based on the HTTP code when available or an internal condition like timeouts and manual cancellation.\n\n\nImporting\n\n\nYou can import the error object into your project to access the different types of errors returned by the library..\n\nimport\n \n{\nRebillyErrors\n}\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n\nTypes\n\n\nThe \nRebillyErrors\n object exposes the following types:\n\n\n\n\n\n\n\n\nName\n\n\nStatus Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nRebillyRequestError\n\n\n-\n\n\nGeneric error when no response is available.\n\n\n\n\n\n\nRebillyTimeoutError\n\n\n-\n\n\nThe request timed out.\n\n\n\n\n\n\nRebillyCanceledError\n\n\n-\n\n\nThe request was manually canceled before being completed.\nSee \napi.getCancellationToken\n\n\n\n\n\n\nRebillyForbiddenError\n\n\n401\n\n\nIndicates an invalid API key or expired session token.\n\n\n\n\n\n\nRebillyNotFoundError\n\n\n404\n\n\nRequested resource was not found.\n\n\n\n\n\n\nRebillyMethodNotAllowedError\n\n\n405\n\n\nRequest method not allowed on this resource.\n\n\n\n\n\n\nRebillyConflictError\n\n\n409\n\n\nRequested operation triggered a conflict.\n\n\n\n\n\n\nRebillyValidationError\n\n\n422\n\n\nThe request payload triggered a validation error (see error \ndetails\n).\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWhen catching an error from any of the Rebilly API clients, check the \nerror.name\n to determine the type.\n\n\n\n\nExamples\n\n\nThrowing \nRebillyErrors\n\n\nUsing the imported errors you can throw them on demand in your integration.\n\nimport\n \n{\nRebillyErrors\n}\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\n// you can throw the errors internally\n\n\nif\n \n(\nresponse\n.\nfields\n.\nid\n \n===\n \nnull\n)\n \n{\n\n    \nconst\n \nerror\n \n=\n \n{\nmessage\n:\n \nMissing ID\n};\n\n    \nthrow\n \nnew\n \nRebillyErrors\n.\nRebillyRequestError\n({\nerror\n});\n\n\n}\n\n\n\n\n\n\nNote\n\n\nYou can pass an error instance directly to the constructor of any type within \nRebillyErrors\n.\n\ntry\n \n{\n\n    \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n}\n \ncatch\n \n(\nerror\n)\n \n{\n\n    \n// using the error that was caught as the parameters\n\n    \nthrow\n \nnew\n \nRebillyErrors\n.\nRebillyRequestError\n({\nerror\n});\n\n\n}\n\n\n\n\n\n\nVerifying the error type\n\n\nWhen catching library errors you can use the imported errors to compare their types and handle them differently.\n\nimport\n \nRebillyAPI\n,\n \n{\nRebillyErrors\n}\n \nfrom\n \nrebilly-js-sdk\n;\n\n\n\nconst\n \napi\n \n=\n \nRebillyAPI\n({\napiKey\n:\nprivate-key\n});\n\n\n\ntry\n \n{\n\n    \nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n}\n \ncatch\n \n(\nerror\n)\n \n{\n\n    \nif\n \n(\nerror\n.\nname\n \n===\n \nRebillyErrors\n.\nRebillyRequestError\n.\nname\n)\n \n{\n\n        \n// handle a request error differently\n\n        \n// from other error types\n\n    \n}\n\n    \nelse\n \n{\n\n        \n// handle any other error type\n\n    \n}\n\n\n}\n\n\n\n\n\n\nNote\n\n\nAlternatively you can compare the \nerror\n.\nname\n to the string representation of the error type.\n\nif\n \n(\nerror\n.\nname\n \n===\n \nRebillyRequestError\n)\n \n{\n\n    \n// handle error\n\n\n}", 
            "title": "RebillyErrors"
        }, 
        {
            "location": "/reference/rebilly-errors/#rebillyerrors", 
            "text": "The JS SDK returns custom error types based on the HTTP code when available or an internal condition like timeouts and manual cancellation.", 
            "title": "RebillyErrors"
        }, 
        {
            "location": "/reference/rebilly-errors/#importing", 
            "text": "You can import the error object into your project to access the different types of errors returned by the library.. import   { RebillyErrors }   from   rebilly-js-sdk ;", 
            "title": "Importing"
        }, 
        {
            "location": "/reference/rebilly-errors/#types", 
            "text": "The  RebillyErrors  object exposes the following types:     Name  Status Code  Description      RebillyRequestError  -  Generic error when no response is available.    RebillyTimeoutError  -  The request timed out.    RebillyCanceledError  -  The request was manually canceled before being completed. See  api.getCancellationToken    RebillyForbiddenError  401  Indicates an invalid API key or expired session token.    RebillyNotFoundError  404  Requested resource was not found.    RebillyMethodNotAllowedError  405  Request method not allowed on this resource.    RebillyConflictError  409  Requested operation triggered a conflict.    RebillyValidationError  422  The request payload triggered a validation error (see error  details ).      Tip  When catching an error from any of the Rebilly API clients, check the  error.name  to determine the type.", 
            "title": "Types"
        }, 
        {
            "location": "/reference/rebilly-errors/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/reference/rebilly-errors/#throwing-rebillyerrors", 
            "text": "Using the imported errors you can throw them on demand in your integration. import   { RebillyErrors }   from   rebilly-js-sdk ;  // you can throw the errors internally  if   ( response . fields . id   ===   null )   { \n     const   error   =   { message :   Missing ID }; \n     throw   new   RebillyErrors . RebillyRequestError ({ error });  }    Note  You can pass an error instance directly to the constructor of any type within  RebillyErrors . try   { \n     await   api . customers . getAll ();  }   catch   ( error )   { \n     // using the error that was caught as the parameters \n     throw   new   RebillyErrors . RebillyRequestError ({ error });  }", 
            "title": "Throwing RebillyErrors"
        }, 
        {
            "location": "/reference/rebilly-errors/#verifying-the-error-type", 
            "text": "When catching library errors you can use the imported errors to compare their types and handle them differently. import   RebillyAPI ,   { RebillyErrors }   from   rebilly-js-sdk ;  const   api   =   RebillyAPI ({ apiKey : private-key });  try   { \n     const   customers   =   await   api . customers . getAll ();  }   catch   ( error )   { \n     if   ( error . name   ===   RebillyErrors . RebillyRequestError . name )   { \n         // handle a request error differently \n         // from other error types \n     } \n     else   { \n         // handle any other error type \n     }  }    Note  Alternatively you can compare the  error . name  to the string representation of the error type. if   ( error . name   ===   RebillyRequestError )   { \n     // handle error  }", 
            "title": "Verifying the error type"
        }, 
        {
            "location": "/reference/resources/account/", 
            "text": "Account \napi\n.\naccount\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nAllows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset.\n\n\nsignUp\n\n\nsignUp\n({\ndata\n}) -\n \n{Member}\n\n\nCreates a new user in Rebilly and sends an email confirmation. The user will have to activate his account using the email confirmation that he receives.\n\n\nImportant\nThis request does not require API authentication and can be completed as a guest.\n\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \nacme+test@rebilly.com\n,\n\n    \ncompany\n:\n \nAcme Imports\n,\n\n    \nfirstName\n:\n \nJohn\n,\n\n    \nlastName\n:\n \nDoe\n,\n\n    \nbusinessPhone\n:\n \n14566789\n,\n\n    \npassword\n:\n \nhelloworld123\n,\n\n    \nwebsite\n:\n \nhttp://acme-imports.com\n\n\n};\n\n\n\nconst\n \nuser\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignUp\n({\ndata\n});\n\n\nconsole\n.\nlog\n(\nuser\n.\nfields\n.\nid\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the newly created user information.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nsignIn\n\n\nsignIn\n({\ndata\n}) -\n \n{Member}\n\n\nSign in to a user account and return the session token (JWT). \n\n\nOptionally you can provide the expired time of the session using \nexpiredTime\n as a \ndatetime\n in the future.\n\n\nImportant\nThis request does not require API authentication and can be completed as a guest.\n\n\n\n\n\nSee \napi.setSessionToken\n\n\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \nacme+test@rebilly.com\n,\n\n    \npassword\n:\n \nhelloworld123\n\n\n    \n// optionally you can define an `expiredTime` to \n\n    \n// limit the duration of the session token\n\n\n    \n//expiredTime: \n2017-09-18T19:17:39Z\n\n\n};\n\n\n\nconst\n \nsession\n \n=\n \nawait\n \napi\n.\naccount\n.\nsignIn\n({\ndata\n});\n\n\n\n// the session token (JWT) can be used in\n\n\n// conjunction with api.setSessionToken to authorize API\n\n\n// requests in the browser \n\n\nconsole\n.\nlog\n(\nsession\n.\nfields\n.\ntoken\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the session information.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nlogout\n\n\nlogout\n() -\n \n{Member}\n\n\nLogs out the current authenticated user and destroys his active session. This will invalidate the session token. \n\n\n\n\nSession Expiry\n\n\nA session will expire automatically if you do not logout the user. However \nwe recommend you logout the user\n programmatically whenever his session should expire. \n\n\n\n\nExample\n\n\nconst\n \nlogout\n \n=\n \nawait\n \napi\n.\naccount\n.\nlogout\n();\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nlogout\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nactivate\n\n\nactivate\n({\ntoken\n}) -\n \n{Member}\n\n\nActivate a user account with the token he received by email when the user signed up to Rebilly. \n\n\nImportant\nThis request does not require API authentication and can be completed as a guest.\n\n\n\nExample\n\n\nconst\n \ntoken\n \n=\n \n1234567890abcdefghijklmnop\n;\n\n\n\nconst\n \nactivation\n \n=\n \nawait\n \napi\n.\naccount\n.\nactivate\n({\ntoken\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nactivation\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nforgotPassword\n\n\nforgotPassword\n({\ndata\n}) -\n \n{Member}\n\n\nSends an email with a link containing a token to reset user password.\n\n\nImportant\nThis request does not require API authentication and can be completed as a guest.\n\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \nacme+test@rebilly.com\n\n\n};\n\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\naccount\n.\nforgotPassword\n({\ndata\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nresetSandbox\n\n\nresetSandbox\n() -\n \n{Member}\n\n\nReset the contents of the sandbox mode. This is useful for testing and developing your integration with Rebilly.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\naccount\n.\nresetSandbox\n();\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember", 
            "title": "Accounts"
        }, 
        {
            "location": "/reference/resources/account/#account-apiaccount", 
            "text": "Member of  RebillyAPI   Allows a new user to sign in or sign up to Rebilly. Also exposes methods for activating a new user account, triggering a password reset or a sandbox mode reset.", 
            "title": "Account api.account"
        }, 
        {
            "location": "/reference/resources/account/#signup", 
            "text": "signUp ({ data }) -   {Member}  Creates a new user in Rebilly and sends an email confirmation. The user will have to activate his account using the email confirmation that he receives.  Important This request does not require API authentication and can be completed as a guest.  Example  const   data   =   { \n     email :   acme+test@rebilly.com , \n     company :   Acme Imports , \n     firstName :   John , \n     lastName :   Doe , \n     businessPhone :   14566789 , \n     password :   helloworld123 , \n     website :   http://acme-imports.com  };  const   user   =   await   api . account . signUp ({ data });  console . log ( user . fields . id );   Returns  A member exposing the newly created user information.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "signUp"
        }, 
        {
            "location": "/reference/resources/account/#signin", 
            "text": "signIn ({ data }) -   {Member}  Sign in to a user account and return the session token (JWT).   Optionally you can provide the expired time of the session using  expiredTime  as a  datetime  in the future.  Important This request does not require API authentication and can be completed as a guest.   See  api.setSessionToken   Example  const   data   =   { \n     email :   acme+test@rebilly.com , \n     password :   helloworld123 \n\n     // optionally you can define an `expiredTime` to  \n     // limit the duration of the session token \n\n     //expiredTime:  2017-09-18T19:17:39Z  };  const   session   =   await   api . account . signIn ({ data });  // the session token (JWT) can be used in  // conjunction with api.setSessionToken to authorize API  // requests in the browser   console . log ( session . fields . token );   Returns  A member exposing the session information.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "signIn"
        }, 
        {
            "location": "/reference/resources/account/#logout", 
            "text": "logout () -   {Member}  Logs out the current authenticated user and destroys his active session. This will invalidate the session token.    Session Expiry  A session will expire automatically if you do not logout the user. However  we recommend you logout the user  programmatically whenever his session should expire.    Example  const   logout   =   await   api . account . logout ();  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( logout . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "logout"
        }, 
        {
            "location": "/reference/resources/account/#activate", 
            "text": "activate ({ token }) -   {Member}  Activate a user account with the token he received by email when the user signed up to Rebilly.   Important This request does not require API authentication and can be completed as a guest.  Example  const   token   =   1234567890abcdefghijklmnop ;  const   activation   =   await   api . account . activate ({ token });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( activation . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "activate"
        }, 
        {
            "location": "/reference/resources/account/#forgotpassword", 
            "text": "forgotPassword ({ data }) -   {Member}  Sends an email with a link containing a token to reset user password.  Important This request does not require API authentication and can be completed as a guest.  Example  const   data   =   { \n     email :   acme+test@rebilly.com  };  const   request   =   await   api . account . forgotPassword ({ data });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "forgotPassword"
        }, 
        {
            "location": "/reference/resources/account/#resetsandbox", 
            "text": "resetSandbox () -   {Member}  Reset the contents of the sandbox mode. This is useful for testing and developing your integration with Rebilly.  Example  const   request   =   await   api . account . resetSandbox ();  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member", 
            "title": "resetSandbox"
        }, 
        {
            "location": "/reference/resources/api-keys/", 
            "text": "API Keys \napi\n.\napiKeys\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nAllows you to manage your API keys. Create or modify existing ones with different \ndatetime\n settings. API keys are private and should only be used for server-side operations.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of API keys. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\napiKey\n \n=\n \nconsole\n.\nlog\n(\napiKey\n.\nfields\n.\ndescription\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of API keys.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet an API key by its \nid\n.\n\n\nExample\n\n\nconst\n \napiKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\napiKey\n.\nfields\n.\ndescription\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the API key fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate an API key. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nExample\n\n\n// first set the properties for the new API key\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \nMy new API key\n,\n\n    \n// the `datetimeFormat` defines how dates will be saved \n\n    \n// and handled by Rebilly for this API key\n\n    \n// can be either `iso8601` (default) or `mysql`\n\n    \ndatetimeFormat\n:\n \niso8601\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created API key fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate an API key by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \nA better description\n\n\n};\n\n\n\nconst\n \napiKey\n \n=\n \nawait\n \napi\n.\napiKeys\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated API key fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete an API key by using its \nid\n. \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\napiKeys\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "API Keys"
        }, 
        {
            "location": "/reference/resources/api-keys/#api-keys-apiapikeys", 
            "text": "Member of  RebillyAPI   Allows you to manage your API keys. Create or modify existing ones with different  datetime  settings. API keys are private and should only be used for server-side operations.", 
            "title": "API Keys api.apiKeys"
        }, 
        {
            "location": "/reference/resources/api-keys/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt , \n         sort opt \n        }) ->  {Collection} \n       Get a collection of API keys. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . apiKeys . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . apiKeys . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( apiKey   =   console . log ( apiKey . fields . description ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .     Returns  A collection of API keys.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/api-keys/#get", 
            "text": "get ({ id }) -   {Member}  Get an API key by its  id .  Example  const   apiKey   =   await   api . apiKeys . get ({ id :   foobar-001 });  console . log ( apiKey . fields . description );   Returns  A member exposing the API key fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/api-keys/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create an API key. Optionally provide a specific  id  to use, or let Rebilly generate one.   Example  // first set the properties for the new API key  const   data   =   { \n     description :   My new API key , \n     // the `datetimeFormat` defines how dates will be saved  \n     // and handled by Rebilly for this API key \n     // can be either `iso8601` (default) or `mysql` \n     datetimeFormat :   iso8601  };  // the ID is optional  const   firstKey   =   await   api . apiKeys . create ({ data });  // or you can provide one  const   secondKey   =   await   api . apiKeys . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created API key fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/api-keys/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update an API key by using its  id .   Example  // define values to update  const   data   =   { \n     description :   A better description  };  const   apiKey   =   await   api . apiKeys . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated API key fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/api-keys/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete an API key by using its  id .   Example  const   request   =   await   api . apiKeys . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/bank-accounts/", 
            "text": "Bank Accounts \napi\n.\nbankAccounts\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nBank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of bank accounts. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nbankAccount\n \n=\n \nconsole\n.\nlog\n(\nbankAccount\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of bank accounts.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a bank account by its \nid\n.\n\n\nExample\n\n\nconst\n \nbankAccount\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nbankAccount\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the bank account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a bank account. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nYou can either provide detailed bank account fields or replace them with the \ntoken\n (payment token) field.\n\n\nExample\n\n\n// first set the required properties for the new bank account\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nbankName\n:\n \nMy Fake Financial\n,\n\n    \nroutingNumber\n:\n \n12345678\n,\n\n    \naccountNumber\n:\n \n12345678\n,\n\n    \naccountType\n:\n \nchecking\n,\n\n    \ncustomerId\n:\n \nacme-001\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created bank account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeactivate\n\n\ndeactivate\n({\nid\n}) -\n \n{Member}\n\n\nDeactivate a bank account by using its \nid\n. This will prevent it from being used by the customer. \n\n\nExample\n\n\nconst\n \nbankAccount\n \n=\n \nawait\n \napi\n.\nbankAccounts\n.\ndeactivate\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the bank account status will be updated to reflect the modification\n\n\nconsole\n.\nlog\n(\nbankAccount\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the deactivated bank account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Bank Accounts"
        }, 
        {
            "location": "/reference/resources/bank-accounts/#bank-accounts-apibankaccounts", 
            "text": "Member of  RebillyAPI   Bank Accounts are a type of payment instrument used to collect ACH (echeck) payments, similar to how a payment card would be used to for a credit card payment.", 
            "title": "Bank Accounts api.bankAccounts"
        }, 
        {
            "location": "/reference/resources/bank-accounts/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of bank accounts. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . bankAccounts . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . bankAccounts . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( bankAccount   =   console . log ( bankAccount . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of bank accounts.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/bank-accounts/#get", 
            "text": "get ({ id }) -   {Member}  Get a bank account by its  id .  Example  const   bankAccount   =   await   api . bankAccounts . get ({ id :   foobar-001 });  console . log ( bankAccount . fields . status );   Returns  A member exposing the bank account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/bank-accounts/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a bank account. Optionally provide a specific  id  to use, or let Rebilly generate one.   You can either provide detailed bank account fields or replace them with the  token  (payment token) field.  Example  // first set the required properties for the new bank account  const   data   =   { \n     bankName :   My Fake Financial , \n     routingNumber :   12345678 , \n     accountNumber :   12345678 , \n     accountType :   checking , \n     customerId :   acme-001  };  // the ID is optional  const   firstKey   =   await   api . bankAccounts . create ({ data });  // or you can provide one  const   secondKey   =   await   api . bankAccounts . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created bank account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/bank-accounts/#deactivate", 
            "text": "deactivate ({ id }) -   {Member}  Deactivate a bank account by using its  id . This will prevent it from being used by the customer.   Example  const   bankAccount   =   await   api . bankAccounts . deactivate ({ id :   my-second-key });  // the bank account status will be updated to reflect the modification  console . log ( bankAccount . fields . status );   Returns  A member exposing the deactivated bank account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deactivate"
        }, 
        {
            "location": "/reference/resources/blacklists/", 
            "text": "Blacklists \napi\n.\nblacklists\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nBlacklists are used to manage risk and fraud by aborting an operation if the blacklisted value matches a field related to a customer.  \n\n\nRebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of blacklist items. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nblacklistItem\n \n=\n \nconsole\n.\nlog\n(\nblacklistItem\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of blacklist items.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a blacklist item by its \nid\n.\n\n\nExample\n\n\nconst\n \nblacklistItem\n \n=\n \nawait\n \napi\n.\nblacklists\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nblacklistItem\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the blacklist item fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a blacklist item entry. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nIf you do not provide an expiry time the item will be permanent. \n\n\nThe supported blacklist item types are:\n\n\n\n\npayment-card-id\n \n\n\ncustomer-id\n\n\nemail\n \n\n\nip-address\n \n\n\ncountry\n \n\n\nfingerprint\n \n\n\nbin\n\n\n\n\nExample\n\n\n// first set the required properties for the new blacklist item\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ntype\n:\n \nip-address\n,\n\n    \nvalue\n:\n \n63.118.98.100\n\n\n    \n// optionally provide an `expiredTime` to make\n\n    \n// the item expire and function like a `greylist`\n\n\n    \n// expiredTime: \n2017-09-18T21:50:44Z\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created blacklist item fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a blacklist item by using its \nid\n. This will remove any restrictions on the value of the blacklist item.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nblacklists\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Blacklists"
        }, 
        {
            "location": "/reference/resources/blacklists/#blacklists-apiblacklists", 
            "text": "Member of  RebillyAPI   Blacklists are used to manage risk and fraud by aborting an operation if the blacklisted value matches a field related to a customer.    Rebilly has blacklists of customer Ids, emails, ip addresses, bins and payment cards.  A greylist is just like a blacklist, but with an expiration date.", 
            "title": "Blacklists api.blacklists"
        }, 
        {
            "location": "/reference/resources/blacklists/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of blacklist items. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . blacklists . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . blacklists . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( blacklistItem   =   console . log ( blacklistItem . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of blacklist items.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/blacklists/#get", 
            "text": "get ({ id }) -   {Member}  Get a blacklist item by its  id .  Example  const   blacklistItem   =   await   api . blacklists . get ({ id :   foobar-001 });  console . log ( blacklistItem . fields . status );   Returns  A member exposing the blacklist item fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/blacklists/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a blacklist item entry. Optionally provide a specific  id  to use, or let Rebilly generate one.   If you do not provide an expiry time the item will be permanent.   The supported blacklist item types are:   payment-card-id    customer-id  email    ip-address    country    fingerprint    bin   Example  // first set the required properties for the new blacklist item  const   data   =   { \n     type :   ip-address , \n     value :   63.118.98.100 \n\n     // optionally provide an `expiredTime` to make \n     // the item expire and function like a `greylist` \n\n     // expiredTime:  2017-09-18T21:50:44Z  };  // the ID is optional  const   firstKey   =   await   api . blacklists . create ({ data });  // or you can provide one  const   secondKey   =   await   api . blacklists . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created blacklist item fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/blacklists/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a blacklist item by using its  id . This will remove any restrictions on the value of the blacklist item.    Example  const   request   =   await   api . blacklists . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/checkout-pages/", 
            "text": "Checkout Pages \napi\n.\ncheckoutPages\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nFully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. Each page is attached to a plan and website.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of checkout pages. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncheckoutPage\n \n=\n \nconsole\n.\nlog\n(\ncheckoutPage\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of checkout pages.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a checkout page by its \nid\n.\n\n\nExample\n\n\nconst\n \ncheckoutPage\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ncheckoutPage\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a checkout page for a specific plan and website. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nThe final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's  \ncheckoutPageUri\n and your checkout page's \nuriPath\n.\n\n\nExample: \n\nhttps://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path\n\n\n\n\n\nWarning\n\n\nYou must have at least one plan and one website (with a \ncheckoutPageUri\n defined) before being able to create checkout pages.\n\n\n\n\nExample\n\n\n// first set the required properties for the new checkout page\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nuriPath\n:\n \nmy-first-checkout\n,\n\n    \nname\n:\n \nMain checkout page\n,\n\n    \nplanId\n:\n \nmy-plan-id\n,\n\n    \nwebsiteId\n:\n \nmy-website-id\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a checkout page using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nBest checkout page\n\n\n};\n\n\n\nconst\n \ncheckoutPage\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated checkout page fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a checkout page by using its \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncheckoutPages\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Checkout Pages"
        }, 
        {
            "location": "/reference/resources/checkout-pages/#checkout-pages-apicheckoutpages", 
            "text": "Member of  RebillyAPI   Fully hosted by Rebilly, checkout pages allow your customers to easily complete transactions using your plans without any programming requirements. Each page is attached to a plan and website.", 
            "title": "Checkout Pages api.checkoutPages"
        }, 
        {
            "location": "/reference/resources/checkout-pages/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of checkout pages. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . checkoutPages . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . checkoutPages . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( checkoutPage   =   console . log ( checkoutPage . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of checkout pages.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/checkout-pages/#get", 
            "text": "get ({ id }) -   {Member}  Get a checkout page by its  id .  Example  const   checkoutPage   =   await   api . checkoutPages . get ({ id :   foobar-001 });  console . log ( checkoutPage . fields . status );   Returns  A member exposing the checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/checkout-pages/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a checkout page for a specific plan and website. Optionally provide a specific  id  to use, or let Rebilly generate one.  The final URL of the checkout page will be the combination of Rebilly's domain, followed by the website's   checkoutPageUri  and your checkout page's  uriPath .  Example:  https://checkout.rebilly.com/my-website-checkout-uri/my-page-uri-path   Warning  You must have at least one plan and one website (with a  checkoutPageUri  defined) before being able to create checkout pages.   Example  // first set the required properties for the new checkout page  const   data   =   { \n     uriPath :   my-first-checkout , \n     name :   Main checkout page , \n     planId :   my-plan-id , \n     websiteId :   my-website-id  };  // the ID is optional  const   firstKey   =   await   api . checkoutPages . create ({ data });  // or you can provide one  const   secondKey   =   await   api . checkoutPages . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/checkout-pages/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a checkout page using its  id .  Example  // define the values to update  const   data   =   { \n     name :   Best checkout page  };  const   checkoutPage   =   await   api . checkoutPages . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated checkout page fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/checkout-pages/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a checkout page by using its  id .    Example  const   request   =   await   api . checkoutPages . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/contacts/", 
            "text": "Contacts \napi\n.\ncontacts\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nDefine contact information for your customers. Manage multiple addresses for the same customer.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of contacts. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncontact\n \n=\n \nconsole\n.\nlog\n(\ncontact\n.\nfields\n.\nfirstName\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of contacts.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a contact by its \nid\n.\n\n\nExample\n\n\nconst\n \ncontact\n \n=\n \nawait\n \napi\n.\ncontacts\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ncontact\n.\nfields\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the contact fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of contacts in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a contact for a specific customer. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new contact\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nfirstName\n:\n \nJohn\n,\n\n    \nlastName\n:\n \nDoe\n,\n\n    \nemails\n:\n \n[{\n\n        \nlabel\n:\n \nmain\n,\n\n        \nvalue\n:\n \njohn.doe+test@grr.la\n,\n\n        \nprimary\n:\n \ntrue\n\n    \n}],\n\n    \ncustomerId\n:\n \nfoobar-0001\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstContact\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondContact\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created contact fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a contact using its \nid\n for a specific customer.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nfirstName\n:\n \nJohnny\n,\n\n    \nlastName\n:\n \nBrown\n,\n\n    \nemails\n:\n \n[{\n\n        \nlabel\n:\n \nmain\n,\n\n        \nvalue\n:\n \njohnny+test@grr.la\n,\n\n        \nprimary\n:\n \nfalse\n\n    \n}],\n\n    \ncustomerId\n:\n \nfoobar-0001\n\n\n};\n\n\n\nconst\n \ncontact\n \n=\n \nawait\n \napi\n.\ncontacts\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated contact fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a contact by using its \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncontacts\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Contacts"
        }, 
        {
            "location": "/reference/resources/contacts/#contacts-apicontacts", 
            "text": "Member of  RebillyAPI   Define contact information for your customers. Manage multiple addresses for the same customer.", 
            "title": "Contacts api.contacts"
        }, 
        {
            "location": "/reference/resources/contacts/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of contacts. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . contacts . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . contacts . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( contact   =   console . log ( contact . fields . firstName ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of contacts.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/contacts/#get", 
            "text": "get ({ id }) -   {Member}  Get a contact by its  id .  Example  const   contact   =   await   api . contacts . get ({ id :   foobar-001 });  console . log ( contact . fields . firstName );   Returns  A member exposing the contact fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/contacts/#downloadcsv", 
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of contacts in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . contacts . downloadCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . contacts . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadCSV"
        }, 
        {
            "location": "/reference/resources/contacts/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a contact for a specific customer. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new contact  const   data   =   { \n     firstName :   John , \n     lastName :   Doe , \n     emails :   [{ \n         label :   main , \n         value :   john.doe+test@grr.la , \n         primary :   true \n     }], \n     customerId :   foobar-0001  };  // the ID is optional  const   firstContact   =   await   api . contacts . create ({ data });  // or you can provide one  const   secondContact   =   await   api . contacts . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created contact fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/contacts/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a contact using its  id  for a specific customer.  Example  // define the values to update  const   data   =   { \n     firstName :   Johnny , \n     lastName :   Brown , \n     emails :   [{ \n         label :   main , \n         value :   johnny+test@grr.la , \n         primary :   false \n     }], \n     customerId :   foobar-0001  };  const   contact   =   await   api . contacts . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated contact fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/contacts/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a contact by using its  id .    Example  const   request   =   await   api . contacts . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/coupons/", 
            "text": "Coupons \napi\n.\ncoupons\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of coupons. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncoupon\n \n=\n \nconsole\n.\nlog\n(\ncoupon\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of coupons.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nredemptionCode\n}) -\n \n{Member}\n\n\nGet a coupon by its \nredemptionCode\n.\n\n\nExample\n\n\nconst\n \ncoupon\n \n=\n \nawait\n \napi\n.\ncoupons\n.\nget\n({\nredemptionCode\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ncoupon\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the coupon fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nredemptionCode\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a coupon for a specific plan and website. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the required properties for the new coupon\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \na new coupon\n,\n\n    \nissuedTime\n:\n \n2017-09-19T20:46:44Z\n,\n\n    \ndiscount\n:\n \n{\n\n        \ntype\n:\n \npercent\n,\n\n        \nvalue\n:\n \n12\n\n    \n},\n\n    \nrestrictions\n:\n \n[{\n\n        \ntype\n:\n \ndiscounts-per-redemption\n,\n\n        \nquantity\n:\n \n12\n\n    \n}]\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ncreate\n({\nredemptionCode\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created coupon fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nredemptionCode\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a coupon using its \nredemptionCode\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \na small update\n\n\n};\n\n\n\nconst\n \ncoupon\n \n=\n \nawait\n \napi\n.\ncoupons\n.\nupdate\n({\nredemptionCode\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated coupon fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllRedemptions\n\n\n\n    \n\n        \ngetAllRedemptions\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of coupon redemptions. Each entry will be a member. \n\n\nA coupon redemption represents an instance where a coupon was activated for a customer.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ngetAllRedemptions\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ngetAllRedemptions\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncoupon\n \n=\n \nconsole\n.\nlog\n(\ncoupon\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of coupon redemptions.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRedemption\n\n\ngetRedemption\n({\nid\n}) -\n \n{Member}\n\n\nGet a coupon redemption by its \nid\n.\n\n\nA coupon redemption represents an instance where a coupon was activated for a customer.\n\n\nExample\n\n\nconst\n \nredemption\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ngetRedemption\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nredemption\n.\nfields\n.\nid\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the coupon redemption fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncancelRedemption\n\n\ncancelRedemption\n({\nid\n}) -\n \n{Member}\n\n\nCancel a coupon redemption by its \nid\n.\n\n\nExample\n\n\nconst\n \ncancellation\n \n=\n \nawait\n \napi\n.\ncoupons\n.\ncancelRedemption\n({\nid\n:\n \nfoobar-001\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\ncancellation\n.\nresponse\n.\nstatus\n);\n \n// 201\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nredeem\n\n\nredeem\n({\ndata\n}) -\n \n{Member}\n\n\nRedeem a coupon using its \nredemptionCode\n for a specific customer.\n\n\nExample\n\n\n// build the redemption data\n\n\nconst\n \ndata\n \n=\n \n{\n\n  \nredemptionCode\n:\n \nmy-best-coupon\n,\n\n  \ncustomerId\n:\n \nfoobar-001\n\n\n};\n\n\n\nconst\n \nredemption\n \n=\n \nawait\n \napi\n.\ncoupons\n.\nredeem\n({\ndata\n});\n\n\nconsole\n.\nlog\n(\nredemption\n.\nfields\n.\nid\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the coupon redemption fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nsetExpiry\n\n\nsetExpiry\n({\nredemptionCode\n, \ndata\n}) -\n \n{Member}\n\n\nSet the exiry time of a coupon using its \nredemptionCode\n. Pass \nnull\n as the \nexpiredTime\n to instantly expire the coupon. Once expired the status of the coupon will change to \nexpired\n.\n\n\nExample\n\n\n// build the expiry data\n\n\nconst\n \ndata\n \n=\n \n{\n\n  \nexpiredTime\n:\n \n2017-09-19T20:46:44Z\n\n\n};\n\n\n\nconst\n \ncoupon\n \n=\n \nawait\n \napi\n.\ncoupons\n.\nsetExpiry\n({\nredemptionCode\n:\n \nmy-best-coupon\n,\n \ndata\n});\n\n\nconsole\n.\nlog\n(\nredemption\n.\ncoupon\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the coupon  fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Coupons"
        }, 
        {
            "location": "/reference/resources/coupons/#coupons-apicoupons", 
            "text": "Member of  RebillyAPI   Create permanent, time or usage restricted discount coupons for your customers to apply to invoices, subscriptions and plans.", 
            "title": "Coupons api.coupons"
        }, 
        {
            "location": "/reference/resources/coupons/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt , \n         sort opt \n         filter opt \n        }) ->  {Collection} \n       Get a collection of coupons. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . coupons . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . coupons . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( coupon   =   console . log ( coupon . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of coupons.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/coupons/#get", 
            "text": "get ({ redemptionCode }) -   {Member}  Get a coupon by its  redemptionCode .  Example  const   coupon   =   await   api . coupons . get ({ redemptionCode :   foobar-001 });  console . log ( coupon . fields . status );   Returns  A member exposing the coupon fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/coupons/#create", 
            "text": "create ({ redemptionCode opt ,  data }) -   {Member}  Create a coupon for a specific plan and website. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the required properties for the new coupon  const   data   =   { \n     description :   a new coupon , \n     issuedTime :   2017-09-19T20:46:44Z , \n     discount :   { \n         type :   percent , \n         value :   12 \n     }, \n     restrictions :   [{ \n         type :   discounts-per-redemption , \n         quantity :   12 \n     }]  };  // the ID is optional  const   firstKey   =   await   api . coupons . create ({ data });  // or you can provide one  const   secondKey   =   await   api . coupons . create ({ redemptionCode :   my-second-id ,   data });   Returns  A member exposing the created coupon fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/coupons/#update", 
            "text": "update ({ redemptionCode ,  data }) -   {Member}  Update a coupon using its  redemptionCode .  Example  // define the values to update  const   data   =   { \n     description :   a small update  };  const   coupon   =   await   api . coupons . update ({ redemptionCode :   my-second-id ,   data });   Returns  A member exposing the updated coupon fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/coupons/#getallredemptions", 
            "text": "getAllRedemptions ({\n         limit opt , \n         offset opt , \n         sort opt \n         filter opt \n        }) ->  {Collection} \n       Get a collection of coupon redemptions. Each entry will be a member.   A coupon redemption represents an instance where a coupon was activated for a customer.  Example  // all parameters are optional  const   firstCollection   =   await   api . coupons . getAllRedemptions ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . coupons . getAllRedemptions ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( coupon   =   console . log ( coupon . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of coupon redemptions.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllRedemptions"
        }, 
        {
            "location": "/reference/resources/coupons/#getredemption", 
            "text": "getRedemption ({ id }) -   {Member}  Get a coupon redemption by its  id .  A coupon redemption represents an instance where a coupon was activated for a customer.  Example  const   redemption   =   await   api . coupons . getRedemption ({ id :   foobar-001 });  console . log ( redemption . fields . id );   Returns  A member exposing the coupon redemption fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRedemption"
        }, 
        {
            "location": "/reference/resources/coupons/#cancelredemption", 
            "text": "cancelRedemption ({ id }) -   {Member}  Cancel a coupon redemption by its  id .  Example  const   cancellation   =   await   api . coupons . cancelRedemption ({ id :   foobar-001 });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( cancellation . response . status );   // 201   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "cancelRedemption"
        }, 
        {
            "location": "/reference/resources/coupons/#redeem", 
            "text": "redeem ({ data }) -   {Member}  Redeem a coupon using its  redemptionCode  for a specific customer.  Example  // build the redemption data  const   data   =   { \n   redemptionCode :   my-best-coupon , \n   customerId :   foobar-001  };  const   redemption   =   await   api . coupons . redeem ({ data });  console . log ( redemption . fields . id );   Returns  A member exposing the coupon redemption fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "redeem"
        }, 
        {
            "location": "/reference/resources/coupons/#setexpiry", 
            "text": "setExpiry ({ redemptionCode ,  data }) -   {Member}  Set the exiry time of a coupon using its  redemptionCode . Pass  null  as the  expiredTime  to instantly expire the coupon. Once expired the status of the coupon will change to  expired .  Example  // build the expiry data  const   data   =   { \n   expiredTime :   2017-09-19T20:46:44Z  };  const   coupon   =   await   api . coupons . setExpiry ({ redemptionCode :   my-best-coupon ,   data });  console . log ( redemption . coupon . status );   Returns  A member exposing the coupon  fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "setExpiry"
        }, 
        {
            "location": "/reference/resources/credential-hashes/", 
            "text": "Credential Hashes \napi\n.\ncredentialHashes\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCredential hashes are used to authorize your webhooks or emails in various parts of Rebilly.\n\n\ngetEmailCredential\n\n\ngetEmailCredential\n({\nhash\n}) -\n \n{Member}\n\n\nGet the details of an email credential using the \nhash\n.\n\n\nExample\n\n\nconst\n \ndetails\n \n=\n \nawait\n \napi\n.\ncredentialHashes\n.\ngetEmailCredential\n({\nhash\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ndetails\n.\nfields\n.\nhost\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the email credential details.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetWebhookCredential\n\n\ngetWebhookCredential\n({\nhash\n}) -\n \n{Member}\n\n\nGet the details of a webhook credential using the \nhash\n.\n\n\nExample\n\n\nconst\n \ndetails\n \n=\n \nawait\n \napi\n.\ncredentialHashes\n.\ngetWebhookCredential\n({\nhash\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ndetails\n.\nfields\n.\nhost\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the webhook credential details.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetMailgunCredential\n\n\ngetMailgunCredential\n({\nhash\n}) -\n \n{Member}\n\n\nGet the details of a Mailgun credential using the \nhash\n.\n\n\nExample\n\n\nconst\n \ndetails\n \n=\n \nawait\n \napi\n.\ncredentialHashes\n.\ngetMailgunCredential\n({\nhash\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ndetails\n.\nfields\n.\ndomain\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the Mailgun credential details.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateEmailCredential\n\n\ncreateEmailCredential\n({\ndata\n}) -\n \n{Member}\n\n\nCreate new email credentials to use in the \nevents\n (Rules Engine). \n\n\nSupported \nencryption\n values: \n\n\n\n\nnone\n (default)\n\n\ntls\n\n\nssl\n\n\n\n\nAuthorization Schemes\n\n\nThe \nauth\n object structure is needed to define the authorization credentials for the remote email account.\n\n\n\n    \n\n        \n\n            \nType\n\n            \nFields\n\n        \n\n    \n\n    \n\n        \n\n            \nnone\n\n            \n-\n\n        \n\n        \n\n            \nplain\n\n            \n\n                \nusername\n, \npassword\n\n            \n\n        \n\n        \n\n            \nlogin\n\n        \n\n        \n\n            \ncram-md5\n\n        \n\n    \n\n\n\n\n\n\n\nImmutable Credentials\n\n\nThe authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change.\n\n\n\n\nExample\n\n\n// first set the required properties for the new credential hash\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nhost\n:\n \nfoobar.test.com\n,\n\n    \nport\n:\n \n465\n,\n\n    \nencryption\n:\n \nssl\n,\n\n    \nauth\n:\n \n{\n\n        \ntype\n:\n \nlogin\n,\n\n        \nusername\n:\n \nfoobar\n,\n\n        \npassword\n:\n \nfuubar\n\n    \n}\n\n\n};\n\n\n\nconst\n \ncredential\n \n=\n \nawait\n \napi\n.\ncredentialHashes\n.\ncreateEmailCredential\n({\ndata\n});\n\n\n// use the hash to authenticate your email action in the system events\n\n\nconsole\n.\nlog\n(\ncredential\n.\nfields\n.\nhash\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the created email credential fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateWebhookCredential\n\n\ncreateWebhookCredential\n({\ndata\n}) -\n \n{Member}\n\n\nCreate new webhook credentials to use in the \nevents\n (Rules Engine) or for global webhooks.  \n\n\nAuthorization Schemes\n\n\nThe \nauth\n object structure is needed to define the authorization credentials for the remote webhook host.\n\n\n\n    \n\n        \n\n            \nType\n\n            \nFields\n\n        \n\n    \n\n    \n\n        \n\n            \nnone\n\n            \n-\n\n        \n\n        \n\n            \nbasic\n\n            \n\n                \nusername\n, \npassword\n\n            \n\n        \n\n        \n\n            \ndigest\n\n        \n\n        \n\n            \noauth1\n\n            \n\n                \nconsumerKey\n, \nconsumerSecret\n, \ntoken\n, \ntokenSecret\n\n            \n\n        \n\n    \n\n\n\n\n\n\n\nImmutable Credentials\n\n\nThe authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change.\n\n\n\n\nExample\n\n\n// first set the required properties for the new credential hash\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nhost\n:\n \nfoobar.test.com\n,\n\n    \nauth\n:\n \n{\n\n        \ntype\n:\n \nnone\n\n    \n}\n\n\n};\n\n\n\nconst\n \ncredential\n \n=\n \nawait\n \napi\n.\ncredentialHashes\n.\ncreateWebhookCredential\n({\ndata\n});\n\n\n// use the hash to authenticate your webhook in Rebilly\n\n\nconsole\n.\nlog\n(\ncredential\n.\nfields\n.\nhash\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the created webhook credential fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateMailgunCredential\n\n\ncreateMailgunCredential\n({\ndata\n}) -\n \n{Member}\n\n\nCreate new Mailgun credentials to use in the \nevents\n (Rules Engine).\n\n\n\n\nImmutable Credentials\n\n\nThe details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change.\n\n\n\n\nExample\n\n\n// first set the required properties for the new credential hash\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemailFrom\n:\n \nme@mydomain.com\n,\n \n// sender email\n\n    \napiKey\n:\n \nkey-1234567890\n,\n \n// use your Mailgun API key\n\n    \ndomain\n:\n \nmail.mydomain.com\n \n// Mailgun domain\n\n\n};\n\n\n\nconst\n \ncredential\n \n=\n \nawait\n \napi\n.\ncredentialHashes\n.\ncreateMailgunCredential\n({\ndata\n});\n\n\n// use the hash to authenticate your email action in the rules engine\n\n\nconsole\n.\nlog\n(\ncredential\n.\nfields\n.\nhash\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the created Mailgun credential fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Credential Hashes"
        }, 
        {
            "location": "/reference/resources/credential-hashes/#credential-hashes-apicredentialhashes", 
            "text": "Member of  RebillyAPI   Credential hashes are used to authorize your webhooks or emails in various parts of Rebilly.", 
            "title": "Credential Hashes api.credentialHashes"
        }, 
        {
            "location": "/reference/resources/credential-hashes/#getemailcredential", 
            "text": "getEmailCredential ({ hash }) -   {Member}  Get the details of an email credential using the  hash .  Example  const   details   =   await   api . credentialHashes . getEmailCredential ({ hash :   foobar-001 });  console . log ( details . fields . host );   Returns  A member exposing the email credential details.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getEmailCredential"
        }, 
        {
            "location": "/reference/resources/credential-hashes/#getwebhookcredential", 
            "text": "getWebhookCredential ({ hash }) -   {Member}  Get the details of a webhook credential using the  hash .  Example  const   details   =   await   api . credentialHashes . getWebhookCredential ({ hash :   foobar-001 });  console . log ( details . fields . host );   Returns  A member exposing the webhook credential details.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getWebhookCredential"
        }, 
        {
            "location": "/reference/resources/credential-hashes/#getmailguncredential", 
            "text": "getMailgunCredential ({ hash }) -   {Member}  Get the details of a Mailgun credential using the  hash .  Example  const   details   =   await   api . credentialHashes . getMailgunCredential ({ hash :   foobar-001 });  console . log ( details . fields . domain );   Returns  A member exposing the Mailgun credential details.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getMailgunCredential"
        }, 
        {
            "location": "/reference/resources/credential-hashes/#createemailcredential", 
            "text": "createEmailCredential ({ data }) -   {Member}  Create new email credentials to use in the  events  (Rules Engine).   Supported  encryption  values:    none  (default)  tls  ssl   Authorization Schemes  The  auth  object structure is needed to define the authorization credentials for the remote email account.  \n     \n         \n             Type \n             Fields \n         \n     \n     \n         \n             none \n             - \n         \n         \n             plain \n             \n                 username ,  password \n             \n         \n         \n             login \n         \n         \n             cram-md5 \n         \n        Immutable Credentials  The authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change.   Example  // first set the required properties for the new credential hash  const   data   =   { \n     host :   foobar.test.com , \n     port :   465 , \n     encryption :   ssl , \n     auth :   { \n         type :   login , \n         username :   foobar , \n         password :   fuubar \n     }  };  const   credential   =   await   api . credentialHashes . createEmailCredential ({ data });  // use the hash to authenticate your email action in the system events  console . log ( credential . fields . hash );   Returns  A member exposing the created email credential fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createEmailCredential"
        }, 
        {
            "location": "/reference/resources/credential-hashes/#createwebhookcredential", 
            "text": "createWebhookCredential ({ data }) -   {Member}  Create new webhook credentials to use in the  events  (Rules Engine) or for global webhooks.    Authorization Schemes  The  auth  object structure is needed to define the authorization credentials for the remote webhook host.  \n     \n         \n             Type \n             Fields \n         \n     \n     \n         \n             none \n             - \n         \n         \n             basic \n             \n                 username ,  password \n             \n         \n         \n             digest \n         \n         \n             oauth1 \n             \n                 consumerKey ,  consumerSecret ,  token ,  tokenSecret \n             \n         \n        Immutable Credentials  The authorization details for a credential hash cannot be modified once created. You will have to generate a new credential hash if the authorization values change.   Example  // first set the required properties for the new credential hash  const   data   =   { \n     host :   foobar.test.com , \n     auth :   { \n         type :   none \n     }  };  const   credential   =   await   api . credentialHashes . createWebhookCredential ({ data });  // use the hash to authenticate your webhook in Rebilly  console . log ( credential . fields . hash );   Returns  A member exposing the created webhook credential fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createWebhookCredential"
        }, 
        {
            "location": "/reference/resources/credential-hashes/#createmailguncredential", 
            "text": "createMailgunCredential ({ data }) -   {Member}  Create new Mailgun credentials to use in the  events  (Rules Engine).   Immutable Credentials  The details of a credential hash cannot be modified once created. You will have to generate a new credential hash if the values within change.   Example  // first set the required properties for the new credential hash  const   data   =   { \n     emailFrom :   me@mydomain.com ,   // sender email \n     apiKey :   key-1234567890 ,   // use your Mailgun API key \n     domain :   mail.mydomain.com   // Mailgun domain  };  const   credential   =   await   api . credentialHashes . createMailgunCredential ({ data });  // use the hash to authenticate your email action in the rules engine  console . log ( credential . fields . hash );   Returns  A member exposing the created Mailgun credential fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createMailgunCredential"
        }, 
        {
            "location": "/reference/resources/custom-events/", 
            "text": "Custom Events \napi\n.\ncustomEvents\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule. \n\n\nFor example, a custom event could be used to send you an email before a customer's subscription is about to expire.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of custom events. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncustomEvent\n \n=\n \nconsole\n.\nlog\n(\ncustomEvent\n.\nfields\n.\neventType\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of custom events.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a custom event by its \nid\n.\n\n\nExample\n\n\nconst\n \ncustomEvent\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ncustomEvent\n.\nfields\n.\ntitle\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the custom event fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a custom event derived from a system event with a specific schedule and chronology. The custom event will be queued for integration.\n\n\nOptionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\n\n\nCustom Event Queue\n\n\nWhen created, a new custom event will be queued for integration. This is a \ntemporary state\n while Rebilly processes events. Until the queue is cleared the custom event will not be available for \nget\n or \ngetAll\n requests.\n\n\nUse \ncustomEvents.getScheduled\n to view the details of an event still in the queue.\n\n\n\n\nSupported \neventType\n values: \n\n\n\n\nsubscription-ended\n\n\nsubscription-trial-ended\n\n\nsubscription-renewed\n\n\npayment-card-expired\n\n\ninvoice-past-due\n\n\ninvoice-issued\n\n\ninvoice-voided\n\n\ninvoice-paid\n\n\ninvoice-abandoned\n\n\n\n\n\n\nAPI Spec\n\n\nSee the \nAPI spec\n for detailed information on the values and structure of the properties \nchronology\n and \nscheduleInstruction\n.\n\n\n\n\nExample\n\n\n// first set the required properties for the new custom event\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \neventType\n:\n \nsubscription-ended\n,\n\n    \ntitle\n:\n \nMy first custom event\n,\n\n    \ndescription\n:\n \nMore information\n,\n\n    \nchronology\n:\n \nbefore\n,\n\n    \nscheduleInstruction\n:\n \n{\n\n        \nmethod\n:\n \ndate-interval\n,\n\n        \nduration\n:\n \n1\n,\n\n        \nunit\n:\n \nday\n\n    \n}\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created custom event fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a custom event using its \nid\n.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ndelete\n({\nid\n:\n \nmy-second-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRules\n\n\ngetRules\n({\nid\n}) -\n \n{Member}\n\n\nGet a custom event's rule set by its \nid\n.\n\n\nExample\n\n\nconst\n \nruleset\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetRules\n({\nid\n:\n \nfoobar-001\n});\n\n\n//the rules are contained within the ruleset\n\n\nconsole\n.\nlog\n(\nruleset\n.\nfields\n.\nrules\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the custom event fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateRules\n\n\ncreateRules\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a set of rules for a custom event identified by its \nid\n.\n\n\n\n\nRules Engine\n\n\nThe rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.\n\n\n\n\nExample\n\n\n// define at least one rule\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nrules\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nThe One Rule\n,\n\n            \nstatus\n:\n \nactive\n,\n \n            \nfinal\n:\n \ntrue\n,\n\n            \ncriteria\n:\n \n{},\n \n            \nactions\n:\n \n[\n\n                \n{\n\n                     \nname\n:\n \nblacklist\n,\n\n                     \nstatus\n:\n \nactive\n,\n\n                     \ntype\n:\n \nemail\n,\n\n                     \nttl\n:\n \n789\n\n                \n},\n\n                \n{\n\n                     \nname\n:\n \nstop-subscriptions\n,\n\n                     \nstatus\n:\n \nactive\n\n                \n}\n\n            \n]\n\n        \n}\n\n\n    \n]\n\n\n};\n\n\n\nconst\n \nruleset\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ncreateRules\n({\ndata\n});\n\n\nconsole\n.\nlog\n(\nruleset\n.\nfields\n.\nversion\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the custom event's newly created ruleset.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateRules\n\n\nupdateRules\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the ruleset for a custom event identified by its \nid\n. A custom event can only have one ruleset, but the rules within can be modified or deleted.\n\n\n\n\nRules Engine\n\n\nThe rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.\n\n\n\n\nExample\n\n\n// define the ruleset to override the current values within\n\n\n// the custom event\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nrules\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nThe One Rule\n,\n\n            \nstatus\n:\n \nactive\n,\n \n            \nfinal\n:\n \ntrue\n,\n\n            \ncriteria\n:\n \n{},\n \n            \nactions\n:\n \n[\n\n                \n{\n\n                     \nname\n:\n \nblacklist\n,\n\n                     \nstatus\n:\n \nactive\n,\n\n                     \ntype\n:\n \nemail\n,\n\n                     \nttl\n:\n \n789\n\n                \n},\n\n                \n{\n\n                     \nname\n:\n \nstop-subscriptions\n,\n\n                     \nstatus\n:\n \nactive\n\n                \n}\n\n            \n]\n\n        \n}\n\n\n    \n]\n\n\n};\n\n\n\nconst\n \nruleset\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\nupdateRules\n({\ndata\n});\n\n\n// each time the event\ns ruleset is modified \n\n\n// the version number is incremented\n\n\nconsole\n.\nlog\n(\nruleset\n.\nfields\n.\nversion\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the custom event's updated ruleset.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRulesHistory\n\n\ngetRulesHistory\n({\nid\n, \nlimit\nopt\n, \noffset\nopt\n}) -\n \n{Collection}\n\n\nRetrieve the change history of the set of rules for the selected custom event using its \nid\n. The history is updated each time you change the rules.\n\n\n\n\nVersion History\n\n\nThis method does not return the rulesets for each version. It will only provide you with the time each version was created at. \n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nExample\n\n\n// get the latest 20 versions for this event ID\n\n\nconst\n \nhistory\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetRulesVersionNumber\n({\nid\n:\n \nfoobar-001\n,\n \nlimit\n:\n \n20\n});\n\n\n// each item exposes the version and `createdTime`\n\n\nhistory\n.\nitems\n.\nforEach\n(\nedit\n \n=\n \nconsole\n.\nlog\n(\nedit\n.\nfields\n.\nversion\n))\n\n\n\n\n\nReturns\n\n\nA collection exposing the custom event history.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRulesVersionNumber\n\n\ngetRulesVersionNumber\n({\nid\n, \nversion\n}) -\n \n{Member}\n\n\nRetrieve the version details of the rules for the selected custom event using its \nid\n.\n\n\n\n\nVersion History\n\n\nThis method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use \ncustomEvents.getRulesVersionDetail\n.\n\n\n\n\nExample\n\n\n// get version #2 details for this event ID\n\n\nconst\n \nhistory\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetRulesVersionNumber\n({\nid\n:\n \nfoobar-001\n,\n \nversion\n:\n \n2\n});\n\n\n// the history exposes the version number and its `createdTime`\n\n\nconsole\n.\nlog\n(\nhistory\n.\nfields\n.\ncreatedTime\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the version details.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRulesVersionDetail\n\n\ngetRulesVersionDetail\n({\nid\n, \nversion\n}) -\n \n{Member}\n\n\nRetrieve the ruleset of a specific \nversion\n of the rules for the selected custom event using its \nid\n.\n\n\n\n\nRuleset Version\n\n\nUse this method to retrieve the ruleset of an event at a specific version number.\n\n\n\n\nExample\n\n\n// get version #2 for this event ID\n\n\nconst\n \nversion\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetRulesVersionDetail\n({\nid\n:\n \nfoobar-001\n,\n \nversion\n:\n \n2\n});\n\n\n// the version exposes the ruleset \n\n\nconsole\n.\nlog\n(\nversion\n.\nfields\n.\nrules\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the version fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllScheduled\n\n\ngetAllScheduled\n({\nlimit\nopt\n, \noffset\nopt\n}) -> \n{Collection}\n\n\n\nGet a collection of scheduled custom events. Each entry will be a member.\n\n\n\n\nTemporary State\n\n\nEach time a custom event is created it is inserted in an integration queue. It will temporarily remain in the queue until it is processed by Rebilly, at which point it will no longer be visible as a scheduled event.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetAllScheduled\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetAllScheduled\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncustomEvent\n \n=\n \nconsole\n.\nlog\n(\ncustomEvent\n.\nfields\n.\neventType\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of scheduled custom events.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetScheduled\n\n\ngetScheduled\n({\nid\n}) -\n \n{Member}\n\n\nGet a scheduled custom event by its \nid\n.\n\n\n\n\nTemporary State\n\n\nScheduled custom events are temporarily in the integration queue until Rebilly processes them.\n\n\n\n\nExample\n\n\nconst\n \nscheduledEvent\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ngetScheduled\n({\nid\n:\n \nfoobar-002\n});\n\n\nconsole\n.\nlog\n(\nscheduledEvent\n.\nfields\n.\ntitle\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the scheduled custom event fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeleteScheduled\n\n\ndeleteScheduled\n({\nid\n}) -\n \n{Member}\n\n\nDelete a scheduled custom event by using its \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncustomEvents\n.\ndeleteScheduled\n({\nid\n:\n \nfoobar-002\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Custom Events"
        }, 
        {
            "location": "/reference/resources/custom-events/#custom-events-apicustomevents", 
            "text": "Member of  RebillyAPI   Create custom events to be triggered when certain system events happen in Rebilly using a schedule. This is useful for sending reminders or completing additional actions based on the schedule.   For example, a custom event could be used to send you an email before a customer's subscription is about to expire.", 
            "title": "Custom Events api.customEvents"
        }, 
        {
            "location": "/reference/resources/custom-events/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt , \n         sort opt \n        }) ->  {Collection} \n       Get a collection of custom events. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . customEvents . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . customEvents . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( customEvent   =   console . log ( customEvent . fields . eventType ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .     Returns  A collection of custom events.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/custom-events/#get", 
            "text": "get ({ id }) -   {Member}  Get a custom event by its  id .  Example  const   customEvent   =   await   api . customEvents . get ({ id :   foobar-001 });  console . log ( customEvent . fields . title );   Returns  A member exposing the custom event fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/custom-events/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a custom event derived from a system event with a specific schedule and chronology. The custom event will be queued for integration.  Optionally provide a specific  id  to use, or let Rebilly generate one.   Custom Event Queue  When created, a new custom event will be queued for integration. This is a  temporary state  while Rebilly processes events. Until the queue is cleared the custom event will not be available for  get  or  getAll  requests.  Use  customEvents.getScheduled  to view the details of an event still in the queue.   Supported  eventType  values:    subscription-ended  subscription-trial-ended  subscription-renewed  payment-card-expired  invoice-past-due  invoice-issued  invoice-voided  invoice-paid  invoice-abandoned    API Spec  See the  API spec  for detailed information on the values and structure of the properties  chronology  and  scheduleInstruction .   Example  // first set the required properties for the new custom event  const   data   =   { \n     eventType :   subscription-ended , \n     title :   My first custom event , \n     description :   More information , \n     chronology :   before , \n     scheduleInstruction :   { \n         method :   date-interval , \n         duration :   1 , \n         unit :   day \n     }  };  // the ID is optional  const   firstKey   =   await   api . customEvents . create ({ data });  // or you can provide one  const   secondKey   =   await   api . customEvents . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created custom event fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/custom-events/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a custom event using its  id .  Example  const   request   =   await   api . customEvents . delete ({ id :   my-second-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/custom-events/#getrules", 
            "text": "getRules ({ id }) -   {Member}  Get a custom event's rule set by its  id .  Example  const   ruleset   =   await   api . customEvents . getRules ({ id :   foobar-001 });  //the rules are contained within the ruleset  console . log ( ruleset . fields . rules );   Returns  A member exposing the custom event fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRules"
        }, 
        {
            "location": "/reference/resources/custom-events/#createrules", 
            "text": "createRules ({ id ,  data }) -   {Member}  Create a set of rules for a custom event identified by its  id .   Rules Engine  The rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.   Example  // define at least one rule  const   data   =   { \n     rules :   [ \n         { \n             name :   The One Rule , \n             status :   active ,  \n             final :   true , \n             criteria :   {},  \n             actions :   [ \n                 { \n                      name :   blacklist , \n                      status :   active , \n                      type :   email , \n                      ttl :   789 \n                 }, \n                 { \n                      name :   stop-subscriptions , \n                      status :   active \n                 } \n             ] \n         } \n\n     ]  };  const   ruleset   =   await   api . customEvents . createRules ({ data });  console . log ( ruleset . fields . version );   Returns  A member exposing the custom event's newly created ruleset.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createRules"
        }, 
        {
            "location": "/reference/resources/custom-events/#updaterules", 
            "text": "updateRules ({ id ,  data }) -   {Member}  Update the ruleset for a custom event identified by its  id . A custom event can only have one ruleset, but the rules within can be modified or deleted.   Rules Engine  The rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.   Example  // define the ruleset to override the current values within  // the custom event  const   data   =   { \n     rules :   [ \n         { \n             name :   The One Rule , \n             status :   active ,  \n             final :   true , \n             criteria :   {},  \n             actions :   [ \n                 { \n                      name :   blacklist , \n                      status :   active , \n                      type :   email , \n                      ttl :   789 \n                 }, \n                 { \n                      name :   stop-subscriptions , \n                      status :   active \n                 } \n             ] \n         } \n\n     ]  };  const   ruleset   =   await   api . customEvents . updateRules ({ data });  // each time the event s ruleset is modified   // the version number is incremented  console . log ( ruleset . fields . version );   Returns  A member exposing the custom event's updated ruleset.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateRules"
        }, 
        {
            "location": "/reference/resources/custom-events/#getruleshistory", 
            "text": "getRulesHistory ({ id ,  limit opt ,  offset opt }) -   {Collection}  Retrieve the change history of the set of rules for the selected custom event using its  id . The history is updated each time you change the rules.   Version History  This method does not return the rulesets for each version. It will only provide you with the time each version was created at.    Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Example  // get the latest 20 versions for this event ID  const   history   =   await   api . customEvents . getRulesVersionNumber ({ id :   foobar-001 ,   limit :   20 });  // each item exposes the version and `createdTime`  history . items . forEach ( edit   =   console . log ( edit . fields . version ))   Returns  A collection exposing the custom event history.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRulesHistory"
        }, 
        {
            "location": "/reference/resources/custom-events/#getrulesversionnumber", 
            "text": "getRulesVersionNumber ({ id ,  version }) -   {Member}  Retrieve the version details of the rules for the selected custom event using its  id .   Version History  This method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use  customEvents.getRulesVersionDetail .   Example  // get version #2 details for this event ID  const   history   =   await   api . customEvents . getRulesVersionNumber ({ id :   foobar-001 ,   version :   2 });  // the history exposes the version number and its `createdTime`  console . log ( history . fields . createdTime );   Returns  A member exposing the version details.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRulesVersionNumber"
        }, 
        {
            "location": "/reference/resources/custom-events/#getrulesversiondetail", 
            "text": "getRulesVersionDetail ({ id ,  version }) -   {Member}  Retrieve the ruleset of a specific  version  of the rules for the selected custom event using its  id .   Ruleset Version  Use this method to retrieve the ruleset of an event at a specific version number.   Example  // get version #2 for this event ID  const   version   =   await   api . customEvents . getRulesVersionDetail ({ id :   foobar-001 ,   version :   2 });  // the version exposes the ruleset   console . log ( version . fields . rules );   Returns  A member exposing the version fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRulesVersionDetail"
        }, 
        {
            "location": "/reference/resources/custom-events/#getallscheduled", 
            "text": "getAllScheduled ({ limit opt ,  offset opt }) ->  {Collection}  Get a collection of scheduled custom events. Each entry will be a member.   Temporary State  Each time a custom event is created it is inserted in an integration queue. It will temporarily remain in the queue until it is processed by Rebilly, at which point it will no longer be visible as a scheduled event.   Example  // all parameters are optional  const   firstCollection   =   await   api . customEvents . getAllScheduled ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . customEvents . getAllScheduled ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( customEvent   =   console . log ( customEvent . fields . eventType ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of scheduled custom events.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllScheduled"
        }, 
        {
            "location": "/reference/resources/custom-events/#getscheduled", 
            "text": "getScheduled ({ id }) -   {Member}  Get a scheduled custom event by its  id .   Temporary State  Scheduled custom events are temporarily in the integration queue until Rebilly processes them.   Example  const   scheduledEvent   =   await   api . customEvents . getScheduled ({ id :   foobar-002 });  console . log ( scheduledEvent . fields . title );   Returns  A member exposing the scheduled custom event fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getScheduled"
        }, 
        {
            "location": "/reference/resources/custom-events/#deletescheduled", 
            "text": "deleteScheduled ({ id }) -   {Member}  Delete a scheduled custom event by using its  id .    Example  const   request   =   await   api . customEvents . deleteScheduled ({ id :   foobar-002 });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deleteScheduled"
        }, 
        {
            "location": "/reference/resources/custom-fields/", 
            "text": "Custom Fields \napi\n.\ncustomFields\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCustom fields can be added to various entities to allow you to store additional data on your customers.\n\n\ngetAll\n\n\ngetAll\n({\nresource\n, \nlimit\nopt\n, \noffset\nopt\n}) -> \n{Collection}\n\n\n\nGet a collection of custom fields for a specific \nresource\n. Each entry will be a member.\n\n\nExample\n\n\n// all parameters except `resource` are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncustomFields\n.\ngetAll\n({\nresource\n:\n \ncustomers\n});\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nresource\n:\n \ncustomers\n,\n \nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncustomFields\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncustomField\n \n=\n \nconsole\n.\nlog\n(\ncustomField\n.\nfields\n.\ndescription\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresource\n\n\nstring\n\n\n-\n\n\nThe resource under which the custom fields were created. Allowed values: \ncustomers\n, \npayment-cards\n, \nsubscriptions\n, \ntransactions\n, \nwebsites\n, \ncontacts\n, \nproducts\n.\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of custom fields.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nresource\n, \nname\n}) -\n \n{Member}\n\n\nGet a custom field by its \nname\n for a specific \nresource\n.\n\n\nAllowed \nresource\n values:\n\n\n\n\ncustomers\n\n\npayment-cards\n\n\nsubscriptions\n\n\ntransactions\n\n\nwebsites\n\n\ncontacts\n\n\nproducts\n\n\n\n\nExample\n\n\nconst\n \ncustomField\n \n=\n \nawait\n \napi\n.\ncustomFields\n.\nget\n({\nresource\n:\n \ncustomers\n,\n \nname\n:\n \ndob\n});\n\n\nconsole\n.\nlog\n(\ncustomField\n.\nfields\n.\ndescription\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the custom field fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nresource\n, \nname\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a custom field for a specific \nresource\n. \n\n\n\n\nAPI Spec\n\n\nSee the \nAPI spec\n for details on how to build the data payload for each custom field type.\n\n\n\n\nExample\n\n\n// first set the properties for the new custom field\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nDate of Birth\n,\n\n    \ntype\n:\n \ndate\n,\n\n    \ndescription\n:\n \n`The customer\ns date of birth`\n\n\n};\n\n\n\n// define the entire payload\n\n\nconst\n \nparams\n \n=\n \n{\nresource\n:\n \ncustomers\n,\n \nname\n:\n \ndob\n,\n \ndata\n};\n\n\nconst\n \ncustomField\n \n=\n \nawait\n \napi\n.\ncustomFields\n.\ncreate\n(\nparams\n);\n\n\n\n// you can verify if the custom field is used\n\n\nconsole\n.\nlog\n(\ncustomField\n.\nfields\n.\nisUsed\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the created custom field fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nresource\n, \nname\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a custom field for a specific \nresource\n using its \nname\n. \n\n\n\n\nAPI Spec\n\n\nSee the \nAPI spec\n for details on how to build the data payload for each custom field type.\n\n\n\n\nExample\n\n\n// first set the properties for the custom field\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \n`The customer\ns DOB`\n\n\n};\n\n\n\n// define the entire payload\n\n\nconst\n \nparams\n \n=\n \n{\nresource\n:\n \ncustomers\n,\n \nname\n:\n \ndob\n,\n \ndata\n};\n\n\nconst\n \ncustomField\n \n=\n \nawait\n \napi\n.\ncustomFields\n.\nupdate\n(\nparams\n);\n\n\n\n// you can verify if the custom field is used\n\n\nconsole\n.\nlog\n(\ncustomField\n.\nfields\n.\nisUsed\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the updated custom field fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nresource\n, \nname\n}) -\n \n{Member}\n\n\nDelete a custom field for a \nresource\n using its \nname\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncustomFields\n.\ndelete\n({\nresource\n:\n \ncustomers\n,\n \nname\n:\n \n`dob`\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Custom Fields"
        }, 
        {
            "location": "/reference/resources/custom-fields/#custom-fields-apicustomfields", 
            "text": "Member of  RebillyAPI   Custom fields can be added to various entities to allow you to store additional data on your customers.", 
            "title": "Custom Fields api.customFields"
        }, 
        {
            "location": "/reference/resources/custom-fields/#getall", 
            "text": "getAll ({ resource ,  limit opt ,  offset opt }) ->  {Collection}  Get a collection of custom fields for a specific  resource . Each entry will be a member.  Example  // all parameters except `resource` are optional  const   firstCollection   =   await   api . customFields . getAll ({ resource :   customers });  // alternatively you can specify one or more of them  const   params   =   { resource :   customers ,   limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . customFields . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( customField   =   console . log ( customField . fields . description ));   Parameters     Name  Type  Attribute  Description      resource  string  -  The resource under which the custom fields were created. Allowed values:  customers ,  payment-cards ,  subscriptions ,  transactions ,  websites ,  contacts ,  products .    limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of custom fields.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/custom-fields/#get", 
            "text": "get ({ resource ,  name }) -   {Member}  Get a custom field by its  name  for a specific  resource .  Allowed  resource  values:   customers  payment-cards  subscriptions  transactions  websites  contacts  products   Example  const   customField   =   await   api . customFields . get ({ resource :   customers ,   name :   dob });  console . log ( customField . fields . description );   Returns  A member exposing the custom field fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/custom-fields/#create", 
            "text": "create ({ resource ,  name ,  data }) -   {Member}  Create a custom field for a specific  resource .    API Spec  See the  API spec  for details on how to build the data payload for each custom field type.   Example  // first set the properties for the new custom field  const   data   =   { \n     name :   Date of Birth , \n     type :   date , \n     description :   `The customer s date of birth`  };  // define the entire payload  const   params   =   { resource :   customers ,   name :   dob ,   data };  const   customField   =   await   api . customFields . create ( params );  // you can verify if the custom field is used  console . log ( customField . fields . isUsed );   Returns  A member exposing the created custom field fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/custom-fields/#update", 
            "text": "update ({ resource ,  name ,  data }) -   {Member}  Update a custom field for a specific  resource  using its  name .    API Spec  See the  API spec  for details on how to build the data payload for each custom field type.   Example  // first set the properties for the custom field  const   data   =   { \n     description :   `The customer s DOB`  };  // define the entire payload  const   params   =   { resource :   customers ,   name :   dob ,   data };  const   customField   =   await   api . customFields . update ( params );  // you can verify if the custom field is used  console . log ( customField . fields . isUsed );   Returns  A member exposing the updated custom field fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/custom-fields/#delete", 
            "text": "delete ({ resource ,  name }) -   {Member}  Delete a custom field for a  resource  using its  name .    Example  const   request   =   await   api . customFields . delete ({ resource :   customers ,   name :   `dob` });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/customers/", 
            "text": "Customers \napi\n.\ncustomers\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCustomers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of customers. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncustomer\n \n=\n \nconsole\n.\nlog\n(\ncustomer\n.\nfields\n.\nprimaryAddress\n.\nfirstName\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of customers.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a customer by its \nid\n.\n\n\n\n\nContact Object\n\n\nCustomers have contact objects attached to them (\nprimaryAddress\n). The contact information contains the customer's name and address.\n\n\n\n\nExample\n\n\nconst\n \ncustomer\n \n=\n \nawait\n \napi\n.\ncustomers\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ncustomer\n.\nfields\n.\nprimaryAddress\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the customer fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of customers in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a customer. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new customer\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nprimaryAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohn\n,\n\n        \nlastName\n:\n \nDoe\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohn.doe+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n}\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstCustomer\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondCustomer\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created customer fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a customer using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nprimaryAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohnny\n,\n\n        \nlastName\n:\n \nDoe\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohnny.doe+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n}\n\n\n};\n\n\n\nconst\n \ncustomer\n \n=\n \nawait\n \napi\n.\ncustomers\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated customer fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetLeadSource\n\n\ngetLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nGet a lead source by using the customer \nid\n.\n\n\nExample\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\nconsole\n.\nlog\n(\nlead\n.\nfields\n.\naffiliate\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateLeadSource\n\n\ncreateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a lead source for a customer \nid\n. A customer can only have one lead source present at a time.\n\n\n\n\nCustomer Tracking\n\n\nThe lead source entity lets you track your customers throughout your different campaigns.\n\n\n\n\nExample\n\n\n// first set the properties for the new lead source\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \nsubscriptions\n,\n\n    \ncontent\n:\n \nsubscription business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ncreateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created customer lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateLeadSource\n\n\nupdateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the lead source for a customer \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \nsubscriptions\n,\n\n    \ncontent\n:\n \nsubscription business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ncustomers\n.\nupdateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the update customer lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeleteLeadSource\n\n\ndeleteLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nDelete a lead source using the customer \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ndeleteLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Customers"
        }, 
        {
            "location": "/reference/resources/customers/#customers-apicustomers", 
            "text": "Member of  RebillyAPI   Customers are associated with payment cards, subscriptions, invoices and other miscellaneous relationship models.", 
            "title": "Customers api.customers"
        }, 
        {
            "location": "/reference/resources/customers/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of customers. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . customers . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . customers . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( customer   =   console . log ( customer . fields . primaryAddress . firstName ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of customers.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/customers/#get", 
            "text": "get ({ id }) -   {Member}  Get a customer by its  id .   Contact Object  Customers have contact objects attached to them ( primaryAddress ). The contact information contains the customer's name and address.   Example  const   customer   =   await   api . customers . get ({ id :   foobar-001 });  console . log ( customer . fields . primaryAddress . firstName );   Returns  A member exposing the customer fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/customers/#downloadcsv", 
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of customers in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . customers . downloadCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . customers . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadCSV"
        }, 
        {
            "location": "/reference/resources/customers/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a customer. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new customer  const   data   =   { \n     primaryAddress :   { \n         firstName :   John , \n         lastName :   Doe , \n         emails :   [{ \n             label :   main , \n             value :   john.doe+test@grr.la , \n             primary :   true \n         }], \n     }  };  // the ID is optional  const   firstCustomer   =   await   api . customers . create ({ data });  // or you can provide one  const   secondCustomer   =   await   api . customers . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created customer fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/customers/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a customer using its  id .  Example  // define the values to update  const   data   =   { \n     primaryAddress :   { \n         firstName :   Johnny , \n         lastName :   Doe , \n         emails :   [{ \n             label :   main , \n             value :   johnny.doe+test@grr.la , \n             primary :   true \n         }], \n     }  };  const   customer   =   await   api . customers . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated customer fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/customers/#getleadsource", 
            "text": "getLeadSource ({ id }) -   {Member}  Get a lead source by using the customer  id .  Example  const   lead   =   await   api . customers . getLeadSource ({ id :   my-second-id });  console . log ( lead . fields . affiliate );   Returns  A member exposing the lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getLeadSource"
        }, 
        {
            "location": "/reference/resources/customers/#createleadsource", 
            "text": "createLeadSource ({ id ,  data }) -   {Member}  Create a lead source for a customer  id . A customer can only have one lead source present at a time.   Customer Tracking  The lead source entity lets you track your customers throughout your different campaigns.   Example  // first set the properties for the new lead source  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   subscriptions , \n     content :   subscription business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . customers . createLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the created customer lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createLeadSource"
        }, 
        {
            "location": "/reference/resources/customers/#updateleadsource", 
            "text": "updateLeadSource ({ id ,  data }) -   {Member}  Update the lead source for a customer  id .  Example  // define the values to update  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   subscriptions , \n     content :   subscription business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . customers . updateLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the update customer lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateLeadSource"
        }, 
        {
            "location": "/reference/resources/customers/#deleteleadsource", 
            "text": "deleteLeadSource ({ id }) -   {Member}  Delete a lead source using the customer  id .    Example  const   request   =   await   api . customers . deleteLeadSource ({ id :   my-second-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deleteLeadSource"
        }, 
        {
            "location": "/reference/resources/customer-authentication/", 
            "text": "Customer Authentication \napi\n.\ncustomerAuthentication\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nAuthenticate your customers within your Rebilly integration. This feature is useful for creating self-service portals for your customers. \n\n\ngetAuthOptions\n\n\ngetAuthOptions\n() -\n \n{Member}\n\n\nGet global customer authentication options.\n\n\nExample\n\n\nconst\n \noptions\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetAuthOptions\n();\n\n\nconsole\n.\nlog\n(\noptions\n.\nfields\n.\ncredentialTtl\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the authentication options fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateAuthOptions\n\n\nupdateAuthOptions\n({\ndata\n}) -\n \n{Member}\n\n\nUpdate the global customer authentication options. You can modify the TTL (in seconds) for the credentials, authorization tokens and reset password tokens, or the password regular expression pattern use for validation.\n\n\nExample\n\n\n// first set the properties for the authentication options\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \npasswordPattern\n:\n \nnull\n,\n\n    \ncredentialTtl\n:\n \n10\n,\n\n    \nauthTokenTtl\n:\n \n20\n,\n\n    \nresetTokenTtl\n:\n \n30\n\n\n};\n\n\n\nconst\n \noptions\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\nupdateAuthOptions\n({\ndata\n});\n\n\nconsole\n.\nlog\n(\noptions\n.\nfields\n.\ncredentialTtl\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the updated custom field fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllAuthTokens\n\n\ngetAllAuthTokens\n({\nlimit\nopt\n, \noffset\nopt\n}) -> \n{Collection}\n\n\n\nGet a collection of authentication tokens created for your customers. Each entry will be a member.\n\n\n\n\nToken Generation\n\n\nTokens are generated by the \ncustomerAuthentication.login\n method.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetAllAuthTokens\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetAllAuthTokens\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ntoken\n \n=\n \nconsole\n.\nlog\n(\ntoken\n.\nfields\n.\nusername\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of authentication tokens.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nverify\n\n\nverify\n({\ntoken\n}) -\n \n{Member}\n\n\nVerify the validity of an authentication token. If valid the response will contain all the token fields.\n\n\nExample\n\n\nconst\n \ntoken\n \n=\n \ndcf6e32f2daee457a1db8ce5fdfbe200\n;\n\n\nconst\n \nverification\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\nverify\n({\ntoken\n});\n\n\n// if the the token is valid then no error will be thrown\n\n\nconsole\n.\nlog\n(\nverification\n.\nreponse\n.\nstatus\n)\n \n// 200\n\n\n\n\n\nReturns\n\n\nA member exposing the token fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nlogin\n\n\nlogin\n({\ndata\n}) -\n \n{Member}\n\n\nLogin a customer into Rebilly and retrieve the authentication token being generated. You must first \ncreate a credential\n for a customer.\n\n\nOptionally you can provide the expired time of the session using \nexpiredTime\n as a \ndatetime\n in the future.\n\n\n\n\nSimilar Account Method\n\n\nThis method is similar to \naccount.signIn\n but unlike it, it requires to be authorized in the API and will not return a JWT session token.\n\n\n\n\n\n\nSee \ncustomerAuthentication.createCredential\n\n\nSee \ncustomerAuthentication.logout\n\n\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nusername\n:\n \nfoobar\n,\n\n    \npassword\n:\n \nfuubar\n\n\n    \n// optionally you can define an `expiredTime` to \n\n    \n// limit the duration of the session token\n\n\n    \n//expiredTime: \n2017-09-18T19:17:39Z\n\n\n};\n\n\nconst\n \nsession\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\nlogin\n({\ndata\n});\n\n\nconsole\n.\nlog\n(\nsession\n.\nfields\n.\ntoken\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the token fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nlogout\n\n\nlogout\n({\ntoken\n}) -\n \n{Member}\n\n\nLogout the customer and invalidate his session token.\n\n\nExample\n\n\nconst\n \ntoken\n \n=\n \ndcf6e32f2daee457a1db8ce5fdfbe200\n;\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\nlogout\n({\ntoken\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the \nresponse\n property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllCredentials\n\n\ngetAllCredentials\n({\nlimit\nopt\n, \noffset\nopt\n}) -> \n{Collection}\n\n\n\nGet a collection of customer credentials. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetAllCredentials\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetAllCredentials\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ncredential\n \n=\n \nconsole\n.\nlog\n(\ncredential\n.\nfields\n.\ncustomerId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of customer credentials.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetCredential\n\n\ngetCredential\n({\nid\n}) -\n \n{Member}\n\n\nGet a customer credential by its \nid\n.\n\n\nExample\n\n\nconst\n \ncredential\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetCredential\n({\nid\n:\n \nmy-first-id\n});\n\n\nconsole\n.\nlog\n(\ncredential\n.\nfields\n.\ncustomerId\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the customer credential fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateCredential\n\n\ncreateCredential\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a credential for a customer. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\n\n\nCustomer Login\n\n\nUse credentials to allow your customers to login to Rebilly directly through your website and self-serve.\n\n\n\n\nExample\n\n\n// first set the required properties for the new credential\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nusername\n:\n \nfoobar\n,\n\n    \npassword\n:\n \nfuubar\n,\n\n    \ncustomerId\n:\n \nfoobar-0001\n\n\n    \n// optionally you can define an `expiredTime` to \n\n    \n// limit the duration of the credential\n\n\n    \n//expiredTime: \n2017-09-18T19:17:39Z\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstCredential\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ncreateCredential\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondCredential\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ncreateCredential\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created customer credential fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateCredential\n\n\nupdateCredential\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a credential for a customer using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nusername\n:\n \nfoobar\n,\n\n    \npassword\n:\n \nhell0\n\n\n};\n\n\n\nconst\n \nsecondCredential\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\nupdateCredential\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the update customer credential fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeleteCredential\n\n\ndeleteCredential\n({\nid\n}) -\n \n{Member}\n\n\nDelete a customer credential by using its \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ndeleteCredential\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllResetPasswordTokens\n\n\ngetAllResetPasswordTokens\n({\nlimit\nopt\n, \noffset\nopt\n}) -> \n{Collection}\n\n\n\nGet a collection of password reset tokens. Each entry will be a member.\n\n\n\n\nToken ID\n\n\nThe \ntoken\n field of each member is used as the \nid\n for this entity.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetAllResetPasswordTokens\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetAllResetPasswordTokens\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ntoken\n \n=\n \nconsole\n.\nlog\n(\ntoken\n.\nfields\n.\ntoken\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of password reset tokens.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetResetPasswordToken\n\n\ngetResetPasswordToken\n({\nid\n}) -\n \n{Member}\n\n\nGet a password reset token by its \nid\n.\n\n\nExample\n\n\nconst\n \ntoken\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ngetResetPasswordToken\n({\nid\n:\n \nmy-first-id\n});\n\n\nconsole\n.\nlog\n(\ntoken\n.\nfields\n.\ncredential\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the password reset token fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateResetPasswordToken\n\n\ncreateResetPasswordToken\n({\ndata\n}) -\n \n{Member}\n\n\nCreate a password reset token for a specific \ncredential\n. Reset tokens are not created for a customer but for a credential attached to it.\n\n\n\n\nToken ID\n\n\nThe \ntoken\n field is used as the \nid\n for this entity.\n\n\n\n\n\n\nSee \ncustomerAuthentication.createCredential\n\n\n\n\nExample\n\n\n// first set the required properties for the new credential\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nusername\n:\n \nfoobar\n,\n\n    \npassword\n:\n \nfuubar\n,\n\n    \n// the `credential` expects \n\n    \n// the customer credential\ns ID\n\n    \ncredential\n:\n \nfoobar-0001\n\n\n    \n// optionally you can define an `expiredTime` to \n\n    \n// limit the duration of the reset token\n\n\n    \n//expiredTime: \n2017-09-18T19:17:39Z\n\n\n};\n\n\n\nconst\n \nresetToken\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ncreateResetPasswordToken\n({\ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created password reset token fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeleteResetPasswordToken\n\n\ndeleteResetPasswordToken\n({\nid\n}) -\n \n{Member}\n\n\nDelete a password reset token by using its \nid\n. \n\n\n\n\nToken ID\n\n\nThe \ntoken\n field is used as the \nid\n for this entity.\n\n\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ncustomerAuthentication\n.\ndeleteResetPasswordToken\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Customer Authentication"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#customer-authentication-apicustomerauthentication", 
            "text": "Member of  RebillyAPI   Authenticate your customers within your Rebilly integration. This feature is useful for creating self-service portals for your customers.", 
            "title": "Customer Authentication api.customerAuthentication"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#getauthoptions", 
            "text": "getAuthOptions () -   {Member}  Get global customer authentication options.  Example  const   options   =   await   api . customerAuthentication . getAuthOptions ();  console . log ( options . fields . credentialTtl );   Returns  A member exposing the authentication options fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAuthOptions"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#updateauthoptions", 
            "text": "updateAuthOptions ({ data }) -   {Member}  Update the global customer authentication options. You can modify the TTL (in seconds) for the credentials, authorization tokens and reset password tokens, or the password regular expression pattern use for validation.  Example  // first set the properties for the authentication options  const   data   =   { \n     passwordPattern :   null , \n     credentialTtl :   10 , \n     authTokenTtl :   20 , \n     resetTokenTtl :   30  };  const   options   =   await   api . customerAuthentication . updateAuthOptions ({ data });  console . log ( options . fields . credentialTtl );   Returns  A member exposing the updated custom field fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateAuthOptions"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#getallauthtokens", 
            "text": "getAllAuthTokens ({ limit opt ,  offset opt }) ->  {Collection}  Get a collection of authentication tokens created for your customers. Each entry will be a member.   Token Generation  Tokens are generated by the  customerAuthentication.login  method.   Example  // all parameters are optional  const   firstCollection   =   await   api . customerAuthentication . getAllAuthTokens ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . customerAuthentication . getAllAuthTokens ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( token   =   console . log ( token . fields . username ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of authentication tokens.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllAuthTokens"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#verify", 
            "text": "verify ({ token }) -   {Member}  Verify the validity of an authentication token. If valid the response will contain all the token fields.  Example  const   token   =   dcf6e32f2daee457a1db8ce5fdfbe200 ;  const   verification   =   await   api . customerAuthentication . verify ({ token });  // if the the token is valid then no error will be thrown  console . log ( verification . reponse . status )   // 200   Returns  A member exposing the token fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "verify"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#login", 
            "text": "login ({ data }) -   {Member}  Login a customer into Rebilly and retrieve the authentication token being generated. You must first  create a credential  for a customer.  Optionally you can provide the expired time of the session using  expiredTime  as a  datetime  in the future.   Similar Account Method  This method is similar to  account.signIn  but unlike it, it requires to be authorized in the API and will not return a JWT session token.    See  customerAuthentication.createCredential  See  customerAuthentication.logout   Example  const   data   =   { \n     username :   foobar , \n     password :   fuubar \n\n     // optionally you can define an `expiredTime` to  \n     // limit the duration of the session token \n\n     //expiredTime:  2017-09-18T19:17:39Z  };  const   session   =   await   api . customerAuthentication . login ({ data });  console . log ( session . fields . token );   Returns  A member exposing the token fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "login"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#logout", 
            "text": "logout ({ token }) -   {Member}  Logout the customer and invalidate his session token.  Example  const   token   =   dcf6e32f2daee457a1db8ce5fdfbe200 ;  const   request   =   await   api . customerAuthentication . logout ({ token });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the  response  property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "logout"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#getallcredentials", 
            "text": "getAllCredentials ({ limit opt ,  offset opt }) ->  {Collection}  Get a collection of customer credentials. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . customerAuthentication . getAllCredentials ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . customerAuthentication . getAllCredentials ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( credential   =   console . log ( credential . fields . customerId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of customer credentials.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllCredentials"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#getcredential", 
            "text": "getCredential ({ id }) -   {Member}  Get a customer credential by its  id .  Example  const   credential   =   await   api . customerAuthentication . getCredential ({ id :   my-first-id });  console . log ( credential . fields . customerId );   Returns  A member exposing the customer credential fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getCredential"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#createcredential", 
            "text": "createCredential ({ id opt ,  data }) -   {Member}  Create a credential for a customer. Optionally provide a specific  id  to use, or let Rebilly generate one.   Customer Login  Use credentials to allow your customers to login to Rebilly directly through your website and self-serve.   Example  // first set the required properties for the new credential  const   data   =   { \n     username :   foobar , \n     password :   fuubar , \n     customerId :   foobar-0001 \n\n     // optionally you can define an `expiredTime` to  \n     // limit the duration of the credential \n\n     //expiredTime:  2017-09-18T19:17:39Z  };  // the ID is optional  const   firstCredential   =   await   api . customerAuthentication . createCredential ({ data });  // or you can provide one  const   secondCredential   =   await   api . customerAuthentication . createCredential ({ id :   my-second-id ,   data });   Returns  A member exposing the created customer credential fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createCredential"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#updatecredential", 
            "text": "updateCredential ({ id ,  data }) -   {Member}  Update a credential for a customer using its  id .  Example  // define the values to update  const   data   =   { \n     username :   foobar , \n     password :   hell0  };  const   secondCredential   =   await   api . customerAuthentication . updateCredential ({ id :   my-second-id ,   data });   Returns  A member exposing the update customer credential fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateCredential"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#deletecredential", 
            "text": "deleteCredential ({ id }) -   {Member}  Delete a customer credential by using its  id .    Example  const   request   =   await   api . customerAuthentication . deleteCredential ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deleteCredential"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#getallresetpasswordtokens", 
            "text": "getAllResetPasswordTokens ({ limit opt ,  offset opt }) ->  {Collection}  Get a collection of password reset tokens. Each entry will be a member.   Token ID  The  token  field of each member is used as the  id  for this entity.   Example  // all parameters are optional  const   firstCollection   =   await   api . customerAuthentication . getAllResetPasswordTokens ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . customerAuthentication . getAllResetPasswordTokens ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( token   =   console . log ( token . fields . token ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of password reset tokens.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllResetPasswordTokens"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#getresetpasswordtoken", 
            "text": "getResetPasswordToken ({ id }) -   {Member}  Get a password reset token by its  id .  Example  const   token   =   await   api . customerAuthentication . getResetPasswordToken ({ id :   my-first-id });  console . log ( token . fields . credential );   Returns  A member exposing the password reset token fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getResetPasswordToken"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#createresetpasswordtoken", 
            "text": "createResetPasswordToken ({ data }) -   {Member}  Create a password reset token for a specific  credential . Reset tokens are not created for a customer but for a credential attached to it.   Token ID  The  token  field is used as the  id  for this entity.    See  customerAuthentication.createCredential   Example  // first set the required properties for the new credential  const   data   =   { \n     username :   foobar , \n     password :   fuubar , \n     // the `credential` expects  \n     // the customer credential s ID \n     credential :   foobar-0001 \n\n     // optionally you can define an `expiredTime` to  \n     // limit the duration of the reset token \n\n     //expiredTime:  2017-09-18T19:17:39Z  };  const   resetToken   =   await   api . customerAuthentication . createResetPasswordToken ({ data });   Returns  A member exposing the created password reset token fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createResetPasswordToken"
        }, 
        {
            "location": "/reference/resources/customer-authentication/#deleteresetpasswordtoken", 
            "text": "deleteResetPasswordToken ({ id }) -   {Member}  Delete a password reset token by using its  id .    Token ID  The  token  field is used as the  id  for this entity.   Example  const   request   =   await   api . customerAuthentication . deleteResetPasswordToken ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deleteResetPasswordToken"
        }, 
        {
            "location": "/reference/resources/disputes/", 
            "text": "Disputes \napi\n.\ndisputes\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nManage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of disputes. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ndisputes\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ndisputes\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ndispute\n \n=\n \nconsole\n.\nlog\n(\ndispute\n.\nfields\n.\ntransactionId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of disputes.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a dispute by its \nid\n.\n\n\nExample\n\n\nconst\n \ndispute\n \n=\n \nawait\n \napi\n.\ndisputes\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ndispute\n.\nfields\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the dispute fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of disputes in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\ndisputes\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\ndisputes\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a dispute for a specific transaction. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new dispute\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ntransactionId\n:\n \nmy-transaction-id\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n5\n,\n\n    \nreasonCode\n:\n \n1000\n,\n\n    \ntype\n:\n \nfirst-chargeback\n,\n\n    \nstatus\n:\n \nresponse-needed\n,\n\n    \nacquirerReferenceNumber\n:\n \n143543\n,\n\n    \npostedTime\n:\n \n2017-09-19T20:46:48Z\n,\n\n    \ndeadlineTime\n:\n \n2017-09-19T20:46:48Z\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstdispute\n \n=\n \nawait\n \napi\n.\ndisputes\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondDispute\n \n=\n \nawait\n \napi\n.\ndisputes\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created dispute fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a dispute using its \nid\n for a specific transaction.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ntransactionId\n:\n \nmy-other-transaction-id\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n5\n,\n\n    \nreasonCode\n:\n \n1000\n,\n\n    \ntype\n:\n \nfirst-chargeback\n,\n\n    \nstatus\n:\n \nresponse-needed\n,\n\n    \nacquirerReferenceNumber\n:\n \n143543\n,\n\n    \npostedTime\n:\n \n2017-09-19T20:46:48Z\n,\n\n    \ndeadlineTime\n:\n \n2017-09-19T20:46:48Z\n\n\n};\n\n\n\nconst\n \ndispute\n \n=\n \nawait\n \napi\n.\ndisputes\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated dispute fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllMatchedRules\n\n\ngetAllMatchedRules\n({\nid\n}) -\n \n{Collection}\n\n\nGet all previously matched event rules for a dispute \nid\n. The rules are defined within system events and are part of the Rules Engine.\n\n\n\n\nSee \nevents\n\n\n\n\nExample\n\n\nconst\n \nrules\n \n=\n \nawait\n \napi\n.\ndisputes\n.\ngetAllMatchedRules\n({\nid\n:\n \nfoobar-001\n});\n\n\n\n\n\nReturns\n\n\nA collection of matched rules for this dispute.\n\n\nType \nCollection", 
            "title": "Disputes"
        }, 
        {
            "location": "/reference/resources/disputes/#disputes-apidisputes", 
            "text": "Member of  RebillyAPI   Manage disputes for your customers' transactions and track the progress of existing disputes internally. It is a term that collectively means chargebacks and retrievals in Rebilly.", 
            "title": "Disputes api.disputes"
        }, 
        {
            "location": "/reference/resources/disputes/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of disputes. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . disputes . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . disputes . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( dispute   =   console . log ( dispute . fields . transactionId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of disputes.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/disputes/#get", 
            "text": "get ({ id }) -   {Member}  Get a dispute by its  id .  Example  const   dispute   =   await   api . disputes . get ({ id :   foobar-001 });  console . log ( dispute . fields . firstName );   Returns  A member exposing the dispute fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/disputes/#downloadcsv", 
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of disputes in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . disputes . downloadCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . disputes . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadCSV"
        }, 
        {
            "location": "/reference/resources/disputes/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a dispute for a specific transaction. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new dispute  const   data   =   { \n     transactionId :   my-transaction-id , \n     currency :   USD , \n     amount :   5 , \n     reasonCode :   1000 , \n     type :   first-chargeback , \n     status :   response-needed , \n     acquirerReferenceNumber :   143543 , \n     postedTime :   2017-09-19T20:46:48Z , \n     deadlineTime :   2017-09-19T20:46:48Z  };  // the ID is optional  const   firstdispute   =   await   api . disputes . create ({ data });  // or you can provide one  const   secondDispute   =   await   api . disputes . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created dispute fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/disputes/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a dispute using its  id  for a specific transaction.  Example  // define the values to update  const   data   =   { \n     transactionId :   my-other-transaction-id , \n     currency :   USD , \n     amount :   5 , \n     reasonCode :   1000 , \n     type :   first-chargeback , \n     status :   response-needed , \n     acquirerReferenceNumber :   143543 , \n     postedTime :   2017-09-19T20:46:48Z , \n     deadlineTime :   2017-09-19T20:46:48Z  };  const   dispute   =   await   api . disputes . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated dispute fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/disputes/#getallmatchedrules", 
            "text": "getAllMatchedRules ({ id }) -   {Collection}  Get all previously matched event rules for a dispute  id . The rules are defined within system events and are part of the Rules Engine.   See  events   Example  const   rules   =   await   api . disputes . getAllMatchedRules ({ id :   foobar-001 });   Returns  A collection of matched rules for this dispute.  Type  Collection", 
            "title": "getAllMatchedRules"
        }, 
        {
            "location": "/reference/resources/events/", 
            "text": "Events \napi\n.\nevents\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed.\n\n\nThe actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation.\n\n\n\n\nSee Rules Engine.\n\n\n\n\ngetAll\n\n\ngetAllScheduled\n({\nlimit\nopt\n, \noffset\nopt\n}) -> \n{Collection}\n\n\n\nGet a collection of events. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nevents\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nevents\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nevent\n \n=\n \nconsole\n.\nlog\n(\nevent\n.\nfields\n.\neventType\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of events.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\neventType\n}) -\n \n{Member}\n\n\nGet an event's details by its \neventType\n. This will not return the rules but will include the rule count.\n\n\nAllowed \neventType\n values: \n\n\n\n\ndispute-created\n\n\ngateway-account-request\n\n\ntransaction-processed\n\n\nsubscription-canceled\n\n\nsubscription-created\n\n\nsubscription-renewed\n\n\npayment-card-expired\n\n\npayment-declined\n\n\ntransaction-process-requested\n\n\nrisk-score-changed\n\n\n\n\nExample\n\n\nconst\n \neventDetails\n \n=\n \nawait\n \napi\n.\nevents\n.\nget\n({\neventType\n:\n \ngateway-account-created\n});\n\n\nconsole\n.\nlog\n(\neventDetails\n.\nfields\n.\nrulesCount\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the event fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRules\n\n\ngetRules\n({\neventType\n}) -\n \n{Member}\n\n\nGet the ruleset for a specific \neventType\n.\n\n\nAllowed \neventType\n values: \n\n\n\n\ndispute-created\n\n\ngateway-account-request\n\n\ntransaction-processed\n\n\nsubscription-canceled\n\n\nsubscription-created\n\n\nsubscription-renewed\n\n\npayment-card-expired\n\n\npayment-declined\n\n\ntransaction-process-requested\n\n\nrisk-score-changed\n\n\n\n\nExample\n\n\nconst\n \nevent\n \n=\n \nawait\n \napi\n.\nevents\n.\ngetRules\n({\neventType\n:\n \ntransaction-processed\n});\n\n\nconsole\n.\nlog\n(\nevent\n.\nfields\n.\nrules\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the event fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateRules\n\n\ncreateRules\n({\neventType\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a set of rules for an event identified by its \neventType\n.\n\n\n\n\nRules Engine\n\n\nThe rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.\n\n\n\n\nExample\n\n\n// define at least one rule\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nrules\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nThe One Rule\n,\n\n            \nstatus\n:\n \nactive\n,\n \n            \nfinal\n:\n \ntrue\n,\n\n            \ncriteria\n:\n \n{},\n \n            \nactions\n:\n \n[\n\n                \n{\n\n                     \nname\n:\n \nblacklist\n,\n\n                     \nstatus\n:\n \nactive\n,\n\n                     \ntype\n:\n \nemail\n,\n\n                     \nttl\n:\n \n789\n\n                \n},\n\n                \n{\n\n                     \nname\n:\n \nstop-subscriptions\n,\n\n                     \nstatus\n:\n \nactive\n\n                \n}\n\n            \n]\n\n        \n}\n\n\n    \n]\n\n\n};\n\n\n\nconst\n \nruleset\n \n=\n \nawait\n \napi\n.\nevents\n.\ncreateRules\n({\neventType\n:\n \nrisk-score-changed\n,\n \ndata\n});\n\n\nconsole\n.\nlog\n(\nruleset\n.\nfields\n.\nversion\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the event's newly created ruleset.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateRules\n\n\nupdateRules\n({\neventType\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the ruleset for an event identified by its \neventType\n. An event can only have one ruleset, but the rules within can be modified or deleted.\n\n\n\n\nRules Engine\n\n\nThe rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.\n\n\n\n\nExample\n\n\n// define the ruleset to override the current values within\n\n\n// the event\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nrules\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nThe One Rule\n,\n\n            \nstatus\n:\n \nactive\n,\n \n            \nfinal\n:\n \ntrue\n,\n\n            \ncriteria\n:\n \n{},\n \n            \nactions\n:\n \n[\n\n                \n{\n\n                     \nname\n:\n \nblacklist\n,\n\n                     \nstatus\n:\n \nactive\n,\n\n                     \ntype\n:\n \nemail\n,\n\n                     \nttl\n:\n \n789\n\n                \n},\n\n                \n{\n\n                     \nname\n:\n \nstop-subscriptions\n,\n\n                     \nstatus\n:\n \nactive\n\n                \n}\n\n            \n]\n\n        \n}\n\n\n    \n]\n\n\n};\n\n\n\nconst\n \nruleset\n \n=\n \nawait\n \napi\n.\nevents\n.\nupdateRules\n({\neventType\n:\n \nrisk-score-changed\n,\n \ndata\n});\n\n\n// each time the event\ns ruleset is modified \n\n\n// the version number is incremented\n\n\nconsole\n.\nlog\n(\nruleset\n.\nfields\n.\nversion\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the event's updated ruleset.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRulesHistory\n\n\ngetRulesHistory\n({\neventType\n, \nlimit\nopt\n, \noffset\nopt\n}) -\n \n{Collection}\n\n\nRetrieve the change history of the set of rules for the selected event using its \neventType\n. The history is updated each time you change the rules.\n\n\n\n\nVersion History\n\n\nThis method does not return the rulesets for each version. It will only provide you with the time each version was created at. \n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nExample\n\n\n// get the latest 20 versions for this event ID\n\n\nconst\n \nhistory\n \n=\n \nawait\n \napi\n.\nevents\n.\ngetRulesVersionNumber\n({\neventType\n:\n \nrisk-score-changed\n,\n \nlimit\n:\n \n20\n});\n\n\n// each item exposes the version and `createdTime`\n\n\nhistory\n.\nitems\n.\nforEach\n(\nedit\n \n=\n \nconsole\n.\nlog\n(\nedit\n.\nfields\n.\nversion\n));\n\n\n\n\n\nReturns\n\n\nA collection exposing the event history.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRulesVersionNumber\n\n\ngetRulesVersionNumber\n({\neventType\n, \nversion\n}) -\n \n{Member}\n\n\nRetrieve the version details of the rules for the selected event using its \neventType\n.\n\n\n\n\nVersion History\n\n\nThis method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use \ncustomEvents.getRulesVersionDetail\n.\n\n\n\n\nExample\n\n\n// get version #2 details for this event ID\n\n\nconst\n \nhistory\n \n=\n \nawait\n \napi\n.\nevents\n.\ngetRulesVersionNumber\n({\neventType\n:\n \nrisk-score-changed\n,\n \nversion\n:\n \n2\n});\n\n\n// the history exposes the version number and its `createdTime`\n\n\nconsole\n.\nlog\n(\nhistory\n.\nfields\n.\ncreatedTime\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the version details.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRulesVersionDetail\n\n\ngetRulesVersionDetail\n({\neventType\n, \nversion\n}) -\n \n{Member}\n\n\nRetrieve the ruleset of a specific \nversion\n of the rules for the selected event using its \neventType\n.\n\n\n\n\nRuleset Version\n\n\nUse this method to retrieve the ruleset of an event at a specific version number.\n\n\n\n\nExample\n\n\n// get version #2 for this event ID\n\n\nconst\n \nversion\n \n=\n \nawait\n \napi\n.\nevents\n.\ngetRulesVersionDetail\n({\neventType\n:\n \nrisk-score-changed\n,\n \nversion\n:\n \n2\n});\n\n\n// the version exposes the ruleset \n\n\nconsole\n.\nlog\n(\nversion\n.\nfields\n.\nrules\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the version fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Events"
        }, 
        {
            "location": "/reference/resources/events/#events-apievents", 
            "text": "Member of  RebillyAPI   Create and manage rules attached to system events. When an event happens, it triggers the evaluation of conditions (that you set up), in order from top to bottom. If the condition is met, the corresponding actions are executed. The conditions continue to be checked until either all of the conditions have been executed, or a special \"stop\" action is executed.  The actions vary depending on the event triggered. From automatic gateway account selection to sending emails the Rules Engine will help you attain your business objectives through automation.   See Rules Engine.", 
            "title": "Events api.events"
        }, 
        {
            "location": "/reference/resources/events/#getall", 
            "text": "getAllScheduled ({ limit opt ,  offset opt }) ->  {Collection}  Get a collection of events. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . events . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . events . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( event   =   console . log ( event . fields . eventType ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of events.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/events/#get", 
            "text": "get ({ eventType }) -   {Member}  Get an event's details by its  eventType . This will not return the rules but will include the rule count.  Allowed  eventType  values:    dispute-created  gateway-account-request  transaction-processed  subscription-canceled  subscription-created  subscription-renewed  payment-card-expired  payment-declined  transaction-process-requested  risk-score-changed   Example  const   eventDetails   =   await   api . events . get ({ eventType :   gateway-account-created });  console . log ( eventDetails . fields . rulesCount );   Returns  A member exposing the event fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/events/#getrules", 
            "text": "getRules ({ eventType }) -   {Member}  Get the ruleset for a specific  eventType .  Allowed  eventType  values:    dispute-created  gateway-account-request  transaction-processed  subscription-canceled  subscription-created  subscription-renewed  payment-card-expired  payment-declined  transaction-process-requested  risk-score-changed   Example  const   event   =   await   api . events . getRules ({ eventType :   transaction-processed });  console . log ( event . fields . rules );   Returns  A member exposing the event fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRules"
        }, 
        {
            "location": "/reference/resources/events/#createrules", 
            "text": "createRules ({ eventType ,  data }) -   {Member}  Create a set of rules for an event identified by its  eventType .   Rules Engine  The rules you can create follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.   Example  // define at least one rule  const   data   =   { \n     rules :   [ \n         { \n             name :   The One Rule , \n             status :   active ,  \n             final :   true , \n             criteria :   {},  \n             actions :   [ \n                 { \n                      name :   blacklist , \n                      status :   active , \n                      type :   email , \n                      ttl :   789 \n                 }, \n                 { \n                      name :   stop-subscriptions , \n                      status :   active \n                 } \n             ] \n         } \n\n     ]  };  const   ruleset   =   await   api . events . createRules ({ eventType :   risk-score-changed ,   data });  console . log ( ruleset . fields . version );   Returns  A member exposing the event's newly created ruleset.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createRules"
        }, 
        {
            "location": "/reference/resources/events/#updaterules", 
            "text": "updateRules ({ eventType ,  data }) -   {Member}  Update the ruleset for an event identified by its  eventType . An event can only have one ruleset, but the rules within can be modified or deleted.   Rules Engine  The rules you can modify follow a specific set of restrictions based on the event type and other factors. See the Rules Engine guide for detailed information.   Example  // define the ruleset to override the current values within  // the event  const   data   =   { \n     rules :   [ \n         { \n             name :   The One Rule , \n             status :   active ,  \n             final :   true , \n             criteria :   {},  \n             actions :   [ \n                 { \n                      name :   blacklist , \n                      status :   active , \n                      type :   email , \n                      ttl :   789 \n                 }, \n                 { \n                      name :   stop-subscriptions , \n                      status :   active \n                 } \n             ] \n         } \n\n     ]  };  const   ruleset   =   await   api . events . updateRules ({ eventType :   risk-score-changed ,   data });  // each time the event s ruleset is modified   // the version number is incremented  console . log ( ruleset . fields . version );   Returns  A member exposing the event's updated ruleset.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateRules"
        }, 
        {
            "location": "/reference/resources/events/#getruleshistory", 
            "text": "getRulesHistory ({ eventType ,  limit opt ,  offset opt }) -   {Collection}  Retrieve the change history of the set of rules for the selected event using its  eventType . The history is updated each time you change the rules.   Version History  This method does not return the rulesets for each version. It will only provide you with the time each version was created at.    Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Example  // get the latest 20 versions for this event ID  const   history   =   await   api . events . getRulesVersionNumber ({ eventType :   risk-score-changed ,   limit :   20 });  // each item exposes the version and `createdTime`  history . items . forEach ( edit   =   console . log ( edit . fields . version ));   Returns  A collection exposing the event history.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRulesHistory"
        }, 
        {
            "location": "/reference/resources/events/#getrulesversionnumber", 
            "text": "getRulesVersionNumber ({ eventType ,  version }) -   {Member}  Retrieve the version details of the rules for the selected event using its  eventType .   Version History  This method does not return the rulesets for the requested version. It will only provide you with the time the version was created at. If you need to view the ruleset attached to this version use  customEvents.getRulesVersionDetail .   Example  // get version #2 details for this event ID  const   history   =   await   api . events . getRulesVersionNumber ({ eventType :   risk-score-changed ,   version :   2 });  // the history exposes the version number and its `createdTime`  console . log ( history . fields . createdTime );   Returns  A member exposing the version details.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRulesVersionNumber"
        }, 
        {
            "location": "/reference/resources/events/#getrulesversiondetail", 
            "text": "getRulesVersionDetail ({ eventType ,  version }) -   {Member}  Retrieve the ruleset of a specific  version  of the rules for the selected event using its  eventType .   Ruleset Version  Use this method to retrieve the ruleset of an event at a specific version number.   Example  // get version #2 for this event ID  const   version   =   await   api . events . getRulesVersionDetail ({ eventType :   risk-score-changed ,   version :   2 });  // the version exposes the ruleset   console . log ( version . fields . rules );   Returns  A member exposing the version fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRulesVersionDetail"
        }, 
        {
            "location": "/reference/resources/files/", 
            "text": "Files \napi\n.\nfiles\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nUpload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of files. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nfiles\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nfiles\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nfile\n \n=\n \nconsole\n.\nlog\n(\nfile\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of files.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a file by its \nid\n. This does not return the file content, only the details.\n\n\n\n\nSee \nfiles.download\n\n\n\n\nExample\n\n\nconst\n \nfile\n \n=\n \nawait\n \napi\n.\nfiles\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nfile\n.\nfields\n.\nname\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the file fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupload\n\n\nupload\n({\nfileObject\n}) -\n \n{Member}\n\n\nUpload a file for later use. Provide a native \nFile object\n as the payload.\n\n\n\n\nAttachment\n\n\nA new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource.\n\n\n\n\nExample\n\n\n// using a FileList to fetch a file\n\n\nconst\n \nfileObject\n \n=\n \nfileList\n[\n0\n];\n\n\n\nconst\n \naddedFile\n \n=\n \nawait\n \napi\n.\nfiles\n.\nupload\n({\nfileObject\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created file fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a file using its \nid\n. This method cannot be used to overwrite the file data, only its details.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nnew file name\n,\n\n    \ndescription\n:\n \na fitting description\n,\n\n    \ntags\n:\n \n[\noriginal\n]\n\n\n};\n\n\n\nconst\n \nfile\n \n=\n \nawait\n \napi\n.\nfiles\n.\nupdate\n({\nid\n:\n \nmy-file-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated file fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nuploadAndUpdate\n\n\nupload\n({\nfileObject\n, \ndata\nopt\n}) -\n \n{Member}\n\n\nUpload a file for later use and include its description and tags. Provide a native \nFile object\n as the payload.\n\n\nUnlike \nfiles.upload\n, this method allows you to define the description or tags at the same time.\n\n\n\n\nAttachment\n\n\nA new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource.\n\n\n\n\nExample\n\n\n// using a FileList to fetch a file\n\n\nconst\n \nfileObject\n \n=\n \nfileList\n[\n0\n];\n\n\n\n// define file data\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ndescription\n:\n \nmy new file\n,\n\n    \ntags\n:\n \n[\noriginal\n]\n\n\n};\n\n\n\nconst\n \naddedFile\n \n=\n \nawait\n \napi\n.\nfiles\n.\nuploadAndUpdate\n({\nfileObject\n,\n \ndata\n});\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata.description\n\n\nstring\n\n\nOptional\n\n\nThe file's description.\n\n\n\n\n\n\ndata.tags\n\n\nnumber\n\n\nOptional\n\n\nAn array of tags (strings) used to categorize the file.\n\n\n\n\n\n\n\n\nReturns\n\n\nA member exposing the created file fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a file without attachments by using its \nid\n.  \n\n\n\n\nAttachments\n\n\nYou cannot delete a file that still has active attachments to resources within Rebilly. Use \nfiles.detachAndDelete\n instead for that use-case.\n\n\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nfiles\n.\ndelete\n({\nid\n:\n \nmy-file-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndetachAndDelete\n\n\ndetachAndDelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a file and its related resource attachments by using its \nid\n. Use this method to remove the file completely from all resources at once.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nfiles\n.\ndetachAndDelete\n({\nid\n:\n \nmy-file-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownload\n\n\ndownload\n({\nid\n}) -\n \n{File}\n\n\nDownload the content of a file as an \nArrayBuffer\n.\n\n\nExample\n\n\nconst\n \nfile\n \n=\n \nawait\n \napi\n.\nfiles\n.\ndownload\n({\nid\n:\n \nmy-file-id\n});\n\n\n\n// access the file ArrayBuffer to view the content \n\n\nconsole\n.\nlog\n(\nfile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the data content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllAttachments\n\n\n\n    \n\n        \ngetAllAttachments\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of attachments. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nfiles\n.\ngetAllAttachments\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nfiles\n.\ngetAllAttachments\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nattachment\n \n=\n \nconsole\n.\nlog\n(\nattachment\n.\nfields\n.\nrelatedType\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of files.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAttachment\n\n\ngetAttachment\n({\nid\n}) -\n \n{Member}\n\n\nGet the details of an attachment by its \nid\n.\n\n\n\n\nAttachments and Files\n\n\nA file can be attached to a resource. This allows you to logically link files and entities within Rebilly as needed. \nFor example you can upload external invoices and attach them to a customer.\n\n\n\n\n\n\nSee \nfiles.attach\n\n\n\n\nExample\n\n\nconst\n \nattachment\n \n=\n \nawait\n \napi\n.\nfiles\n.\ngetAttachment\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nattachment\n.\nfields\n.\nrelatedType\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the file fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nattach\n\n\nattach\n({\ndata\n}) -\n \n{Member}\n\n\nAttach a file to a resource. To create an attachment you must provide the resource \nrelatedType\n (e.g. customers), the \nrelatedId\n of an instance of that type (e.g. a customer's id), and finally the \nfileId\n of the file previously uploaded.\n\n\nAllowed \nrelatedType\n values: \n\n\n\n\ncustomer\n\n\ndispute\n\n\ninvoice\n\n\nnote\n\n\npayment\n\n\nplan\n\n\nproduct\n\n\nsubscription\n\n\ntransaction\n\n\n\n\n\n\nShared File\n\n\nA file can be attached to more than one resource at a time.\n\n\n\n\nExample\n\n\n// define the attachment\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \n// previously uploaded file ID\n\n    \nfileId\n:\n \nmy-file-id\n,\n\n    \nrelatedType\n:\n \ncustomer\n,\n\n    \nrelatedId\n:\n \nmy-customer-id\n,\n\n    \nname\n:\n \nan attachment\n,\n\n    \ndescription\n:\n \n`the customer\ns file`\n\n\n};\n\n\n\nconst\n \nattachment\n \n=\n \nawait\n \napi\n.\nfiles\n.\nattach\n({\ndata\n});\n\n\nconsole\n.\nlog\n(\nattachment\n.\nfields\n.\nid\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the attachment fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateAttachment\n\n\nupdateAttachment\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate an attachment by its \nid\n.\n\n\n\n\nSee \nfiles.attach\n\n\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nrelatedType\n:\n \ncustomer\n,\n\n    \nrelatedId\n:\n \nmy-customer-id\n,\n\n    \nname\n:\n \nan attachment\n,\n\n    \ndescription\n:\n \n`the customer\ns file`\n\n\n};\n\n\n\nconst\n \nattachment\n \n=\n \nawait\n \napi\n.\nfiles\n.\nupdateAttachment\n({\nid\n:\n \nfoobar-001\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the attachment fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndetach\n\n\ndetach\n({\nid\n}) -\n \n{Member}\n\n\nDetach a file from a resource using the attachment's \nid\n.\n\n\n\n\nDetaching versus deleting\n\n\nDetaching a file does not delete it even if the file has no other attachments within Rebilly. Use \nfiles.delete\n or \nfiles.detachAndDelete\n for those use-cases. \n\n\n\n\n\n\nSee \nfiles.attach\n\n\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nfiles\n.\ndetach\n({\nid\n:\n \nmy-attachment-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nA member exposing the attachment fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Files"
        }, 
        {
            "location": "/reference/resources/files/#files-apifiles", 
            "text": "Member of  RebillyAPI   Upload and attach files to specific Resources. This feature is useful for adding important information related to customers and their life cycle within your business.", 
            "title": "Files api.files"
        }, 
        {
            "location": "/reference/resources/files/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of files. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . files . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . files . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( file   =   console . log ( file . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of files.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/files/#get", 
            "text": "get ({ id }) -   {Member}  Get a file by its  id . This does not return the file content, only the details.   See  files.download   Example  const   file   =   await   api . files . get ({ id :   foobar-001 });  console . log ( file . fields . name );   Returns  A member exposing the file fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/files/#upload", 
            "text": "upload ({ fileObject }) -   {Member}  Upload a file for later use. Provide a native  File object  as the payload.   Attachment  A new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource.   Example  // using a FileList to fetch a file  const   fileObject   =   fileList [ 0 ];  const   addedFile   =   await   api . files . upload ({ fileObject });   Returns  A member exposing the created file fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "upload"
        }, 
        {
            "location": "/reference/resources/files/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a file using its  id . This method cannot be used to overwrite the file data, only its details.  Example  // define the values to update  const   data   =   { \n     name :   new file name , \n     description :   a fitting description , \n     tags :   [ original ]  };  const   file   =   await   api . files . update ({ id :   my-file-id ,   data });   Returns  A member exposing the updated file fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/files/#uploadandupdate", 
            "text": "upload ({ fileObject ,  data opt }) -   {Member}  Upload a file for later use and include its description and tags. Provide a native  File object  as the payload.  Unlike  files.upload , this method allows you to define the description or tags at the same time.   Attachment  A new file is not attached to any resource. You must do an additional API request to attach the file to a particular resource.   Example  // using a FileList to fetch a file  const   fileObject   =   fileList [ 0 ];  // define file data  const   data   =   { \n     description :   my new file , \n     tags :   [ original ]  };  const   addedFile   =   await   api . files . uploadAndUpdate ({ fileObject ,   data });   Parameters     Name  Type  Attribute  Description      data.description  string  Optional  The file's description.    data.tags  number  Optional  An array of tags (strings) used to categorize the file.     Returns  A member exposing the created file fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "uploadAndUpdate"
        }, 
        {
            "location": "/reference/resources/files/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a file without attachments by using its  id .     Attachments  You cannot delete a file that still has active attachments to resources within Rebilly. Use  files.detachAndDelete  instead for that use-case.   Example  const   request   =   await   api . files . delete ({ id :   my-file-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/files/#detachanddelete", 
            "text": "detachAndDelete ({ id }) -   {Member}  Delete a file and its related resource attachments by using its  id . Use this method to remove the file completely from all resources at once.  Example  const   request   =   await   api . files . detachAndDelete ({ id :   my-file-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "detachAndDelete"
        }, 
        {
            "location": "/reference/resources/files/#download", 
            "text": "download ({ id }) -   {File}  Download the content of a file as an  ArrayBuffer .  Example  const   file   =   await   api . files . download ({ id :   my-file-id });  // access the file ArrayBuffer to view the content   console . log ( file . data );    Tip  You can generate a binary file to download from the data content directly in the browser, or save it locally via the file system in Node.   Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "download"
        }, 
        {
            "location": "/reference/resources/files/#getallattachments", 
            "text": "getAllAttachments \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of attachments. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . files . getAllAttachments ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . files . getAllAttachments ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( attachment   =   console . log ( attachment . fields . relatedType ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of files.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllAttachments"
        }, 
        {
            "location": "/reference/resources/files/#getattachment", 
            "text": "getAttachment ({ id }) -   {Member}  Get the details of an attachment by its  id .   Attachments and Files  A file can be attached to a resource. This allows you to logically link files and entities within Rebilly as needed. \nFor example you can upload external invoices and attach them to a customer.    See  files.attach   Example  const   attachment   =   await   api . files . getAttachment ({ id :   foobar-001 });  console . log ( attachment . fields . relatedType );   Returns  A member exposing the file fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAttachment"
        }, 
        {
            "location": "/reference/resources/files/#attach", 
            "text": "attach ({ data }) -   {Member}  Attach a file to a resource. To create an attachment you must provide the resource  relatedType  (e.g. customers), the  relatedId  of an instance of that type (e.g. a customer's id), and finally the  fileId  of the file previously uploaded.  Allowed  relatedType  values:    customer  dispute  invoice  note  payment  plan  product  subscription  transaction    Shared File  A file can be attached to more than one resource at a time.   Example  // define the attachment  const   data   =   { \n     // previously uploaded file ID \n     fileId :   my-file-id , \n     relatedType :   customer , \n     relatedId :   my-customer-id , \n     name :   an attachment , \n     description :   `the customer s file`  };  const   attachment   =   await   api . files . attach ({ data });  console . log ( attachment . fields . id );   Returns  A member exposing the attachment fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "attach"
        }, 
        {
            "location": "/reference/resources/files/#updateattachment", 
            "text": "updateAttachment ({ id ,  data }) -   {Member}  Update an attachment by its  id .   See  files.attach   Example  // define the values to update  const   data   =   { \n     relatedType :   customer , \n     relatedId :   my-customer-id , \n     name :   an attachment , \n     description :   `the customer s file`  };  const   attachment   =   await   api . files . updateAttachment ({ id :   foobar-001 ,   data });   Returns  A member exposing the attachment fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateAttachment"
        }, 
        {
            "location": "/reference/resources/files/#detach", 
            "text": "detach ({ id }) -   {Member}  Detach a file from a resource using the attachment's  id .   Detaching versus deleting  Detaching a file does not delete it even if the file has no other attachments within Rebilly. Use  files.delete  or  files.detachAndDelete  for those use-cases.     See  files.attach   Example  const   request   =   await   api . files . detach ({ id :   my-attachment-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  A member exposing the attachment fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "detach"
        }, 
        {
            "location": "/reference/resources/gateway-accounts/", 
            "text": "Gateway Accounts \napi\n.\ngatewayAccounts\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use.\n\n\nA payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of gateway accounts. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ngatewayAccounts\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ngatewayAccounts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ngatewayAccount\n \n=\n \nconsole\n.\nlog\n(\ngatewayAccount\n.\nfields\n.\ngatewayName\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of gateway accounts.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a gateway account by its \nid\n.\n\n\nExample\n\n\nconst\n \ngatewayAccount\n \n=\n \nawait\n \napi\n.\ngatewayAccounts\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ngatewayAccount\n.\nfields\n.\ngatewayName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the gateway account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a gateway account. Optionally provide a specific \nid\n to use, or let Rebilly generate one. Each gateway has custom configuration options that are provided using the \ngatewayConfig\n property. See the \nAPI spec\n for more details.\n\n\nAn additional gateway named \nRebillyProcessor\n is available in the sandbox mode and will allow you to test particular scenarios with set credit card numbers. See the \nSandbox vs Live Mode\n help article for details.\n\n\nExample\n\n\n// first set the required properties for the new gateway account\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ngatewayName\n:\n \nRebillyProcessor\n,\n\n    \nacquirerName\n:\n \nRebillyProcessor\n,\n\n    \nmerchantCategoryCode\n:\n \n0\n,\n\n    \nacceptedCurrencies\n:\n \n[\nUSD\n],\n\n    \nmethod\n:\n \npayment-card\n,\n\n    \npaymentCardSchemes\n:\n \n[\n\n        \nVisa\n,\n \nMasterCard\n,\n \nAmerican Express\n,\n \n        \nDiscover\n,\n \nDiners Club\n,\n \nJCB\n\n    \n],\n\n    \n// the gatewayConfig varies for each gateway name, \n\n    \n// see the API spec for details\n\n    \ngatewayConfig\n:\n \n{},\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstKey\n \n=\n \nawait\n \napi\n.\ngatewayAccounts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\ngatewayAccounts\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created gateway account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a gateway account using its \nid\n. This method will \npatch\n the existing values, allowing you to skip gateway credentials.\n\n\nExample\n\n\n// build data with only the fields you wish to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \npaymentCardSchemes\n:\n \n[\n\n            \nVisa\n,\n \nMasterCard\n,\n \nAmerican Express\n\n    \n]\n\n\n};\n\n\n\nconst\n \nsecondKey\n \n=\n \nawait\n \napi\n.\ngatewayAccounts\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated gateway account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a gateway account by using its \nid\n. You cannot delete a gateway account that has been used previously.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ngatewayAccounts\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Gateway Accounts"
        }, 
        {
            "location": "/reference/resources/gateway-accounts/#gateway-accounts-apigatewayaccounts", 
            "text": "Member of  RebillyAPI   Create and manage gateway accounts for your business. Select from a list of over 60 different gateways and configure them for active use.  A payment gateway is an e-commerce application service provider service that authorizes credit card payments for e-businesses, online retailers, bricks and clicks, or traditional brick and mortar. It is the equivalent of a physical point of sale terminal located in most retail outlets.", 
            "title": "Gateway Accounts api.gatewayAccounts"
        }, 
        {
            "location": "/reference/resources/gateway-accounts/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of gateway accounts. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . gatewayAccounts . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . gatewayAccounts . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( gatewayAccount   =   console . log ( gatewayAccount . fields . gatewayName ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of gateway accounts.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/gateway-accounts/#get", 
            "text": "get ({ id }) -   {Member}  Get a gateway account by its  id .  Example  const   gatewayAccount   =   await   api . gatewayAccounts . get ({ id :   foobar-001 });  console . log ( gatewayAccount . fields . gatewayName );   Returns  A member exposing the gateway account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/gateway-accounts/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a gateway account. Optionally provide a specific  id  to use, or let Rebilly generate one. Each gateway has custom configuration options that are provided using the  gatewayConfig  property. See the  API spec  for more details.  An additional gateway named  RebillyProcessor  is available in the sandbox mode and will allow you to test particular scenarios with set credit card numbers. See the  Sandbox vs Live Mode  help article for details.  Example  // first set the required properties for the new gateway account  const   data   =   { \n     gatewayName :   RebillyProcessor , \n     acquirerName :   RebillyProcessor , \n     merchantCategoryCode :   0 , \n     acceptedCurrencies :   [ USD ], \n     method :   payment-card , \n     paymentCardSchemes :   [ \n         Visa ,   MasterCard ,   American Express ,  \n         Discover ,   Diners Club ,   JCB \n     ], \n     // the gatewayConfig varies for each gateway name,  \n     // see the API spec for details \n     gatewayConfig :   {},  };  // the ID is optional  const   firstKey   =   await   api . gatewayAccounts . create ({ data });  // or you can provide one  const   secondKey   =   await   api . gatewayAccounts . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created gateway account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/gateway-accounts/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a gateway account using its  id . This method will  patch  the existing values, allowing you to skip gateway credentials.  Example  // build data with only the fields you wish to update  const   data   =   { \n     paymentCardSchemes :   [ \n             Visa ,   MasterCard ,   American Express \n     ]  };  const   secondKey   =   await   api . gatewayAccounts . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated gateway account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/gateway-accounts/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a gateway account by using its  id . You cannot delete a gateway account that has been used previously.  Example  const   request   =   await   api . gatewayAccounts . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/invoices/", 
            "text": "Invoices \napi\n.\ninvoices\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nAn invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer.  Payment terms are usually stated on the invoice. \n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of invoices. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ninvoice\n \n=\n \nconsole\n.\nlog\n(\ninvoice\n.\nfields\n.\nfirstName\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of invoices.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n, \nexpand\nopt\n}) -\n \n{Member}\n\n\nGet a invoice by its \nid\n. Define \nexpand\n to include additional data.\n\n\nAllowed \nexpand\n values: \n\n\n\n\nwebsite\n\n\ncustomer\n\n\norganization\n\n\n\n\n\n\ninvoice Object\n\n\ninvoices have invoice objects attached to them (\nprimaryAddress\n). The invoice information contains the invoice's name and address.\n\n\n\n\nExample\n\n\nconst\n \ninvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ninvoice\n.\nfields\n.\nprimaryAddress\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the invoice fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of invoices in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadPDF\n\n\ndownloadPDF\n({\nid\n}) -\n \n{File}\n\n\nGet an invoice PDF by the invoice's \nid\n. Returns an \nArrayBuffer\n.\n\n\n\n\ninvoice Object\n\n\ninvoices have invoice objects attached to them (\nprimaryAddress\n). The invoice information contains the invoice's name and address.\n\n\n\n\nExample\n\n\nconst\n \npdf\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ndownloadPDF\n({\nid\n:\n \nfoobar-001\n});\n\n\n// the invoice\ns data in arraybuffer format\n\n\nconsole\n.\nlog\n(\npdf\n.\ndata\n);\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a invoice for a specific customer and website. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new invoice\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncustomerId\n:\n \nfoobar-0001\n,\n\n    \nwebsiteId\n:\n \nmy-main-website\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \nbillingAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohnny\n,\n\n        \nlastName\n:\n \nBrown\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohnny+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n},\n\n    \ndeliveryAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohnny\n,\n\n        \nlastName\n:\n \nBrown\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohnny+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n},\n\n    \nnotes\n:\n \n`customer\ns first invoice`\n,\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstInvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondInvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created invoice fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a invoice using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncustomerId\n:\n \nfoobar-0001\n,\n\n    \nwebsiteId\n:\n \nmy-main-website\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \nbillingAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohnny\n,\n\n        \nlastName\n:\n \nBrown\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohnny+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n},\n\n    \ndeliveryAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohnny\n,\n\n        \nlastName\n:\n \nBrown\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohnny+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n},\n\n    \nnotes\n:\n \n`customer\ns first invoice`\n,\n\n\n};\n\n\n\nconst\n \ninvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated invoice fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nissue\n\n\nissue\n({\nid\n, \ndata\nopt\n}) -\n \n{Member}\n\n\nIssue an invoice using its \nid\n. This will calculate the shipping, taxes, and customer's applicable redeemed coupons, and apply them to the invoice.\n\n\nOptionally provide an \nissuedTime\n in the future to schedule the invoice otherwise it will be generated immediately. \n\n\nExample\n\n\n// define the issued time\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nissuedTime\n:\n \n2017-09-19T20:46:51Z\n\n\n};\n\n\n\n// issue the invoice without an issued time\n\n\nconst\n \nfirstInvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\nissue\n({\nid\n:\n \nmy-first-id\n});\n\n\n\n// or include it\n\n\nconst\n \nsecondInvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\nissue\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the issued invoice fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nabandon\n\n\nabandon\n({\nid\n}) -\n \n{Member}\n\n\nAbandon an invoice using its \nid\n. An invoice has to be issued before being abandoned. Once abandoned the invoice can no longer be settled.\n\n\nExample\n\n\nconst\n \nabandonedInvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\nabandon\n({\nid\n:\n \nmy-invoice-id\n});\n\n\nconsole\n.\nlog\n(\nabandonedInvoice\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the abandoned invoice fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nvoid\n\n\nvoid\n({\nid\n}) -\n \n{Member}\n\n\nVoid an invoice using its \nid\n. A void can only occur before settlement, otherwise a refund must be used.\n\n\nExample\n\n\nconst\n \nabandonedInvoice\n \n=\n \nawait\n \napi\n.\ninvoices\n.\nabandon\n({\nid\n:\n \nmy-invoice-id\n});\n\n\nconsole\n.\nlog\n(\nabandonedInvoice\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the voided invoice fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllInvoiceItems\n\n\ngetAllInvoiceItems\n({\nid\n, \nlimit\nopt\n, \noffset\nopt\n}) -\n \n{Collection}\n\n\nGet a list of invoice items for a specific invoice using its \nid\n.\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nExample\n\n\n// get the top 20 invoice items for this ID\n\n\nconst\n \ninvoiceItems\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ngetAllInvoiceItems\n({\nid\n:\n \nmy-invoice-id\n,\n \nlimit\n:\n \n20\n});\n\n\ninvoiceItems\n.\nitems\n.\nforEach\n(\nitem\n \n=\n \nconsole\n.\nlog\n(\nitem\n.\nfields\n.\ndescription\n));\n\n\n\n\n\nReturns\n\n\nA collection exposing the invoice items.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateInvoiceItem\n\n\ncreateInvoiceItem\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCreate an invoice item within an existing invoice, by using its \nid\n.\n\n\nExample\n\n\n// first set the properties for the new invoice item\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ntype\n:\n \ndebit\n,\n \n    \nunitPrice\n:\n \n5\n\n\n};\n\n\n\nconst\n \ninvoiceItem\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ncreateInvoiceItem\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created invoice fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetLeadSource\n\n\ngetLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nGet a lead source by using the invoice \nid\n.\n\n\nExample\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ngetLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\nconsole\n.\nlog\n(\nlead\n.\nfields\n.\naffiliate\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateLeadSource\n\n\ncreateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a lead source for a invoice \nid\n. A invoice can only have one lead source present at a time.\n\n\n\n\ninvoice Tracking\n\n\nThe lead source entity lets you track your invoices throughout your different campaigns.\n\n\n\n\nExample\n\n\n// first set the properties for the new lead source\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \nsubscriptions\n,\n\n    \ncontent\n:\n \nsubscription business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ncreateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created invoice lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateLeadSource\n\n\nupdateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the lead source for a invoice \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \nsubscriptions\n,\n\n    \ncontent\n:\n \nsubscription business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ninvoices\n.\nupdateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the update invoice lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeleteLeadSource\n\n\ndeleteLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nDelete a lead source using the invoice \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ndeleteLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllMatchedRules\n\n\ngetAllMatchedRules\n({\nid\n}) -\n \n{Collection}\n\n\nGet all previously matched event rules for an invoice \nid\n. The rules are defined within system events and are part of the Rules Engine.\n\n\n\n\nSee \nevents\n\n\n\n\nExample\n\n\nconst\n \nrules\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ngetAllMatchedRules\n({\nid\n:\n \nfoobar-001\n});\n\n\n\n\n\nReturns\n\n\nA collection of matched rules for this dispute.\n\n\nType \nCollection", 
            "title": "Invoices"
        }, 
        {
            "location": "/reference/resources/invoices/#invoices-apiinvoices", 
            "text": "Member of  RebillyAPI   An invoice is a commercial document issued by a seller (merchant) to a buyer (customer), relating to a sale transaction and indicating the products, quantities, and agreed prices for products or services the seller has provided the buyer.  Payment terms are usually stated on the invoice.", 
            "title": "Invoices api.invoices"
        }, 
        {
            "location": "/reference/resources/invoices/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of invoices. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . invoices . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . invoices . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( invoice   =   console . log ( invoice . fields . firstName ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of invoices.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/invoices/#get", 
            "text": "get ({ id ,  expand opt }) -   {Member}  Get a invoice by its  id . Define  expand  to include additional data.  Allowed  expand  values:    website  customer  organization    invoice Object  invoices have invoice objects attached to them ( primaryAddress ). The invoice information contains the invoice's name and address.   Example  const   invoice   =   await   api . invoices . get ({ id :   foobar-001 });  console . log ( invoice . fields . primaryAddress . firstName );   Returns  A member exposing the invoice fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/invoices/#downloadcsv", 
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of invoices in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . invoices . downloadCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . invoices . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadCSV"
        }, 
        {
            "location": "/reference/resources/invoices/#downloadpdf", 
            "text": "downloadPDF ({ id }) -   {File}  Get an invoice PDF by the invoice's  id . Returns an  ArrayBuffer .   invoice Object  invoices have invoice objects attached to them ( primaryAddress ). The invoice information contains the invoice's name and address.   Example  const   pdf   =   await   api . invoices . downloadPDF ({ id :   foobar-001 });  // the invoice s data in arraybuffer format  console . log ( pdf . data );   Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadPDF"
        }, 
        {
            "location": "/reference/resources/invoices/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a invoice for a specific customer and website. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new invoice  const   data   =   { \n     customerId :   foobar-0001 , \n     websiteId :   my-main-website , \n     currency :   USD , \n     billingAddress :   { \n         firstName :   Johnny , \n         lastName :   Brown , \n         emails :   [{ \n             label :   main , \n             value :   johnny+test@grr.la , \n             primary :   true \n         }], \n     }, \n     deliveryAddress :   { \n         firstName :   Johnny , \n         lastName :   Brown , \n         emails :   [{ \n             label :   main , \n             value :   johnny+test@grr.la , \n             primary :   true \n         }], \n     }, \n     notes :   `customer s first invoice` ,  };  // the ID is optional  const   firstInvoice   =   await   api . invoices . create ({ data });  // or you can provide one  const   secondInvoice   =   await   api . invoices . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created invoice fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/invoices/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a invoice using its  id .  Example  // define the values to update  const   data   =   { \n     customerId :   foobar-0001 , \n     websiteId :   my-main-website , \n     currency :   USD , \n     billingAddress :   { \n         firstName :   Johnny , \n         lastName :   Brown , \n         emails :   [{ \n             label :   main , \n             value :   johnny+test@grr.la , \n             primary :   true \n         }], \n     }, \n     deliveryAddress :   { \n         firstName :   Johnny , \n         lastName :   Brown , \n         emails :   [{ \n             label :   main , \n             value :   johnny+test@grr.la , \n             primary :   true \n         }], \n     }, \n     notes :   `customer s first invoice` ,  };  const   invoice   =   await   api . invoices . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated invoice fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/invoices/#issue", 
            "text": "issue ({ id ,  data opt }) -   {Member}  Issue an invoice using its  id . This will calculate the shipping, taxes, and customer's applicable redeemed coupons, and apply them to the invoice.  Optionally provide an  issuedTime  in the future to schedule the invoice otherwise it will be generated immediately.   Example  // define the issued time  const   data   =   { \n     issuedTime :   2017-09-19T20:46:51Z  };  // issue the invoice without an issued time  const   firstInvoice   =   await   api . invoices . issue ({ id :   my-first-id });  // or include it  const   secondInvoice   =   await   api . invoices . issue ({ id :   my-second-id ,   data });   Returns  A member exposing the issued invoice fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "issue"
        }, 
        {
            "location": "/reference/resources/invoices/#abandon", 
            "text": "abandon ({ id }) -   {Member}  Abandon an invoice using its  id . An invoice has to be issued before being abandoned. Once abandoned the invoice can no longer be settled.  Example  const   abandonedInvoice   =   await   api . invoices . abandon ({ id :   my-invoice-id });  console . log ( abandonedInvoice . fields . status );   Returns  A member exposing the abandoned invoice fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "abandon"
        }, 
        {
            "location": "/reference/resources/invoices/#void", 
            "text": "void ({ id }) -   {Member}  Void an invoice using its  id . A void can only occur before settlement, otherwise a refund must be used.  Example  const   abandonedInvoice   =   await   api . invoices . abandon ({ id :   my-invoice-id });  console . log ( abandonedInvoice . fields . status );   Returns  A member exposing the voided invoice fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "void"
        }, 
        {
            "location": "/reference/resources/invoices/#getallinvoiceitems", 
            "text": "getAllInvoiceItems ({ id ,  limit opt ,  offset opt }) -   {Collection}  Get a list of invoice items for a specific invoice using its  id .  Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Example  // get the top 20 invoice items for this ID  const   invoiceItems   =   await   api . invoices . getAllInvoiceItems ({ id :   my-invoice-id ,   limit :   20 });  invoiceItems . items . forEach ( item   =   console . log ( item . fields . description ));   Returns  A collection exposing the invoice items.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllInvoiceItems"
        }, 
        {
            "location": "/reference/resources/invoices/#createinvoiceitem", 
            "text": "createInvoiceItem ({ id ,  data }) -   {Member}  Create an invoice item within an existing invoice, by using its  id .  Example  // first set the properties for the new invoice item  const   data   =   { \n     type :   debit ,  \n     unitPrice :   5  };  const   invoiceItem   =   await   api . invoices . createInvoiceItem ({ id :   my-second-id ,   data });   Returns  A member exposing the created invoice fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createInvoiceItem"
        }, 
        {
            "location": "/reference/resources/invoices/#getleadsource", 
            "text": "getLeadSource ({ id }) -   {Member}  Get a lead source by using the invoice  id .  Example  const   lead   =   await   api . invoices . getLeadSource ({ id :   my-second-id });  console . log ( lead . fields . affiliate );   Returns  A member exposing the lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getLeadSource"
        }, 
        {
            "location": "/reference/resources/invoices/#createleadsource", 
            "text": "createLeadSource ({ id ,  data }) -   {Member}  Create a lead source for a invoice  id . A invoice can only have one lead source present at a time.   invoice Tracking  The lead source entity lets you track your invoices throughout your different campaigns.   Example  // first set the properties for the new lead source  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   subscriptions , \n     content :   subscription business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . invoices . createLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the created invoice lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createLeadSource"
        }, 
        {
            "location": "/reference/resources/invoices/#updateleadsource", 
            "text": "updateLeadSource ({ id ,  data }) -   {Member}  Update the lead source for a invoice  id .  Example  // define the values to update  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   subscriptions , \n     content :   subscription business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . invoices . updateLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the update invoice lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateLeadSource"
        }, 
        {
            "location": "/reference/resources/invoices/#deleteleadsource", 
            "text": "deleteLeadSource ({ id }) -   {Member}  Delete a lead source using the invoice  id .    Example  const   request   =   await   api . invoices . deleteLeadSource ({ id :   my-second-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deleteLeadSource"
        }, 
        {
            "location": "/reference/resources/invoices/#getallmatchedrules", 
            "text": "getAllMatchedRules ({ id }) -   {Collection}  Get all previously matched event rules for an invoice  id . The rules are defined within system events and are part of the Rules Engine.   See  events   Example  const   rules   =   await   api . invoices . getAllMatchedRules ({ id :   foobar-001 });   Returns  A collection of matched rules for this dispute.  Type  Collection", 
            "title": "getAllMatchedRules"
        }, 
        {
            "location": "/reference/resources/kyc-documents/", 
            "text": "KYC Douments \napi\n.\nkycDocuments\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nKnow your customer (alternatively know your client or 'KYC') is the process of a business identifying and verifying the identity of its clients. The term is also used to refer to the bank and anti-money laundering regulations which governs these activities.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nexpand\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of KYC documents of all customers.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nkycDocuments\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n\n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nkycDocuments\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ndocument\n \n=\n \nconsole\n.\nlog\n(\ndocument\n.\nfields\n.\ndocumentType\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the [filters guide][guide-filters] for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of all customers KYC documents.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a KYC document by its \nid\n.\n\n\nExample\n\n\nconst\n \ndocument\n \n=\n \nawait\n \napi\n.\nkycDocuments\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ndocument\n.\nfields\n.\ndocumentType\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the document fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\ndata\n}) -\n \n{Member}\n\n\nCreate a KYC document.\n\n\nExample\n\n\n// All fields are required\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nfieldId\n:\n \n4f6cf35x-2c4y-483z-a0a9-158621f77a21\n,\n\n    \ncustomerId\n:\n \n4f6cf35x-2c4y-483z-a0a9-158621f77a21\n,\n\n    \ndocumentType\n:\n \nidentity-proof\n\n\n};\n\n\n\nconst\n \nfirstKycDocument\n \n=\n \nawait\n \napi\n.\nkycDocuments\n.\ncreate\n({\ndata\n});\n\n\n\n\n\n\n\nNote\n\n\nKYC documents requires a file id. Use the file resource to generate one from the uploaded document\n\n\n\n\nReturns\n\n\nA member exposing the created document.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a KYC document by using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nstatus\n:\n \naccepted\n\n\n};\n\n\n\nconst\n \ndocument\n \n=\n \nawait\n \napi\n.\nkycDocuments\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated customer fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\naccept\n\n\naccept\n({\nid\n}) -\n \n{Member}\n\n\nAccept a KYC document by its \nid\n.\n\n\nExample\n\n\nconst\n \nacceptedDocument\n \n=\n \nawait\n \napi\n.\nkycDocuments\n.\naccept\n({\nid\n:\n \nmy-second-id\n});\n\n\nconsole\n.\nlog\n(\nacceptedDocument\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the accepted document.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nreject\n\n\nreject\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nRejects a document for a customer by its \nid\n.\n\n\nExample\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ntype\n:\n \ndocument-expired\n,\n\n    \nmessage\n:\n \nDocument is expired\n\n\n}\n\n\nconst\n \nrejectedDocument\n \n=\n \nawait\n \napi\n.\nkycDocuments\n.\nreject\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\nconsole\n.\nlog\n(\nrejectedDocument\n.\nfields\n.\nrejectionReason\n.\ntype\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the rejected document.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "KYC Documents"
        }, 
        {
            "location": "/reference/resources/kyc-documents/#kyc-douments-apikycdocuments", 
            "text": "Member of  RebillyAPI   Know your customer (alternatively know your client or 'KYC') is the process of a business identifying and verifying the identity of its clients. The term is also used to refer to the bank and anti-money laundering regulations which governs these activities.", 
            "title": "KYC Douments api.kycDocuments"
        }, 
        {
            "location": "/reference/resources/kyc-documents/#getall", 
            "text": "getAll \n        ({ limit opt ,\n         offset opt ,\n         sort opt ,\n         filter opt ,\n         expand opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of KYC documents of all customers.  Example  // all parameters are optional  const   firstCollection   =   await   api . kycDocuments . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };  const   secondCollection   =   await   api . kycDocuments . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( document   =   console . log ( document . fields . documentType ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the [filters guide][guide-filters] for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of all customers KYC documents.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/kyc-documents/#get", 
            "text": "get ({ id }) -   {Member}  Get a KYC document by its  id .  Example  const   document   =   await   api . kycDocuments . get ({ id :   foobar-001 });  console . log ( document . fields . documentType );   Returns  A member exposing the document fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/kyc-documents/#create", 
            "text": "create ({ data }) -   {Member}  Create a KYC document.  Example  // All fields are required  const   data   =   { \n     fieldId :   4f6cf35x-2c4y-483z-a0a9-158621f77a21 , \n     customerId :   4f6cf35x-2c4y-483z-a0a9-158621f77a21 , \n     documentType :   identity-proof  };  const   firstKycDocument   =   await   api . kycDocuments . create ({ data });    Note  KYC documents requires a file id. Use the file resource to generate one from the uploaded document   Returns  A member exposing the created document.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/kyc-documents/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a KYC document by using its  id .  Example  // define the values to update  const   data   =   { \n     status :   accepted  };  const   document   =   await   api . kycDocuments . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated customer fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/kyc-documents/#accept", 
            "text": "accept ({ id }) -   {Member}  Accept a KYC document by its  id .  Example  const   acceptedDocument   =   await   api . kycDocuments . accept ({ id :   my-second-id });  console . log ( acceptedDocument . fields . status );   Returns  A member exposing the accepted document.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "accept"
        }, 
        {
            "location": "/reference/resources/kyc-documents/#reject", 
            "text": "reject ({ id ,  data }) -   {Member}  Rejects a document for a customer by its  id .  Example  const   data   =   { \n     type :   document-expired , \n     message :   Document is expired  }  const   rejectedDocument   =   await   api . kycDocuments . reject ({ id :   my-second-id ,   data });  console . log ( rejectedDocument . fields . rejectionReason . type );   Returns  A member exposing the rejected document.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "reject"
        }, 
        {
            "location": "/reference/resources/layouts/", 
            "text": "Layouts \napi\n.\nlayouts\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nLayouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a pricing or plans page integrated into your website.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of layouts. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nlayouts\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nlayouts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nlayout\n \n=\n \nconsole\n.\nlog\n(\nlayout\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of layouts.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a layout by its \nid\n.\n\n\nExample\n\n\nconst\n \nlayout\n \n=\n \nawait\n \napi\n.\nlayouts\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nlayout\n.\nfields\n.\ndescription\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the layout fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a layout of plans. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\n\n\nPlans\n\n\nYou must have existing plans before you can create a layout.  \n\n\n\n\nExample\n\n\n// first set the properties for the new layout\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy plans layout\n,\n\n    \nitems\n:\n \n[\n\n        \n{\n\n            \nplanId\n:\n \nfoobar-0001\n,\n \n            \nstarred\n:\n \nfalse\n\n        \n},\n\n        \n{\n\n            \nplanId\n:\n \nfoobar-0002\n,\n\n            \n// use the `starred` option to\n\n            \n// mark a plan as being special, \n\n            \n// i.e. `our best plan`, or `most popular`\n\n            \n// then use this feature in your integration \n\n            \n// to distinguish between `items`\n\n            \nstarred\n:\n \ntrue\n\n        \n},\n\n        \n{\n\n            \nplanId\n:\n \nfoobar-0003\n,\n \n            \nstarred\n:\n \nfalse\n\n        \n}\n\n    \n]\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstLayout\n \n=\n \nawait\n \napi\n.\nlayouts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondLayout\n \n=\n \nawait\n \napi\n.\nlayouts\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created layout fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a layout by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy better layout\n,\n\n    \nitems\n:\n \n[\n\n        \n{\n\n            \nplanId\n:\n \nfoobar-0002\n,\n \n            \nstarred\n:\n \ntrue\n\n        \n},\n\n        \n{\n\n            \nplanId\n:\n \nfoobar-0001\n,\n\n            \nstarred\n:\n \nfalse\n\n        \n},\n\n        \n{\n\n            \nplanId\n:\n \nfoobar-0003\n,\n \n            \nstarred\n:\n \nfalse\n\n        \n}\n\n    \n]\n\n\n};\n\n\n\nconst\n \nlayout\n \n=\n \nawait\n \napi\n.\nlayouts\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated layout fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a layout by using its \nid\n. \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nlayouts\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Layouts"
        }, 
        {
            "location": "/reference/resources/layouts/#layouts-apilayouts", 
            "text": "Member of  RebillyAPI   Layouts are a collection of plans, in a specific order, which you may present to a customer (or prospective customer) on a pricing or plans page integrated into your website.", 
            "title": "Layouts api.layouts"
        }, 
        {
            "location": "/reference/resources/layouts/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt \n        }) ->  {Collection} \n       Get a collection of layouts. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . layouts . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . layouts . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( layout   =   console . log ( layout . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of layouts.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/layouts/#get", 
            "text": "get ({ id }) -   {Member}  Get a layout by its  id .  Example  const   layout   =   await   api . layouts . get ({ id :   foobar-001 });  console . log ( layout . fields . description );   Returns  A member exposing the layout fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/layouts/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a layout of plans. Optionally provide a specific  id  to use, or let Rebilly generate one.    Plans  You must have existing plans before you can create a layout.     Example  // first set the properties for the new layout  const   data   =   { \n     name :   My plans layout , \n     items :   [ \n         { \n             planId :   foobar-0001 ,  \n             starred :   false \n         }, \n         { \n             planId :   foobar-0002 , \n             // use the `starred` option to \n             // mark a plan as being special,  \n             // i.e. `our best plan`, or `most popular` \n             // then use this feature in your integration  \n             // to distinguish between `items` \n             starred :   true \n         }, \n         { \n             planId :   foobar-0003 ,  \n             starred :   false \n         } \n     ]  };  // the ID is optional  const   firstLayout   =   await   api . layouts . create ({ data });  // or you can provide one  const   secondLayout   =   await   api . layouts . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created layout fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/layouts/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a layout by using its  id .   Example  // define values to update  const   data   =   { \n     name :   My better layout , \n     items :   [ \n         { \n             planId :   foobar-0002 ,  \n             starred :   true \n         }, \n         { \n             planId :   foobar-0001 , \n             starred :   false \n         }, \n         { \n             planId :   foobar-0003 ,  \n             starred :   false \n         } \n     ]  };  const   layout   =   await   api . layouts . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated layout fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/layouts/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a layout by using its  id .   Example  const   request   =   await   api . layouts . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/lists/", 
            "text": "Lists \napi\n.\nlists\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nA list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself.\n\n\n\n\nRules Engine\n\n\nLists are related to Rules Engine and are only available within the \nsystem events\n.\n\n\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of lists. Each entry will be a member. Only the newest version of each list will be returned. \n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nlists\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nlists\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nlist\n \n=\n \nconsole\n.\nlog\n(\nlist\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of Lists.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n, \nversion\nopt\n}) -\n \n{Member}\n\n\nGet the latest version of a list by its \nid\n. Optionally specific a specific \nversion\n number to retrieve.\n\n\nExample\n\n\n// get the latest version\n\n\nconst\n \nlastest\n \n=\n \nawait\n \napi\n.\nlists\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\n\n// get an older version\n\n\nconst\n \nolder\n \n=\n \nawait\n \napi\n.\nlists\n.\nget\n({\nid\n:\n \nfoobar-001\n,\n \nversion\n:\n \n12\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the list fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a list of values to uses in system events' criteria. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nExample\n\n\n// first set the properties for the new list\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy value list\n,\n\n    \nvalues\n:\n \n[\n\n        \nfoobar-0001\n,\n \nfoobar-0002\n,\n  \nfoobar-0003\n,\n\n        \nfoobar-0004\n,\n \nfoobar-0005\n,\n \nfoobar-0006\n  \n    \n]\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstList\n \n=\n \nawait\n \napi\n.\nlists\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondList\n \n=\n \nawait\n \napi\n.\nlists\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created list fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a list of values by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy better list\n,\n\n    \nvalues\n:\n \n[\n\n        \nfoobar-0004\n,\n \nfoobar-0005\n,\n \nfoobar-0006\n  \n    \n]\n\n\n};\n\n\n\nconst\n \nlist\n \n=\n \nawait\n \napi\n.\nlists\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated list fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a list by using its \nid\n. \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nlists\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Lists"
        }, 
        {
            "location": "/reference/resources/lists/#lists-apilists", 
            "text": "Member of  RebillyAPI   A list in an array of values that are stored in the database. The main purpose of a list is its usage in Rules Engine, to provide a way to change a rule criteria without having to change the rule itself.   Rules Engine  Lists are related to Rules Engine and are only available within the  system events .", 
            "title": "Lists api.lists"
        }, 
        {
            "location": "/reference/resources/lists/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of lists. Each entry will be a member. Only the newest version of each list will be returned.   Example  // all parameters are optional  const   firstCollection   =   await   api . lists . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . lists . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( list   =   console . log ( list . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of Lists.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/lists/#get", 
            "text": "get ({ id ,  version opt }) -   {Member}  Get the latest version of a list by its  id . Optionally specific a specific  version  number to retrieve.  Example  // get the latest version  const   lastest   =   await   api . lists . get ({ id :   foobar-001 });  // get an older version  const   older   =   await   api . lists . get ({ id :   foobar-001 ,   version :   12 });   Returns  A member exposing the list fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/lists/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a list of values to uses in system events' criteria. Optionally provide a specific  id  to use, or let Rebilly generate one.   Example  // first set the properties for the new list  const   data   =   { \n     name :   My value list , \n     values :   [ \n         foobar-0001 ,   foobar-0002 ,    foobar-0003 , \n         foobar-0004 ,   foobar-0005 ,   foobar-0006   \n     ]  };  // the ID is optional  const   firstList   =   await   api . lists . create ({ data });  // or you can provide one  const   secondList   =   await   api . lists . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created list fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/lists/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a list of values by using its  id .   Example  // define values to update  const   data   =   { \n     name :   My better list , \n     values :   [ \n         foobar-0004 ,   foobar-0005 ,   foobar-0006   \n     ]  };  const   list   =   await   api . lists . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated list fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/lists/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a list by using its  id .   Example  const   request   =   await   api . lists . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/notes/", 
            "text": "Notes \napi\n.\nnotes\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nLeave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of notes. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nnotes\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nnotes\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nnote\n \n=\n \nconsole\n.\nlog\n(\nnote\n.\nfields\n.\ncreatedBy\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of notes.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a note by its \nid\n.\n\n\nExample\n\n\nconst\n \nnote\n \n=\n \nawait\n \napi\n.\nnotes\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nnote\n.\nfields\n.\ndescription\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the note fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a note for a specific resource (\nrelatedType\n) and entity ID (\nrelatedId\n). Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nAllowed \nrelatedType\n values:\n\n\n\n\ncustomer\n\n\npaayment-card\n\n\npayment-gateway\n\n\nsubscriptions\n\n\ntransaction\n \n\n\n\n\nExample\n\n\n// first set the properties for the new note\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncontent\n:\n \nThis is our best customer\n,\n\n    \narchived\n:\n \nfalse\n,\n\n    \n// define the resource the note is attached to\n\n    \nrelatedType\n:\n \ncustomer\n,\n\n    \n// and the ID of the member of that resource\n\n    \nrelatedId\n:\n \nmy-customer-id\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstNote\n \n=\n \nawait\n \napi\n.\nnotes\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondNote\n \n=\n \nawait\n \napi\n.\nnotes\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created note fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a note by using its \nid\n for a specific resource (\nrelatedType\n) and entity ID (\nrelatedId\n). \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncontent\n:\n \nThis was our best customer\n,\n\n    \narchived\n:\n \nfalse\n,\n\n    \n// define the resource the note is attached to\n\n    \nrelatedType\n:\n \ncustomer\n,\n\n    \n// and the ID of the member of that resource\n\n    \nrelatedId\n:\n \nmy-customer-id\n\n\n};\n\n\n\nconst\n \nnote\n \n=\n \nawait\n \napi\n.\nnotes\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated note fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Notes"
        }, 
        {
            "location": "/reference/resources/notes/#notes-apinotes", 
            "text": "Member of  RebillyAPI   Leave notes on a resource member to have a handy location to share with others who may interface with the customer. It's great for customer service.", 
            "title": "Notes api.notes"
        }, 
        {
            "location": "/reference/resources/notes/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt , \n         sort opt \n         filter opt \n        }) ->  {Collection} \n       Get a collection of notes. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . notes . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . notes . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( note   =   console . log ( note . fields . createdBy ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of notes.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/notes/#get", 
            "text": "get ({ id }) -   {Member}  Get a note by its  id .  Example  const   note   =   await   api . notes . get ({ id :   foobar-001 });  console . log ( note . fields . description );   Returns  A member exposing the note fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/notes/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a note for a specific resource ( relatedType ) and entity ID ( relatedId ). Optionally provide a specific  id  to use, or let Rebilly generate one.   Allowed  relatedType  values:   customer  paayment-card  payment-gateway  subscriptions  transaction     Example  // first set the properties for the new note  const   data   =   { \n     content :   This is our best customer , \n     archived :   false , \n     // define the resource the note is attached to \n     relatedType :   customer , \n     // and the ID of the member of that resource \n     relatedId :   my-customer-id  };  // the ID is optional  const   firstNote   =   await   api . notes . create ({ data });  // or you can provide one  const   secondNote   =   await   api . notes . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created note fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/notes/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a note by using its  id  for a specific resource ( relatedType ) and entity ID ( relatedId ).   Example  // define values to update  const   data   =   { \n     content :   This was our best customer , \n     archived :   false , \n     // define the resource the note is attached to \n     relatedType :   customer , \n     // and the ID of the member of that resource \n     relatedId :   my-customer-id  };  const   note   =   await   api . notes . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated note fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/organizations/", 
            "text": "Organizations \napi\n.\norganizations\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nOrganizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations.\n\n\n\n\nNote\n\n\nOrganizations are shared between the \nLive\n and \nSandbox\n modes.\n\n\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of organizations. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\norganizations\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\norganizations\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\norganization\n \n=\n \nconsole\n.\nlog\n(\norganization\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of organizations.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet an organization by its \nid\n.\n\n\nExample\n\n\nconst\n \norganization\n \n=\n \nawait\n \napi\n.\norganizations\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\norganization\n.\nfields\n.\nname\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the organization fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate an organization. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nExample\n\n\n// first set the properties for the new organization\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nAcme Import Inc.\n,\n\n    \naddress\n:\n \n1234 Roger Street\n,\n\n    \naddress2\n:\n \nSuite 456\n,\n\n    \ncity\n:\n \nAcmeville\n,\n\n    \nregion\n:\n \nnull\n,\n\n    \ncountry\n:\n \nCanada\n,\n\n    \npostalCode\n:\n \nH1N0K1\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstOrganization\n \n=\n \nawait\n \napi\n.\norganizations\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondOrganization\n \n=\n \nawait\n \napi\n.\norganizations\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created organization fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate an organization by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nAcme Export Inc.\n,\n\n    \naddress\n:\n \n1234 Moore Street\n,\n\n    \naddress2\n:\n \nSuite 757\n,\n\n    \ncity\n:\n \nAcmeville\n,\n\n    \nregion\n:\n \nnull\n,\n\n    \ncountry\n:\n \nCanada\n,\n\n    \npostalCode\n:\n \nH1N0K1\n\n\n};\n\n\n\nconst\n \norganization\n \n=\n \nawait\n \napi\n.\norganizations\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated organization fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete an organization by using its \nid\n. \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\norganizations\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Organizations"
        }, 
        {
            "location": "/reference/resources/organizations/#organizations-apiorganizations", 
            "text": "Member of  RebillyAPI   Organizations include the name and address of the entities related to your account. An account may be multi-national, and support multiple organizations.   Note  Organizations are shared between the  Live  and  Sandbox  modes.", 
            "title": "Organizations api.organizations"
        }, 
        {
            "location": "/reference/resources/organizations/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of organizations. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . organizations . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . organizations . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( organization   =   console . log ( organization . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of organizations.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/organizations/#get", 
            "text": "get ({ id }) -   {Member}  Get an organization by its  id .  Example  const   organization   =   await   api . organizations . get ({ id :   foobar-001 });  console . log ( organization . fields . name );   Returns  A member exposing the organization fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/organizations/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create an organization. Optionally provide a specific  id  to use, or let Rebilly generate one.   Example  // first set the properties for the new organization  const   data   =   { \n     name :   Acme Import Inc. , \n     address :   1234 Roger Street , \n     address2 :   Suite 456 , \n     city :   Acmeville , \n     region :   null , \n     country :   Canada , \n     postalCode :   H1N0K1  };  // the ID is optional  const   firstOrganization   =   await   api . organizations . create ({ data });  // or you can provide one  const   secondOrganization   =   await   api . organizations . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created organization fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/organizations/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update an organization by using its  id .   Example  // define values to update  const   data   =   { \n     name :   Acme Export Inc. , \n     address :   1234 Moore Street , \n     address2 :   Suite 757 , \n     city :   Acmeville , \n     region :   null , \n     country :   Canada , \n     postalCode :   H1N0K1  };  const   organization   =   await   api . organizations . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated organization fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/organizations/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete an organization by using its  id .   Example  const   request   =   await   api . organizations . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/payment-cards/", 
            "text": "Payment Cards \napi\n.\npaymentCards\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nA form of payment instrument, payment cards enable customers to do transactions when buying your products.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of payment cards. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\npaymentCard\n \n=\n \nconsole\n.\nlog\n(\npaymentCard\n.\nfields\n.\ncustomerId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of payment cards.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a payment cards by its \nid\n.\n\n\nExample\n\n\nconst\n \npaymentCard\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\npaymentCard\n.\nfields\n.\ncustomerId\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the payment cards fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a payment card for a specific customer. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nExample\n\n\n// first set the properties for the new payment card\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \npan\n:\n \n4111111111111111\n,\n\n    \nexpYear\n:\n \n2022\n,\n\n    \nexpMonth\n:\n \n11\n,\n\n    \ncvv\n:\n \n123\n,\n\n    \nbillingAddress\n:\n \n{\n\n      \nfirstName\n:\n \nJohnny\n,\n\n      \nlastName\n:\n \nBrown\n,\n\n      \nemails\n:\n \n[{\n\n          \nlabel\n:\n \nmain\n,\n\n          \nvalue\n:\n \njohnny+test@grr.la\n,\n\n          \nprimary\n:\n \ntrue\n\n      \n}]\n  \n    \n},\n\n    \n// the customer ID for which\n\n    \n// we are adding a payment card\n\n    \ncustomerId\n:\n \nfoobar-0001\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstCard\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondCard\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created payment card fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nauthorize\n\n\nauthorize\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nAuthorize an amount for a payment card by using its \nid\n, for a specific website and gateway. \n\n\nResults in a hold placed on the cardholder\u2019s account for the authorized amount. An authorization response code is later used to capture the authorized funds. \n\n\nExample\n\n\n// first set the properties for the authorization\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nwebsiteId\n:\n \nmy-main-website\n,\n\n    \n// currency three letter code\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \ngatewayAccountId\n:\n \nmy-main-gateway\n,\n\n    \namount\n:\n \n12.99\n\n\n};\n\n\n\nconst\n \npaymentCard\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\nauthorize\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the payment card fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeactivate\n\n\ndeactivate\n({\nid\n}) -\n \n{Member}\n\n\nDeactivate a payment card by using its \nid\n. Once deactivated the card can no longer be used for payments.  \n\n\nExample\n\n\nconst\n \npaymentCard\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ndeactivate\n({\nid\n:\n \nmy-second-key\n});\n\n\nconsole\n.\nlog\n(\npaymentCard\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the payment card fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllMigratable\n\n\n\n    \n\n        \ngetAllMigratable\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of migratable payment cards. Each entry will be a member.\n\n\n\n\nPayment Card Migration\n\n\nMigrating payment cards lets you move cards in bulk from one gateway account to another. This is useful when the original gateway account is no longer available.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ngetAllMigratable\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ngetAllMigratable\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\npaymentCard\n \n=\n \nconsole\n.\nlog\n(\npaymentCard\n.\nfields\n.\ncustomerId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of migratable payment cards.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nmigrate\n\n\ndeactivate\n({\ndata\n}) -\n \n{Member}\n\n\nMigrate payment cards in bulk from one gateway account to another using their \nid\n. This is useful when the original gateway account is no longer available.\n\n\nExample\n\n\n// first build the migration\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nfromGatewayAccountId\n:\n \noriginal-gateway-id\n,\n\n    \ntoGatewayAccountId\n:\n \ntarget-gateway-id\n,\n\n    \npaymentCardIds\n:\n \n[\n\n        \nfoobar-0001\n,\n \nfoobar-0002\n,\n \nfoobar-0003\n,\n \n        \nfoobar-0004\n,\n \nfoobar-0005\n,\n \nfoobar-0006\n  \n    \n]\n\n\n};\n\n\nconst\n \nresult\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\nmigrate\n({\ndata\n});\n\n\n// you can verify the amount of cards that\n\n\n// were successfully migrated\n\n\nconsole\n.\nlog\n(\nresult\n.\nfields\n.\nmigratedCards\n);\n\n\n\n\n\nReturns\n\n\nA member exposing a single field (\nmigratedCards\n) with the amount of cards that were successfully migrated.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllMatchedRules\n\n\ngetAllMatchedRules\n({\nid\n}) -\n \n{Collection}\n\n\nGet all previously matched event rules for a payment card \nid\n. The rules are defined within system events and are part of the Rules Engine.\n\n\n\n\nSee \nevents\n\n\n\n\nExample\n\n\nconst\n \nrules\n \n=\n \nawait\n \napi\n.\npaymentCards\n.\ngetAllMatchedRules\n({\nid\n:\n \nfoobar-001\n});\n\n\n\n\n\nReturns\n\n\nA collection of matched rules for this dispute.\n\n\nType \nCollection", 
            "title": "Payment Cards"
        }, 
        {
            "location": "/reference/resources/payment-cards/#payment-cards-apipaymentcards", 
            "text": "Member of  RebillyAPI   A form of payment instrument, payment cards enable customers to do transactions when buying your products.", 
            "title": "Payment Cards api.paymentCards"
        }, 
        {
            "location": "/reference/resources/payment-cards/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of payment cards. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . paymentCards . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . paymentCards . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( paymentCard   =   console . log ( paymentCard . fields . customerId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of payment cards.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/payment-cards/#get", 
            "text": "get ({ id }) -   {Member}  Get a payment cards by its  id .  Example  const   paymentCard   =   await   api . paymentCards . get ({ id :   foobar-001 });  console . log ( paymentCard . fields . customerId );   Returns  A member exposing the payment cards fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/payment-cards/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a payment card for a specific customer. Optionally provide a specific  id  to use, or let Rebilly generate one.   Example  // first set the properties for the new payment card  const   data   =   { \n     pan :   4111111111111111 , \n     expYear :   2022 , \n     expMonth :   11 , \n     cvv :   123 , \n     billingAddress :   { \n       firstName :   Johnny , \n       lastName :   Brown , \n       emails :   [{ \n           label :   main , \n           value :   johnny+test@grr.la , \n           primary :   true \n       }]   \n     }, \n     // the customer ID for which \n     // we are adding a payment card \n     customerId :   foobar-0001  };  // the ID is optional  const   firstCard   =   await   api . paymentCards . create ({ data });  // or you can provide one  const   secondCard   =   await   api . paymentCards . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created payment card fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/payment-cards/#authorize", 
            "text": "authorize ({ id ,  data }) -   {Member}  Authorize an amount for a payment card by using its  id , for a specific website and gateway.   Results in a hold placed on the cardholder\u2019s account for the authorized amount. An authorization response code is later used to capture the authorized funds.   Example  // first set the properties for the authorization  const   data   =   { \n     websiteId :   my-main-website , \n     // currency three letter code \n     currency :   USD , \n     gatewayAccountId :   my-main-gateway , \n     amount :   12.99  };  const   paymentCard   =   await   api . paymentCards . authorize ({ id :   my-second-key ,   data });   Returns  A member exposing the payment card fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "authorize"
        }, 
        {
            "location": "/reference/resources/payment-cards/#deactivate", 
            "text": "deactivate ({ id }) -   {Member}  Deactivate a payment card by using its  id . Once deactivated the card can no longer be used for payments.    Example  const   paymentCard   =   await   api . paymentCards . deactivate ({ id :   my-second-key });  console . log ( paymentCard . fields . status );   Returns  A member exposing the payment card fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deactivate"
        }, 
        {
            "location": "/reference/resources/payment-cards/#getallmigratable", 
            "text": "getAllMigratable ({\n         limit opt , \n         offset opt , \n         sort opt \n         filter opt \n        }) ->  {Collection} \n       Get a collection of migratable payment cards. Each entry will be a member.   Payment Card Migration  Migrating payment cards lets you move cards in bulk from one gateway account to another. This is useful when the original gateway account is no longer available.   Example  // all parameters are optional  const   firstCollection   =   await   api . paymentCards . getAllMigratable ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . paymentCards . getAllMigratable ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( paymentCard   =   console . log ( paymentCard . fields . customerId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of migratable payment cards.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllMigratable"
        }, 
        {
            "location": "/reference/resources/payment-cards/#migrate", 
            "text": "deactivate ({ data }) -   {Member}  Migrate payment cards in bulk from one gateway account to another using their  id . This is useful when the original gateway account is no longer available.  Example  // first build the migration  const   data   =   { \n     fromGatewayAccountId :   original-gateway-id , \n     toGatewayAccountId :   target-gateway-id , \n     paymentCardIds :   [ \n         foobar-0001 ,   foobar-0002 ,   foobar-0003 ,  \n         foobar-0004 ,   foobar-0005 ,   foobar-0006   \n     ]  };  const   result   =   await   api . paymentCards . migrate ({ data });  // you can verify the amount of cards that  // were successfully migrated  console . log ( result . fields . migratedCards );   Returns  A member exposing a single field ( migratedCards ) with the amount of cards that were successfully migrated.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "migrate"
        }, 
        {
            "location": "/reference/resources/payment-cards/#getallmatchedrules", 
            "text": "getAllMatchedRules ({ id }) -   {Collection}  Get all previously matched event rules for a payment card  id . The rules are defined within system events and are part of the Rules Engine.   See  events   Example  const   rules   =   await   api . paymentCards . getAllMatchedRules ({ id :   foobar-001 });   Returns  A collection of matched rules for this dispute.  Type  Collection", 
            "title": "getAllMatchedRules"
        }, 
        {
            "location": "/reference/resources/payment-tokens/", 
            "text": "Payment Tokens \napi\n.\npaymentTokens\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nTokens are an encrypted string representing a payment instrument. A token expires within 24 hours.\n\n\nPayment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens.\n\n\n\n\nSee \nRebilly.js\n library\n\n\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of payment tokens. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\npaymentTokens\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\npaymentTokens\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\npaymentToken\n \n=\n \nconsole\n.\nlog\n(\npaymentToken\n.\nfields\n.\nid\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of payment tokens.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a payment token by its \nid\n.\n\n\nExample\n\n\nconst\n \npaymentToken\n \n=\n \nawait\n \napi\n.\npaymentTokens\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\npaymentToken\n.\nfields\n.\nmethod\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the payment token fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a payment token from a payment instrument. It can then be used to complete an order as a surrogate for a payment instrument. A payment token can represent either payment card or bank account.\n\n\nAllowed \nmethod\n values: \n\n\n\n\nach\n\n\ncash\n\n\npayment-card\n\n\npaypal\n\n\nAlipay\n\n\nChina UnionPay\n\n\nFlexepin\n\n\nGpaysafe\n\n\nJeton\n\n\nOchaPay\n\n\nSMSVoucher\n\n\nUPayCard\n\n\nWeChat Pay\n\n\n\n\nExample\n\n\n// first set the properties for the new payment token\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmethod\n:\n \npayment-card\n,\n\n    \npaymentInstrument\n:\n \n{\n\n        \npan\n:\n \n4111111111111111\n,\n\n        \nexpYear\n:\n \n2022\n,\n\n        \nexpMonth\n:\n \n12\n,\n\n        \ncvv\n:\n \n123\n\n    \n},\n\n    \nbillingAddress\n:\n \n{\n\n      \nfirstName\n:\n \nJohnny\n,\n\n      \nlastName\n:\n \nBrown\n,\n\n      \nemails\n:\n \n[{\n\n          \nlabel\n:\n \nmain\n,\n\n          \nvalue\n:\n \njohnny+test@grr.la\n,\n\n          \nprimary\n:\n \ntrue\n\n      \n}]\n  \n    \n}\n\n\n};\n\n\n\nconst\n \ntoken\n \n=\n \nawait\n \napi\n.\npaymentTokens\n.\ncreate\n({\ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created payment token fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nexpire\n\n\nexpire\n({\nid\n}) -\n \n{Member}\n\n\nExpire a payment token by using its \nid\n. This will prevent the token from being used in new orders. \n\n\nExample\n\n\nconst\n \npaymentToken\n \n=\n \nawait\n \napi\n.\npaymentTokens\n.\nexpire\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the expired payment token fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Payment Tokens"
        }, 
        {
            "location": "/reference/resources/payment-tokens/#payment-tokens-apipaymenttokens", 
            "text": "Member of  RebillyAPI   Tokens are an encrypted string representing a payment instrument. A token expires within 24 hours.  Payment tokens are used to reduce the scope of PCI DSS compliance. A payment token can be made using a different authentication scheme , which allows you to create a payment token directly from the browser, bypassing the need to send sensitive cardholder info to your servers. We recommend using this with our Rebilly.js library, which helps you wire a form into this API resource and create payment tokens.   See  Rebilly.js  library", 
            "title": "Payment Tokens api.paymentTokens"
        }, 
        {
            "location": "/reference/resources/payment-tokens/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt \n        }) ->  {Collection} \n       Get a collection of payment tokens. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . paymentTokens . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . paymentTokens . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( paymentToken   =   console . log ( paymentToken . fields . id ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of payment tokens.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/payment-tokens/#get", 
            "text": "get ({ id }) -   {Member}  Get a payment token by its  id .  Example  const   paymentToken   =   await   api . paymentTokens . get ({ id :   foobar-001 });  console . log ( paymentToken . fields . method );   Returns  A member exposing the payment token fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/payment-tokens/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a payment token from a payment instrument. It can then be used to complete an order as a surrogate for a payment instrument. A payment token can represent either payment card or bank account.  Allowed  method  values:    ach  cash  payment-card  paypal  Alipay  China UnionPay  Flexepin  Gpaysafe  Jeton  OchaPay  SMSVoucher  UPayCard  WeChat Pay   Example  // first set the properties for the new payment token  const   data   =   { \n     method :   payment-card , \n     paymentInstrument :   { \n         pan :   4111111111111111 , \n         expYear :   2022 , \n         expMonth :   12 , \n         cvv :   123 \n     }, \n     billingAddress :   { \n       firstName :   Johnny , \n       lastName :   Brown , \n       emails :   [{ \n           label :   main , \n           value :   johnny+test@grr.la , \n           primary :   true \n       }]   \n     }  };  const   token   =   await   api . paymentTokens . create ({ data });   Returns  A member exposing the created payment token fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/payment-tokens/#expire", 
            "text": "expire ({ id }) -   {Member}  Expire a payment token by using its  id . This will prevent the token from being used in new orders.   Example  const   paymentToken   =   await   api . paymentTokens . expire ({ id :   my-second-key });   Returns  A member exposing the expired payment token fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "expire"
        }, 
        {
            "location": "/reference/resources/paypal-accounts/", 
            "text": "Paypal Accounts \napi\n.\npaypalAccounts\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nA form of payment instrument, paypal accounts enable customers to do transactions when buying your products.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of paypal accounts. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\npaypalAccounts\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\npaypalAccounts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\npaypalAccount\n \n=\n \nconsole\n.\nlog\n(\npaypalAccount\n.\nfields\n.\ncustomerId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of paypal accounts.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a paypal accounts by its \nid\n.\n\n\nExample\n\n\nconst\n \npaypalAccount\n \n=\n \nawait\n \napi\n.\npaypalAccounts\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\npaypalAccount\n.\nfields\n.\ncustomerId\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the paypal accounts fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a paypal account for a specific customer. Optionally provide a specific \nid\n to use, or let Rebilly generate one. \n\n\nExample\n\n\n// first set the properties for the new paypal account\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nusername\n:\n \nmyPaypalUser\n,\n\n    \nbillingAddress\n:\n \n{\n\n      \nfirstName\n:\n \nJohnny\n,\n\n      \nlastName\n:\n \nBrown\n,\n\n      \nemails\n:\n \n[{\n\n          \nlabel\n:\n \nmain\n,\n\n          \nvalue\n:\n \njohnny+test@grr.la\n,\n\n          \nprimary\n:\n \ntrue\n\n      \n}]\n  \n    \n},\n\n    \n// the customer ID for which\n\n    \n// we are adding a paypal account\n\n    \ncustomerId\n:\n \nfoobar-0001\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstCard\n \n=\n \nawait\n \napi\n.\npaypalAccounts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondCard\n \n=\n \nawait\n \napi\n.\npaypalAccounts\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created paypal account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nactivate\n\n\nactivate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nActivate a Paypal account using its \nid\n for a specific website and gateway account.  \n\n\nExample\n\n\n// first set the properties for the activation\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nwebsiteId\n:\n \nmy-main-website\n,\n\n    \n// currency three letter code\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \ngatewayAccountId\n:\n \nmy-main-gateway\n,\n\n    \namount\n:\n \n12.99\n,\n\n    \nredirectURLs\n:\n \n{\n\n        \nsuccess\n:\n \nhttps://www.acme.com/success\n,\n\n        \ndecline\n:\n \nhttps://www.acme.com/decline\n,\n\n        \ncancel\n:\n \nhttps://www.acme.com/cancel\n,\n\n        \nerror\n:\n \nhttps://www.acme.com/error\n\n    \n}\n\n\n};\n\n\n\nconst\n \npaypalAccount\n \n=\n \nawait\n \napi\n.\npaypalAccounts\n.\nactivate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the paypal account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeactivate\n\n\ndeactivate\n({\nid\n}) -\n \n{Member}\n\n\nDeactivate a paypal account by using its \nid\n. Once deactivated the card can no longer be actively used.  \n\n\nExample\n\n\nconst\n \npaypalAccount\n \n=\n \nawait\n \napi\n.\npaypalAccounts\n.\ndeactivate\n({\nid\n:\n \nmy-second-key\n});\n\n\nconsole\n.\nlog\n(\npaypalAccount\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the paypal account fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Paypal Accounts"
        }, 
        {
            "location": "/reference/resources/paypal-accounts/#paypal-accounts-apipaypalaccounts", 
            "text": "Member of  RebillyAPI   A form of payment instrument, paypal accounts enable customers to do transactions when buying your products.", 
            "title": "Paypal Accounts api.paypalAccounts"
        }, 
        {
            "location": "/reference/resources/paypal-accounts/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of paypal accounts. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . paypalAccounts . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . paypalAccounts . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( paypalAccount   =   console . log ( paypalAccount . fields . customerId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of paypal accounts.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/paypal-accounts/#get", 
            "text": "get ({ id }) -   {Member}  Get a paypal accounts by its  id .  Example  const   paypalAccount   =   await   api . paypalAccounts . get ({ id :   foobar-001 });  console . log ( paypalAccount . fields . customerId );   Returns  A member exposing the paypal accounts fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/paypal-accounts/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a paypal account for a specific customer. Optionally provide a specific  id  to use, or let Rebilly generate one.   Example  // first set the properties for the new paypal account  const   data   =   { \n     username :   myPaypalUser , \n     billingAddress :   { \n       firstName :   Johnny , \n       lastName :   Brown , \n       emails :   [{ \n           label :   main , \n           value :   johnny+test@grr.la , \n           primary :   true \n       }]   \n     }, \n     // the customer ID for which \n     // we are adding a paypal account \n     customerId :   foobar-0001  };  // the ID is optional  const   firstCard   =   await   api . paypalAccounts . create ({ data });  // or you can provide one  const   secondCard   =   await   api . paypalAccounts . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created paypal account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/paypal-accounts/#activate", 
            "text": "activate ({ id ,  data }) -   {Member}  Activate a Paypal account using its  id  for a specific website and gateway account.    Example  // first set the properties for the activation  const   data   =   { \n     websiteId :   my-main-website , \n     // currency three letter code \n     currency :   USD , \n     gatewayAccountId :   my-main-gateway , \n     amount :   12.99 , \n     redirectURLs :   { \n         success :   https://www.acme.com/success , \n         decline :   https://www.acme.com/decline , \n         cancel :   https://www.acme.com/cancel , \n         error :   https://www.acme.com/error \n     }  };  const   paypalAccount   =   await   api . paypalAccounts . activate ({ id :   my-second-key ,   data });   Returns  A member exposing the paypal account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "activate"
        }, 
        {
            "location": "/reference/resources/paypal-accounts/#deactivate", 
            "text": "deactivate ({ id }) -   {Member}  Deactivate a paypal account by using its  id . Once deactivated the card can no longer be actively used.    Example  const   paypalAccount   =   await   api . paypalAccounts . deactivate ({ id :   my-second-key });  console . log ( paypalAccount . fields . status );   Returns  A member exposing the paypal account fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deactivate"
        }, 
        {
            "location": "/reference/resources/plans/", 
            "text": "Plans \napi\n.\nplans\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nPlans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of plans. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nplans\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nplans\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nplan\n \n=\n \nconsole\n.\nlog\n(\nplan\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of plans.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a plan by its \nid\n.\n\n\nExample\n\n\nconst\n \nplan\n \n=\n \nawait\n \napi\n.\nplans\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nplan\n.\nfields\n.\nname\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the plan fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a plan. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nA plan can have both a trial and recurring part but you must provide at lease one of them to create it. See the \nAPI spec\n for more details.\n\n\n\n\nSubscriptions\n\n\nAt least one plan is required to be able to create new subscriptions.\n\n\n\n\nExample\n\n\n// first set the properties for the new plan\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy strongest plan\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \nsetupAmount\n:\n \n12.99\n,\n\n    \n// you could also include a trial if needed\n\n    \nrecurringPeriodUnit\n:\n \nmonth\n,\n\n    \nrecurringPeriodLength\n:\n \n1\n,\n\n    \nrecurringAmount\n:\n \n25.99\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstPlan\n \n=\n \nawait\n \napi\n.\nplans\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondPlan\n \n=\n \nawait\n \napi\n.\nplans\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created plan fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a plan by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy strongest plan\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \nsetupAmount\n:\n \n12.99\n,\n\n    \nrecurringPeriodUnit\n:\n \nmonth\n,\n\n    \nrecurringPeriodLength\n:\n \n1\n,\n\n    \nrecurringAmount\n:\n \n25.99\n,\n\n    \nisActive\n:\n \nfalse\n\n\n};\n\n\n\nconst\n \nplan\n \n=\n \nawait\n \napi\n.\nplans\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated plan fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a plan by using its \nid\n.\n\n\n\n\nActive Subscriptions\n\n\nYou cannot delete plans that have active subscriptions.\n\n\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nplans\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Plans"
        }, 
        {
            "location": "/reference/resources/plans/#plans-apiplans", 
            "text": "Member of  RebillyAPI   Plans are used to describe a subscription. A plan may have optional setup fees, an optional trial period and fees, and an optional recurring fees and frequency. A plan may also expire, or be valid only for a limited number of recurrences.", 
            "title": "Plans api.plans"
        }, 
        {
            "location": "/reference/resources/plans/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of plans. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . plans . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . plans . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( plan   =   console . log ( plan . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of plans.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/plans/#get", 
            "text": "get ({ id }) -   {Member}  Get a plan by its  id .  Example  const   plan   =   await   api . plans . get ({ id :   foobar-001 });  console . log ( plan . fields . name );   Returns  A member exposing the plan fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/plans/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a plan. Optionally provide a specific  id  to use, or let Rebilly generate one.  A plan can have both a trial and recurring part but you must provide at lease one of them to create it. See the  API spec  for more details.   Subscriptions  At least one plan is required to be able to create new subscriptions.   Example  // first set the properties for the new plan  const   data   =   { \n     name :   My strongest plan , \n     currency :   USD , \n     setupAmount :   12.99 , \n     // you could also include a trial if needed \n     recurringPeriodUnit :   month , \n     recurringPeriodLength :   1 , \n     recurringAmount :   25.99  };  // the ID is optional  const   firstPlan   =   await   api . plans . create ({ data });  // or you can provide one  const   secondPlan   =   await   api . plans . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created plan fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/plans/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a plan by using its  id .   Example  // define values to update  const   data   =   { \n     name :   My strongest plan , \n     currency :   USD , \n     setupAmount :   12.99 , \n     recurringPeriodUnit :   month , \n     recurringPeriodLength :   1 , \n     recurringAmount :   25.99 , \n     isActive :   false  };  const   plan   =   await   api . plans . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated plan fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/plans/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a plan by using its  id .   Active Subscriptions  You cannot delete plans that have active subscriptions.   Example  const   request   =   await   api . plans . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/previews/", 
            "text": "Previews \napi\n.\npreviews\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nPreview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine.\n\n\n\n\nTesting Webhooks\n\n\nWe recommend \nRequestBin\n for testing webhooks. It collects your requests and lets you inspect them using a unique URL.\n\n\n\n\nwebhook\n\n\nwebhook\n({\ndata\n}) -\n \n{Member}\n\n\nPreview a global webhook. You must create a credential hash prior to previewing the webhook.\n\n\n\n\nSee \ncredentialHashes.createWebhookCredential\n\n\nSee \napi.webhooks\n\n\n\n\nExample\n\n\n// first build the webhook data including\n\n\n// the credential hash\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \neventsFilter\n:\n \n[],\n\n    \nstatus\n:\n \nactive\n,\n\n    \nmethod\n:\n \nPOST\n,\n\n    \nheaders\n:\n \n{},\n\n    \n// requestb.in is a great tool for\n\n    \n// previewing webhooks\n\n    \nurl\n:\n \nhttps://requestb.in/1lmf8481\n,\n\n    \n// created prior to the test\n\n    \ncredentialHash\n:\n \ndcf6e32f2daee457a1db8ce5fdfbe200\n\n\n};\n\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\npreviews\n.\nwebhooks\n({\ndata\n});\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ntriggerWebhookRuleAction\n\n\ntriggerWebhookRuleAction\n({\ndata\n}) -\n \n{Member}\n\n\nPreview a webhook part of an action within an event rule. You must create a credential hash prior to previewing the webhook.\n\n\nA webhook action can be part of a \nsystem event\n or \ncustom event\n.\n\n\n\n\nSee \ncredentialHashes.createWebhookCredential\n\n\n\n\nExample\n\n\n// first build the webhook data including\n\n\n// the credential hash\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nbody\n:\n \nJSON\n.\nstringify\n({\nhello\n:\n \nworld\n}),\n\n    \nstatus\n:\n \nactive\n,\n\n    \nmethod\n:\n \nPOST\n,\n\n    \nheaders\n:\n \n{},\n\n    \nquery\n:\n \n{},\n\n    \n// requestb.in is a great tool for\n\n    \n// previewing webhooks\n\n    \nurl\n:\n \nhttps://requestb.in/1lmf8481\n,\n\n    \n// created prior to the test\n\n    \ncredentialHash\n:\n \ndcf6e32f2daee457a1db8ce5fdfbe200\n\n\n};\n\n\n\nconst\n \nwebhook\n \n=\n \nawait\n \napi\n.\npreviews\n.\ntriggerWebhookRuleAction\n({\ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the test webhook fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nsendEmailRuleAction\n\n\nsendEmailRuleAction\n({\ndata\n}) -\n \n{Member}\n\n\nPreview an email part of an action within an event rule. You must create a credential hash prior to previewing the webhook.\n\n\nA send email action can be part of a \nsystem event\n or \ncustom event\n.\n\n\n\n\nSee \ncredentialHashes.createEmailCredential\n\n\n\n\nExample\n\n\n// first build the email data including\n\n\n// the credential hash\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nbodyText\n:\n \nhello world\n,\n\n    \nbodyHTML\n:\n \n`\nstrong\nhello world\n/strong\n`\n,\n\n    \nsender\n:\n \njohn.doe+test@grr.la\n,\n\n    \nrecipients\n:\n \n[\njohn.doe+test@grr.la\n],\n\n    \nsubject\n:\n \ntesting email preview\n,\n\n    \n// created prior to the test\n\n    \ncredentialHash\n:\n \ndcf6e32f2daee457a1db8ce5fdfbe200\n\n\n};\n\n\n\nconst\n \nemail\n \n=\n \nawait\n \napi\n.\npreviews\n.\nsendEmailRuleAction\n({\ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the test email fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Previews"
        }, 
        {
            "location": "/reference/resources/previews/#previews-apipreviews", 
            "text": "Member of  RebillyAPI   Preview the result of event triggered actions like webhooks and emails both globally and in the Rules Engine.   Testing Webhooks  We recommend  RequestBin  for testing webhooks. It collects your requests and lets you inspect them using a unique URL.", 
            "title": "Previews api.previews"
        }, 
        {
            "location": "/reference/resources/previews/#webhook", 
            "text": "webhook ({ data }) -   {Member}  Preview a global webhook. You must create a credential hash prior to previewing the webhook.   See  credentialHashes.createWebhookCredential  See  api.webhooks   Example  // first build the webhook data including  // the credential hash  const   data   =   { \n     eventsFilter :   [], \n     status :   active , \n     method :   POST , \n     headers :   {}, \n     // requestb.in is a great tool for \n     // previewing webhooks \n     url :   https://requestb.in/1lmf8481 , \n     // created prior to the test \n     credentialHash :   dcf6e32f2daee457a1db8ce5fdfbe200  };  const   request   =   await   api . previews . webhooks ({ data });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "webhook"
        }, 
        {
            "location": "/reference/resources/previews/#triggerwebhookruleaction", 
            "text": "triggerWebhookRuleAction ({ data }) -   {Member}  Preview a webhook part of an action within an event rule. You must create a credential hash prior to previewing the webhook.  A webhook action can be part of a  system event  or  custom event .   See  credentialHashes.createWebhookCredential   Example  // first build the webhook data including  // the credential hash  const   data   =   { \n     body :   JSON . stringify ({ hello :   world }), \n     status :   active , \n     method :   POST , \n     headers :   {}, \n     query :   {}, \n     // requestb.in is a great tool for \n     // previewing webhooks \n     url :   https://requestb.in/1lmf8481 , \n     // created prior to the test \n     credentialHash :   dcf6e32f2daee457a1db8ce5fdfbe200  };  const   webhook   =   await   api . previews . triggerWebhookRuleAction ({ data });   Returns  A member exposing the test webhook fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "triggerWebhookRuleAction"
        }, 
        {
            "location": "/reference/resources/previews/#sendemailruleaction", 
            "text": "sendEmailRuleAction ({ data }) -   {Member}  Preview an email part of an action within an event rule. You must create a credential hash prior to previewing the webhook.  A send email action can be part of a  system event  or  custom event .   See  credentialHashes.createEmailCredential   Example  // first build the email data including  // the credential hash  const   data   =   { \n     bodyText :   hello world , \n     bodyHTML :   ` strong hello world /strong ` , \n     sender :   john.doe+test@grr.la , \n     recipients :   [ john.doe+test@grr.la ], \n     subject :   testing email preview , \n     // created prior to the test \n     credentialHash :   dcf6e32f2daee457a1db8ce5fdfbe200  };  const   email   =   await   api . previews . sendEmailRuleAction ({ data });   Returns  A member exposing the test email fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "sendEmailRuleAction"
        }, 
        {
            "location": "/reference/resources/products/", 
            "text": "Products \napi\n.\nproducts\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and manage products. You may attach them to products. Products can have a tax category, accounting code and may require shipping.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of products. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nproducts\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nproducts\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nproduct\n \n=\n \nconsole\n.\nlog\n(\nproduct\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of products.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a product by its \nid\n.\n\n\nExample\n\n\nconst\n \nproduct\n \n=\n \nawait\n \napi\n.\nproducts\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nproduct\n.\nfields\n.\nname\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the product fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a product. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new product\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nmy first product\n,\n\n    \ndescription\n:\n \nmade to be of the highest quality\n,\n\n    \ntaxCategoryId\n:\n \n,\n\n    \nrequiresShipping\n:\n \ntrue\n,\n\n    \naccountingCode\n:\n \n100\n,\n\n    \ncustomFields\n:\n \n[]\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstProduct\n \n=\n \nawait\n \napi\n.\nproducts\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondProduct\n \n=\n \nawait\n \napi\n.\nproducts\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created product fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a product by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nmy first product\n,\n\n    \ndescription\n:\n \nmade to be of the highest quality\n,\n\n    \ntaxCategoryId\n:\n \n20010\n,\n\n    \nrequiresShipping\n:\n \nfalse\n,\n\n    \naccountingCode\n:\n \n77\n,\n\n    \ncustomFields\n:\n \n[]\n\n\n};\n\n\n\nconst\n \nproduct\n \n=\n \nawait\n \napi\n.\nproducts\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated product fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a product by using its \nid\n.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nproducts\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Products"
        }, 
        {
            "location": "/reference/resources/products/#products-apiproducts", 
            "text": "Member of  RebillyAPI   Create and manage products. You may attach them to products. Products can have a tax category, accounting code and may require shipping.", 
            "title": "Products api.products"
        }, 
        {
            "location": "/reference/resources/products/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of products. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . products . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . products . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( product   =   console . log ( product . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of products.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/products/#get", 
            "text": "get ({ id }) -   {Member}  Get a product by its  id .  Example  const   product   =   await   api . products . get ({ id :   foobar-001 });  console . log ( product . fields . name );   Returns  A member exposing the product fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/products/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a product. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new product  const   data   =   { \n     name :   my first product , \n     description :   made to be of the highest quality , \n     taxCategoryId :   , \n     requiresShipping :   true , \n     accountingCode :   100 , \n     customFields :   []  };  // the ID is optional  const   firstProduct   =   await   api . products . create ({ data });  // or you can provide one  const   secondProduct   =   await   api . products . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created product fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/products/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a product by using its  id .   Example  // define values to update  const   data   =   { \n     name :   my first product , \n     description :   made to be of the highest quality , \n     taxCategoryId :   20010 , \n     requiresShipping :   false , \n     accountingCode :   77 , \n     customFields :   []  };  const   product   =   await   api . products . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated product fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/products/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a product by using its  id .  Example  const   request   =   await   api . products . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/profile/", 
            "text": "Profile \napi\n.\nprofile\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nManage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in.\n\n\nThe profile includes information about the currently authenticated user like his name, email and preferences.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet currently authenticated user's profile.\n\n\nExample\n\n\nconst\n \nprofile\n \n=\n \nawait\n \napi\n.\nprofile\n.\nget\n();\n\n\nconsole\n.\nlog\n(\nprofile\n.\nfields\n.\nemail\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the profile fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the authenticated user's profile. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nreportingCurrency\n:\n \nUSD\n,\n\n    \npreferences\n:\n \n[],\n\n    \ntotpRequired\n:\n \nfalse\n\n\n};\n\n\n\nconst\n \nprofile\n \n=\n \nawait\n \napi\n.\nprofile\n.\nupdate\n({\ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated profile fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdatePassword\n\n\nupdatePassword\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the authenticated user's password. \n\n\n\n\nCurrent Password Required\n\n\nThe user's current password is required to enable the update. This feature is best used in a self-service environment where the user triggers his own password update.\n\n\n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncurrentPassword\n:\n \npreviousUserPassword123\n,\n\n    \nnewPassword\n:\n \nnewUserPassword123\n\n\n};\n\n\n\nconst\n \nprofile\n \n=\n \nawait\n \napi\n.\nprofile\n.\nupdatePassword\n({\ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the user's profile fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nresetTotp\n\n\nresetTotp\n() -\n \n{Member}\n\n\nRenew the user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication.\n\n\nExample\n\n\nconst\n \nprofile\n \n=\n \nawait\n \napi\n.\nprofile\n.\nresetTotp\n();\n\n\nconsole\n.\nlog\n(\nprofile\n.\nfields\n.\ntoptSecret\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the user's profile fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Profile"
        }, 
        {
            "location": "/reference/resources/profile/#profile-apiprofile", 
            "text": "Member of  RebillyAPI   Manage the profile of the current user. When using a secret API key the profile is attached to the owner of the API key, while when using a session token the profile is attached to the authenticated user via sign in.  The profile includes information about the currently authenticated user like his name, email and preferences.", 
            "title": "Profile api.profile"
        }, 
        {
            "location": "/reference/resources/profile/#get", 
            "text": "get ({ id }) -   {Member}  Get currently authenticated user's profile.  Example  const   profile   =   await   api . profile . get ();  console . log ( profile . fields . email );   Returns  A member exposing the profile fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/profile/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update the authenticated user's profile.   Example  // define values to update  const   data   =   { \n     reportingCurrency :   USD , \n     preferences :   [], \n     totpRequired :   false  };  const   profile   =   await   api . profile . update ({ data });   Returns  A member exposing the updated profile fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/profile/#updatepassword", 
            "text": "updatePassword ({ id ,  data }) -   {Member}  Update the authenticated user's password.    Current Password Required  The user's current password is required to enable the update. This feature is best used in a self-service environment where the user triggers his own password update.   Example  // define values to update  const   data   =   { \n     currentPassword :   previousUserPassword123 , \n     newPassword :   newUserPassword123  };  const   profile   =   await   api . profile . updatePassword ({ data });   Returns  A member exposing the user's profile fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updatePassword"
        }, 
        {
            "location": "/reference/resources/profile/#resettotp", 
            "text": "resetTotp () -   {Member}  Renew the user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication.  Example  const   profile   =   await   api . profile . resetTotp ();  console . log ( profile . fields . toptSecret );   Returns  A member exposing the user's profile fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "resetTotp"
        }, 
        {
            "location": "/reference/resources/sessions/", 
            "text": "Sessions \napi\n.\nsessions\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys.\n\n\nThis token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API.\n\n\n\n\nSee \naccount.signIn\n\n\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a session by its \nid\n.\n\n\nExample\n\n\nconst\n \nsession\n \n=\n \nawait\n \napi\n.\nsessions\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nsession\n.\nfields\n.\nname\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the session fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a session. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new session\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \npermissions\n:\n \n[\n\n        \n{\n\n            \nresourceName\n:\n \nplans\n,\n\n            \nmethods\n:\n \n[\n\n                \nGET\n,\n\n                \nPOST\n,\n\n                \nPUT\n,\n\n                \nHEAD\n,\n\n                \nDELETE\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n    \n// optionally you can define an `expiredTime` to \n\n    \n// limit the duration of the session\n\n\n    \n//expiredTime: \n2017-09-18T19:17:39Z\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstSession\n \n=\n \nawait\n \napi\n.\nsessions\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondSession\n \n=\n \nawait\n \napi\n.\nsessions\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created session fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a session by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \npermissions\n:\n \n[\n\n        \n{\n\n            \nresourceName\n:\n \nplans\n,\n\n            \nmethods\n:\n \n[\n\n                \nGET\n,\n\n                \nPOST\n,\n\n                \nPUT\n,\n\n                \nDELETE\n\n            \n]\n\n        \n},\n\n        \n{\n\n            \nresourceName\n:\n \ncustomers\n,\n\n            \nmethods\n:\n \n[\n\n                \nGET\n,\n\n                \nPOST\n,\n\n                \nPUT\n,\n\n                \nDELETE\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n};\n\n\n\nconst\n \nsession\n \n=\n \nawait\n \napi\n.\nsessions\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated session fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a session by using its \nid\n.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nsessions\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Sessions"
        }, 
        {
            "location": "/reference/resources/sessions/#sessions-apisessions", 
            "text": "Member of  RebillyAPI   Create and manage sessions. Session tokens are an alternate method to API authentication that is not private, unlike API keys.  This token can be used to authenticate to the API. In addition, the session can be set to expire at a particular time, and has very granular control over permissions. Use the token to then authenticate for further requests to the Rebilly API.   See  account.signIn", 
            "title": "Sessions api.sessions"
        }, 
        {
            "location": "/reference/resources/sessions/#get", 
            "text": "get ({ id }) -   {Member}  Get a session by its  id .  Example  const   session   =   await   api . sessions . get ({ id :   foobar-001 });  console . log ( session . fields . name );   Returns  A member exposing the session fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/sessions/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a session. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new session  const   data   =   { \n     permissions :   [ \n         { \n             resourceName :   plans , \n             methods :   [ \n                 GET , \n                 POST , \n                 PUT , \n                 HEAD , \n                 DELETE \n             ] \n         } \n     ] \n\n     // optionally you can define an `expiredTime` to  \n     // limit the duration of the session \n\n     //expiredTime:  2017-09-18T19:17:39Z  };  // the ID is optional  const   firstSession   =   await   api . sessions . create ({ data });  // or you can provide one  const   secondSession   =   await   api . sessions . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created session fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/sessions/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a session by using its  id .   Example  // define values to update  const   data   =   { \n     permissions :   [ \n         { \n             resourceName :   plans , \n             methods :   [ \n                 GET , \n                 POST , \n                 PUT , \n                 DELETE \n             ] \n         }, \n         { \n             resourceName :   customers , \n             methods :   [ \n                 GET , \n                 POST , \n                 PUT , \n                 DELETE \n             ] \n         } \n     ]  };  const   session   =   await   api . sessions . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated session fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/sessions/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a session by using its  id .  Example  const   request   =   await   api . sessions . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/shipping-zones/", 
            "text": "Shipping Zones \napi\n.\nshippingZones\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of shipping zones. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nshippingZones\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nshippingZones\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nshippingZone\n \n=\n \nconsole\n.\nlog\n(\nshippingZone\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of shipping zones.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a shipping zone by its \nid\n.\n\n\nExample\n\n\nconst\n \nshippingZone\n \n=\n \nawait\n \napi\n.\nshippingZones\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nshippingZone\n.\nfields\n.\nname\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the shipping zone fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a shipping zone. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new shipping zone\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nfree shipping\n,\n\n    \nrates\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nfree shipping\n,\n\n            \nprice\n:\n \n0\n,\n\n            \ncurrency\n:\n \nUSD\n\n        \n}\n\n    \n],\n\n    \ncountries\n:\n \n[\nUS\n]\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstZone\n \n=\n \nawait\n \napi\n.\nshippingZones\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondZone\n \n=\n \nawait\n \napi\n.\nshippingZones\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created shipping zone fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a shipping zone by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nnormal shipping\n,\n\n    \nrates\n:\n \n[\n\n        \n{\n\n            \nname\n:\n \nflat rate\n,\n\n            \nprice\n:\n \n9.99\n,\n\n            \ncurrency\n:\n \nUSD\n\n        \n}\n\n    \n],\n\n    \n// when null it will match any country\n\n    \ncountries\n:\n \nnull\n\n\n};\n\n\n\nconst\n \nshippingZone\n \n=\n \nawait\n \napi\n.\nshippingZones\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated shipping zone fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a shipping zone by using its \nid\n.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nshippingZones\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Shipping Zones"
        }, 
        {
            "location": "/reference/resources/shipping-zones/#shipping-zones-apishippingzones", 
            "text": "Member of  RebillyAPI   Create and manage shipping zones. Products that require shipping will automatically have shipping priced base on the shipping zone that matches the destination. Each zone contains regions and countries that you ship to, and has its own shipping rates.", 
            "title": "Shipping Zones api.shippingZones"
        }, 
        {
            "location": "/reference/resources/shipping-zones/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt , \n         sort opt \n         filter opt \n        }) ->  {Collection} \n       Get a collection of shipping zones. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . shippingZones . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . shippingZones . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( shippingZone   =   console . log ( shippingZone . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of shipping zones.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/shipping-zones/#get", 
            "text": "get ({ id }) -   {Member}  Get a shipping zone by its  id .  Example  const   shippingZone   =   await   api . shippingZones . get ({ id :   foobar-001 });  console . log ( shippingZone . fields . name );   Returns  A member exposing the shipping zone fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/shipping-zones/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a shipping zone. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new shipping zone  const   data   =   { \n     name :   free shipping , \n     rates :   [ \n         { \n             name :   free shipping , \n             price :   0 , \n             currency :   USD \n         } \n     ], \n     countries :   [ US ]  };  // the ID is optional  const   firstZone   =   await   api . shippingZones . create ({ data });  // or you can provide one  const   secondZone   =   await   api . shippingZones . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created shipping zone fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/shipping-zones/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a shipping zone by using its  id .   Example  // define values to update  const   data   =   { \n     name :   normal shipping , \n     rates :   [ \n         { \n             name :   flat rate , \n             price :   9.99 , \n             currency :   USD \n         } \n     ], \n     // when null it will match any country \n     countries :   null  };  const   shippingZone   =   await   api . shippingZones . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated shipping zone fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/shipping-zones/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a shipping zone by using its  id .  Example  const   request   =   await   api . shippingZones . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/status/", 
            "text": "Status \napi\n.\nstatus\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nGet the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not.\n\n\nget\n\n\nget\n() -\n \n{Member}\n\n\nGet the API's status.\n\n\n\n\nTip\n\n\nYou can poll this endpoint on interval to check the status of the API.\n\n\n\n\nExample\n\n\nconst\n \nstatus\n \n=\n \nawait\n \napi\n.\nstatus\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nstatus\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the status fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Status"
        }, 
        {
            "location": "/reference/resources/status/#status-apistatus", 
            "text": "Member of  RebillyAPI   Get the current status of the Rebilly API. This feature can be used to confirm whether the API is functioning normally or not.", 
            "title": "Status api.status"
        }, 
        {
            "location": "/reference/resources/status/#get", 
            "text": "get () -   {Member}  Get the API's status.   Tip  You can poll this endpoint on interval to check the status of the API.   Example  const   status   =   await   api . status . get ({ id :   foobar-001 });  console . log ( status . fields . status );   Returns  A member exposing the status fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/subscriptions/", 
            "text": "Subscriptions \napi\n.\nsubscriptions\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination. \n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of subscriptions. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nsubscription\n \n=\n \nconsole\n.\nlog\n(\nsubscription\n.\nfields\n.\ncustomerId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of subscriptions.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a subscription by its \nid\n.\n\n\nExample\n\n\nconst\n \nsubscription\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nsubscription\n.\nfields\n.\nbillingAddress\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the subscription fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of subscriptions in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a subscription for a specific customer, website and plan combination. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nAn \ninitialInvoiceId\n can be defined which will allow you to insert the subscription as an invoice item to an existing invoice.\n\n\nExample\n\n\n// first set the properties for the new subscription\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncustomerId\n:\n \nfoobar-0001\n,\n\n    \nwebsiteId\n:\n \nmy-main-website\n,\n\n    \nplanId\n:\n \nmy-plan-id\n,\n\n    \n// you can append this subscription to\n\n    \n// an existing invoice by passing its ID\n\n    \ninitialInvoiceId\n:\n \nmy-existing-invoice-id\n,\n\n    \nbillingAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohnny\n,\n\n        \nlastName\n:\n \nBrown\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohnny+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n},\n\n    \ndeliveryAddress\n:\n \n{\n\n        \nfirstName\n:\n \nJohnny\n,\n\n        \nlastName\n:\n \nBrown\n,\n\n        \nemails\n:\n \n[{\n\n            \nlabel\n:\n \nmain\n,\n\n            \nvalue\n:\n \njohnny+test@grr.la\n,\n\n            \nprimary\n:\n \ntrue\n\n        \n}],\n\n    \n},\n\n    \nquantity\n:\n \n1\n,\n\n    \ncustomFields\n:\n \n{}\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstInvoice\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondInvoice\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created subscription fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a subscription using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \n// determines if a payment attempt will be automatic\n\n    \nautopay\n:\n \nfalse\n,\n\n    \n// set the next renewal time\n\n    \nrenewalTime\n:\n \n2018-09-26T15:34:29Z\n\n\n};\n\n\n\nconst\n \nsubscription\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\nupdate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated subscription fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncancel\n\n\ncancel\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCancel an subscription using its \nid\n. The \npolicy\n will be used to determine when the subscription will end.\n\n\nAllowed \npolicy\n values: \n\n\n\n\nat-next-renewal\n\n\nnow-with-prorata-credit\n\n\nnow\n \n\n\n\n\nExample\n\n\n// define the cancellation details\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \npolicy\n:\n \nat-next-renewal\n,\n\n    \ncanceledBy\n:\n \nmerchant\n,\n\n    \ncancelCategory\n:\n \ndid-not-use\n,\n\n    \ncancelDescription\n:\n \nthe user did not use the product\n\n\n};\n\n\n\nconst\n \nsubscription\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ncancel\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the canceled subscription fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nswitch\n\n\nswitch\n({\nid\n}) -\n \n{Member}\n\n\nSwitch the customer's subscription to a new plan and website combination. The \npolicy\n will be used to determine when the switch will be completed. \n\n\nThis feature is useful for upgrading and downgrading the customer's subscription.\n\n\nAllowed \npolicy\n values: \n\n\n\n\nat-next-renewal\n\n\nnow-with-prorata-credit\n\n\nnow\n \n\n\n\n\nExample\n\n\n// define the subscription details\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nplanId\n:\n \nmy-other-plan\n,\n\n    \npolicy\n:\n \nat-next-renewal\n,\n\n    \nwebsiteId\n:\n \nmy-other-website\n,\n\n    \nquantity\n:\n \n1\n\n\n};\n\n\n\nconst\n \nabandonedInvoice\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\nswitch\n({\nid\n:\n \nmy-subscription-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the switched subscription fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetLeadSource\n\n\ngetLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nGet a lead source by using the subscription \nid\n.\n\n\nExample\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ngetLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\nconsole\n.\nlog\n(\nlead\n.\nfields\n.\naffiliate\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateLeadSource\n\n\ncreateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a lead source for a subscription \nid\n. A subscription can only have one lead source present at a time.\n\n\n\n\nsubscription Tracking\n\n\nThe lead source entity lets you track your subscriptions throughout your different campaigns.\n\n\n\n\nExample\n\n\n// first set the properties for the new lead source\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \nsubscriptions\n,\n\n    \ncontent\n:\n \nsubscription business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ncreateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created subscription lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateLeadSource\n\n\nupdateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the lead source for a subscription \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \nsubscriptions\n,\n\n    \ncontent\n:\n \nsubscription business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\nupdateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the update subscription lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeleteLeadSource\n\n\ndeleteLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nDelete a lead source using the subscription \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ndeleteLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllMatchedRules\n\n\ngetAllMatchedRules\n({\nid\n}) -\n \n{Collection}\n\n\nGet all previously matched event rules for a subscription \nid\n. The rules are defined within system events and are part of the Rules Engine.\n\n\n\n\nSee \nevents\n\n\n\n\nExample\n\n\nconst\n \nrules\n \n=\n \nawait\n \napi\n.\nsubscriptions\n.\ngetAllMatchedRules\n({\nid\n:\n \nfoobar-001\n});\n\n\n\n\n\nReturns\n\n\nA collection of matched rules for this dispute.\n\n\nType \nCollection", 
            "title": "Subscriptions"
        }, 
        {
            "location": "/reference/resources/subscriptions/#subscriptions-apisubscriptions", 
            "text": "Member of  RebillyAPI   Create and manage subscriptions. A subscription is an instance of a plan for a specific customer and website combination.", 
            "title": "Subscriptions api.subscriptions"
        }, 
        {
            "location": "/reference/resources/subscriptions/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of subscriptions. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . subscriptions . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . subscriptions . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( subscription   =   console . log ( subscription . fields . customerId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of subscriptions.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/subscriptions/#get", 
            "text": "get ({ id }) -   {Member}  Get a subscription by its  id .  Example  const   subscription   =   await   api . subscriptions . get ({ id :   foobar-001 });  console . log ( subscription . fields . billingAddress . firstName );   Returns  A member exposing the subscription fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/subscriptions/#downloadcsv", 
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of subscriptions in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . subscriptions . downloadCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . subscriptions . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadCSV"
        }, 
        {
            "location": "/reference/resources/subscriptions/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a subscription for a specific customer, website and plan combination. Optionally provide a specific  id  to use, or let Rebilly generate one.  An  initialInvoiceId  can be defined which will allow you to insert the subscription as an invoice item to an existing invoice.  Example  // first set the properties for the new subscription  const   data   =   { \n     customerId :   foobar-0001 , \n     websiteId :   my-main-website , \n     planId :   my-plan-id , \n     // you can append this subscription to \n     // an existing invoice by passing its ID \n     initialInvoiceId :   my-existing-invoice-id , \n     billingAddress :   { \n         firstName :   Johnny , \n         lastName :   Brown , \n         emails :   [{ \n             label :   main , \n             value :   johnny+test@grr.la , \n             primary :   true \n         }], \n     }, \n     deliveryAddress :   { \n         firstName :   Johnny , \n         lastName :   Brown , \n         emails :   [{ \n             label :   main , \n             value :   johnny+test@grr.la , \n             primary :   true \n         }], \n     }, \n     quantity :   1 , \n     customFields :   {}  };  // the ID is optional  const   firstInvoice   =   await   api . subscriptions . create ({ data });  // or you can provide one  const   secondInvoice   =   await   api . subscriptions . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created subscription fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/subscriptions/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a subscription using its  id .  Example  // define the values to update  const   data   =   { \n     // determines if a payment attempt will be automatic \n     autopay :   false , \n     // set the next renewal time \n     renewalTime :   2018-09-26T15:34:29Z  };  const   subscription   =   await   api . subscriptions . update ({ id :   my-second-id ,   data });   Returns  A member exposing the updated subscription fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/subscriptions/#cancel", 
            "text": "cancel ({ id ,  data }) -   {Member}  Cancel an subscription using its  id . The  policy  will be used to determine when the subscription will end.  Allowed  policy  values:    at-next-renewal  now-with-prorata-credit  now     Example  // define the cancellation details  const   data   =   { \n     policy :   at-next-renewal , \n     canceledBy :   merchant , \n     cancelCategory :   did-not-use , \n     cancelDescription :   the user did not use the product  };  const   subscription   =   await   api . subscriptions . cancel ({ id :   my-second-id ,   data });   Returns  A member exposing the canceled subscription fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "cancel"
        }, 
        {
            "location": "/reference/resources/subscriptions/#switch", 
            "text": "switch ({ id }) -   {Member}  Switch the customer's subscription to a new plan and website combination. The  policy  will be used to determine when the switch will be completed.   This feature is useful for upgrading and downgrading the customer's subscription.  Allowed  policy  values:    at-next-renewal  now-with-prorata-credit  now     Example  // define the subscription details  const   data   =   { \n     planId :   my-other-plan , \n     policy :   at-next-renewal , \n     websiteId :   my-other-website , \n     quantity :   1  };  const   abandonedInvoice   =   await   api . subscriptions . switch ({ id :   my-subscription-id ,   data });   Returns  A member exposing the switched subscription fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "switch"
        }, 
        {
            "location": "/reference/resources/subscriptions/#getleadsource", 
            "text": "getLeadSource ({ id }) -   {Member}  Get a lead source by using the subscription  id .  Example  const   lead   =   await   api . subscriptions . getLeadSource ({ id :   my-second-id });  console . log ( lead . fields . affiliate );   Returns  A member exposing the lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getLeadSource"
        }, 
        {
            "location": "/reference/resources/subscriptions/#createleadsource", 
            "text": "createLeadSource ({ id ,  data }) -   {Member}  Create a lead source for a subscription  id . A subscription can only have one lead source present at a time.   subscription Tracking  The lead source entity lets you track your subscriptions throughout your different campaigns.   Example  // first set the properties for the new lead source  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   subscriptions , \n     content :   subscription business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . subscriptions . createLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the created subscription lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createLeadSource"
        }, 
        {
            "location": "/reference/resources/subscriptions/#updateleadsource", 
            "text": "updateLeadSource ({ id ,  data }) -   {Member}  Update the lead source for a subscription  id .  Example  // define the values to update  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   subscriptions , \n     content :   subscription business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . subscriptions . updateLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the update subscription lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateLeadSource"
        }, 
        {
            "location": "/reference/resources/subscriptions/#deleteleadsource", 
            "text": "deleteLeadSource ({ id }) -   {Member}  Delete a lead source using the subscription  id .    Example  const   request   =   await   api . subscriptions . deleteLeadSource ({ id :   my-second-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deleteLeadSource"
        }, 
        {
            "location": "/reference/resources/subscriptions/#getallmatchedrules", 
            "text": "getAllMatchedRules ({ id }) -   {Collection}  Get all previously matched event rules for a subscription  id . The rules are defined within system events and are part of the Rules Engine.   See  events   Example  const   rules   =   await   api . subscriptions . getAllMatchedRules ({ id :   foobar-001 });   Returns  A collection of matched rules for this dispute.  Type  Collection", 
            "title": "getAllMatchedRules"
        }, 
        {
            "location": "/reference/resources/three-d-secure/", 
            "text": "Three D Secure (3DS) \napi\n.\nthreeDSecure\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure.\n\n\nThe merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases.  3D Secure requires cardholder interaction to be completed.\n\n\n\n\nSpecial Feature\n\n\nIf you're not certain how to use this feature or if it is suited for you, contact us via support chat.\n\n\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of 3DS entries. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nthreeDSecure\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nthreeDSecure\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nentry\n \n=\n \nconsole\n.\nlog\n(\nentry\n.\nfields\n.\ncustomerId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of 3DS entries.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a 3DS entry by its \nid\n.\n\n\nExample\n\n\nconst\n \nentry\n \n=\n \nawait\n \napi\n.\nthreeDSecure\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nentry\n.\nfields\n.\ncustomerId\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the 3DS entry fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\ndata\n}) -\n \n{Member}\n\n\nCreate a 3DS entry for a customer and a specific combination of gateway account, payment card and website. \n\n\nExample\n\n\n// first set the properties for the new entry\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncustomerId\n:\n \nfoobar-001\n,\n\n    \nwebsiteId\n:\n \nmy-website-id\n,\n\n    \npaymentCardId\n:\n \na-certain-card-id\n,\n\n    \ngatewayAccountId\n:\n \nmain-gateway-id\n,\n\n    \nenrolled\n:\n \nY\n,\n\n    \n// enrollment electronic \n\n    \n// commerce indicator\n\n    \nenrollmentEci\n:\n \nabc\n,\n\n    \n// electronic commerce indicator\n\n    \neci\n:\n \n0\n,\n\n    \n// cardholder authentication verification value\n\n    \ncavv\n:\n \n1234\n,\n\n    \n// transaction Id\n\n    \nxid\n:\n \ner9349gju09u40394guj\n,\n\n    \npayerAuthResponseStatus\n:\n \nY\n,\n\n    \nsignatureVerification\n:\n \nY\n,\n\n    \namount\n:\n \n12.99\n,\n\n    \ncurrency\n:\n \nUSD\n\n\n};\n\n\n\nconst\n \nentry\n \n=\n \nawait\n \napi\n.\nthreeDSecure\n.\ncreate\n({\ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created 3DS entry fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Three D Secure (3DS)"
        }, 
        {
            "location": "/reference/resources/three-d-secure/#three-d-secure-3ds-apithreedsecure", 
            "text": "Member of  RebillyAPI   Create and list 3DS entries. 3D Secure is a way to authenticate and protect transactions. Typically, it's only possible to protect the initial transaction in a subscription with 3D Secure.  The merchant chooses whether or not to use 3D secure, and this is usually done via an iframe on the merchant's site. This allows the merchant to shift liability from themselves to the issuing bank in some cases.  3D Secure requires cardholder interaction to be completed.   Special Feature  If you're not certain how to use this feature or if it is suited for you, contact us via support chat.", 
            "title": "Three D Secure (3DS) api.threeDSecure"
        }, 
        {
            "location": "/reference/resources/three-d-secure/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt \n        }) ->  {Collection} \n       Get a collection of 3DS entries. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . threeDSecure . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . threeDSecure . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( entry   =   console . log ( entry . fields . customerId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .     Returns  A collection of 3DS entries.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/three-d-secure/#get", 
            "text": "get ({ id }) -   {Member}  Get a 3DS entry by its  id .  Example  const   entry   =   await   api . threeDSecure . get ({ id :   foobar-001 });  console . log ( entry . fields . customerId );   Returns  A member exposing the 3DS entry fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/three-d-secure/#create", 
            "text": "create ({ data }) -   {Member}  Create a 3DS entry for a customer and a specific combination of gateway account, payment card and website.   Example  // first set the properties for the new entry  const   data   =   { \n     customerId :   foobar-001 , \n     websiteId :   my-website-id , \n     paymentCardId :   a-certain-card-id , \n     gatewayAccountId :   main-gateway-id , \n     enrolled :   Y , \n     // enrollment electronic  \n     // commerce indicator \n     enrollmentEci :   abc , \n     // electronic commerce indicator \n     eci :   0 , \n     // cardholder authentication verification value \n     cavv :   1234 , \n     // transaction Id \n     xid :   er9349gju09u40394guj , \n     payerAuthResponseStatus :   Y , \n     signatureVerification :   Y , \n     amount :   12.99 , \n     currency :   USD  };  const   entry   =   await   api . threeDSecure . create ({ data });   Returns  A member exposing the created 3DS entry fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/tracking/", 
            "text": "Tracking \napi\n.\ntracking\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nInspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing\n\n\ngetAllApiLogs\n\n\n\n    \n\n        \ngetAllApiLogs\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of API logs. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nentry\n \n=\n \nconsole\n.\nlog\n(\nentry\n.\nfields\n.\ncustomerId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of API log entries.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetApiLog\n\n\ngetApiLog\n({\nid\n}) -\n \n{Member}\n\n\nGet an API log entry by its \nid\n.\n\n\nExample\n\n\nconst\n \nentry\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetApiLog\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nentry\n.\nfields\n.\nrequest\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the API log entry fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadApiLogsCSV\n\n\n\n    \n\n        \ndownloadApiLogsCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of API logs in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadApiLogsCSV\n method is exactly the same as the \ngetAllApiLogs\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\ntracking\n.\ndownloadApiLogsCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\ntracking\n.\ndownloadApiLogsCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllSubscriptionLogs\n\n\n\n    \n\n        \ngetAllSubscriptionLogs\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of subscription logs. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllSubscriptionLogs\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllSubscriptionLogs\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nentry\n \n=\n \nconsole\n.\nlog\n(\nentry\n.\nfields\n.\nsubscriptionId\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of subscription log entries.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetSubscriptionLog\n\n\ngetSubscriptionLog\n({\nid\n}) -\n \n{Member}\n\n\nGet a subscription log entry by its \nid\n.\n\n\nExample\n\n\nconst\n \nentry\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetSubscriptionLog\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nentry\n.\nfields\n.\nsubscriptionId\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the subscription log entry fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllWebhookNotificationLogs\n\n\n\n    \n\n        \ngetAllWebhookNotificationLogs\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of website webhook logs. Each entry will be a member.\n\n\n\n\nWebsite Webhooks\n\n\nThese logs will only track website webhooks. \n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllWebhookNotificationLogs\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllWebhookNotificationLogs\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nentry\n \n=\n \nconsole\n.\nlog\n(\nentry\n.\nfields\n.\neventName\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of website webhook log entries.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetWebhookNotificationLog\n\n\ngetWebhookNotificationLog\n({\nid\n}) -\n \n{Member}\n\n\nGet a website webhook log entry by its \nid\n.\n\n\n\n\nWebsite Webhooks\n\n\nThese logs will only track website webhooks. \n\n\n\n\nExample\n\n\nconst\n \nentry\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetWebhookNotificationLog\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nentry\n.\nfields\n.\neventName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the website webhook log entry fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllListsChangesHistory\n\n\n\n    \n\n        \ngetAllListsChangesHistory\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of changes applied to the lists (Rules Engine). Each entry will be a member.\n\n\n\n\nSee \napi.lists\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllListsChangesHistory\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllListsChangesHistory\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nentry\n \n=\n \nconsole\n.\nlog\n(\nentry\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of list changes.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllWebhookTrackingLogs\n\n\n\n    \n\n        \ngetAllWebhookTrackingLogs\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of global webhook logs. Each entry will be a member.\n\n\nSince 0.13.0\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllWebhookTrackingLogs\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetAllWebhookTrackingLogs\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nentry\n \n=\n \nconsole\n.\nlog\n(\nentry\n.\nfields\n.\neventType\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of global webhook log entries.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetWebhookTrackingLog\n\n\ngetWebhookTrackingLog\n({\nid\n}) -\n \n{Member}\n\n\nGet a global webhook log entry by its \nid\n.\n\n\nSince 0.13.0\n\n\nExample\n\n\nconst\n \nentry\n \n=\n \nawait\n \napi\n.\ntracking\n.\ngetWebhookTrackingLog\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nentry\n.\nfields\n.\neventType\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the global webhook log entry fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Tracking"
        }, 
        {
            "location": "/reference/resources/tracking/#tracking-apitracking", 
            "text": "Member of  RebillyAPI   Inspect tracking data. Tracking is a layer for accessing all the activity (API requests, subscriptions, webhooks, events, etc.), thus providing easier debugging and issues auditing", 
            "title": "Tracking api.tracking"
        }, 
        {
            "location": "/reference/resources/tracking/#getallapilogs", 
            "text": "getAllApiLogs \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of API logs. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . tracking . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . tracking . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( entry   =   console . log ( entry . fields . customerId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of API log entries.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllApiLogs"
        }, 
        {
            "location": "/reference/resources/tracking/#getapilog", 
            "text": "getApiLog ({ id }) -   {Member}  Get an API log entry by its  id .  Example  const   entry   =   await   api . tracking . getApiLog ({ id :   foobar-001 });  console . log ( entry . fields . request );   Returns  A member exposing the API log entry fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getApiLog"
        }, 
        {
            "location": "/reference/resources/tracking/#downloadapilogscsv", 
            "text": "downloadApiLogsCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of API logs in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadApiLogsCSV  method is exactly the same as the  getAllApiLogs  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . tracking . downloadApiLogsCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . tracking . downloadApiLogsCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadApiLogsCSV"
        }, 
        {
            "location": "/reference/resources/tracking/#getallsubscriptionlogs", 
            "text": "getAllSubscriptionLogs ({\n         limit opt , \n         offset opt , \n         sort opt \n         filter opt \n        }) ->  {Collection} \n       Get a collection of subscription logs. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . tracking . getAllSubscriptionLogs ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . tracking . getAllSubscriptionLogs ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( entry   =   console . log ( entry . fields . subscriptionId ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of subscription log entries.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllSubscriptionLogs"
        }, 
        {
            "location": "/reference/resources/tracking/#getsubscriptionlog", 
            "text": "getSubscriptionLog ({ id }) -   {Member}  Get a subscription log entry by its  id .  Example  const   entry   =   await   api . tracking . getSubscriptionLog ({ id :   foobar-001 });  console . log ( entry . fields . subscriptionId );   Returns  A member exposing the subscription log entry fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getSubscriptionLog"
        }, 
        {
            "location": "/reference/resources/tracking/#getallwebhooknotificationlogs", 
            "text": "getAllWebhookNotificationLogs \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt \n        }) ->  {Collection} \n       Get a collection of website webhook logs. Each entry will be a member.   Website Webhooks  These logs will only track website webhooks.    Example  // all parameters are optional  const   firstCollection   =   await   api . tracking . getAllWebhookNotificationLogs ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . tracking . getAllWebhookNotificationLogs ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( entry   =   console . log ( entry . fields . eventName ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of website webhook log entries.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllWebhookNotificationLogs"
        }, 
        {
            "location": "/reference/resources/tracking/#getwebhooknotificationlog", 
            "text": "getWebhookNotificationLog ({ id }) -   {Member}  Get a website webhook log entry by its  id .   Website Webhooks  These logs will only track website webhooks.    Example  const   entry   =   await   api . tracking . getWebhookNotificationLog ({ id :   foobar-001 });  console . log ( entry . fields . eventName );   Returns  A member exposing the website webhook log entry fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getWebhookNotificationLog"
        }, 
        {
            "location": "/reference/resources/tracking/#getalllistschangeshistory", 
            "text": "getAllListsChangesHistory \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of changes applied to the lists (Rules Engine). Each entry will be a member.   See  api.lists   Example  // all parameters are optional  const   firstCollection   =   await   api . tracking . getAllListsChangesHistory ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . tracking . getAllListsChangesHistory ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( entry   =   console . log ( entry . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of list changes.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllListsChangesHistory"
        }, 
        {
            "location": "/reference/resources/tracking/#getallwebhooktrackinglogs", 
            "text": "getAllWebhookTrackingLogs \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of global webhook logs. Each entry will be a member.  Since 0.13.0  Example  // all parameters are optional  const   firstCollection   =   await   api . tracking . getAllWebhookTrackingLogs ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 };   const   secondCollection   =   await   api . tracking . getAllWebhookTrackingLogs ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( entry   =   console . log ( entry . fields . eventType ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of global webhook log entries.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllWebhookTrackingLogs"
        }, 
        {
            "location": "/reference/resources/tracking/#getwebhooktrackinglog", 
            "text": "getWebhookTrackingLog ({ id }) -   {Member}  Get a global webhook log entry by its  id .  Since 0.13.0  Example  const   entry   =   await   api . tracking . getWebhookTrackingLog ({ id :   foobar-001 });  console . log ( entry . fields . eventType );   Returns  A member exposing the global webhook log entry fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getWebhookTrackingLog"
        }, 
        {
            "location": "/reference/resources/transactions/", 
            "text": "Transactions \napi\n.\ntransactions\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nA transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future. \n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of transactions. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ntransaction\n \n=\n \nconsole\n.\nlog\n(\ntransaction\n.\nfields\n.\ntype\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of transactions.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n, \nexpand\nopt\n}) -\n \n{Member}\n\n\nGet a transaction by its \nid\n. Define \nexpand\n to include additional data\n\n\nExample\n\n\nconst\n \ntransaction\n \n=\n \nawait\n \napi\n.\ntransactions\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\ntransaction\n.\nfields\n.\nbillingAddress\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the transaction fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of transactions in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllScheduled\n\n\n\n    \n\n        \ngetAllScheduled\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nDeprecated\n\nGet a collection of scheduled transactions. Each entry will be a member.\n\n\n\n\nScheduled Only\n\n\nThis method only returns only transactions that are schedule for future processing.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ngetAllScheduled\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ngetAllScheduled\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\ntransaction\n \n=\n \nconsole\n.\nlog\n(\ntransaction\n.\nfields\n.\nscheduledTime\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of transactions.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateScheduled\n\n\nupdateScheduled\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a scheduled transaction using its \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncustomerId\n:\n \nfoobar-0001\n,\n\n    \nwebsiteId\n:\n \nmy-main-website\n,\n\n    \npaymentInstrument\n:\n \n{\n\n        \nmethod\n:\n \npayment-card\n,\n\n        \npaymentCardId\n:\n \nmy-payment-card-id\n,\n\n        \ngatewayAccountId\n:\n \nmy-gateway-account-id\n\n    \n},\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n12.99\n,\n\n    \ndescription\n:\n \nmanual transaction\n,\n\n    \nscheduledTime\n:\n \n2017-09-28T16:13:44Z\n\n\n};\n\n\n\nconst\n \ntransaction\n \n=\n \nawait\n \napi\n.\ntransactions\n.\nupdateScheduled\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated scheduled transaction fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a transaction for a specific customer and website. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nA \nscheduledTime\n can be defined which will allow you schedule the transaction to be processed at a future date.\n\n\nExample\n\n\n// first set the properties for the new transaction\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncustomerId\n:\n \nfoobar-0001\n,\n\n    \nwebsiteId\n:\n \nmy-main-website\n,\n\n    \npaymentInstrument\n:\n \n{\n\n        \nmethod\n:\n \npayment-card\n,\n\n        \npaymentCardId\n:\n \nmy-payment-card-id\n,\n\n        \ngatewayAccountId\n:\n \nmy-gateway-account-id\n\n    \n},\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n12.99\n,\n\n    \ndescription\n:\n \nmanual transaction\n,\n\n\n    \n// optionally you can specify a scheduled time\n\n    \n// to process the transaction at a later date\n\n    \n// scheduledTime: \n2017-09-28T16:13:44Z\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstTransaction\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondTransaction\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ncreate\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created transaction fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncancel\n\n\ncancel\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCancel a pending or scheduled transaction by using its \nid\n. Once handled a transaction cannot be canceled.\n\n\nExample\n\n\nconst\n \ntransaction\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ncancel\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\nconsole\n.\nlog\n(\ntransaction\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the canceled transaction fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nrefund\n\n\nrefund\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nRefund a transaction in full or using a partial amount, by using its \nid\n.\n\n\n\n\nCurrency\n\n\nThe refund will be in the same currency as the original transaction.\n\n\n\n\nExample\n\n\n// define the refund amount\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \namount\n:\n \n12.99\n\n\n};\n\n\n\nconst\n \nrefund\n \n=\n \nawait\n \napi\n.\ntransactions\n.\nswitch\n({\nid\n:\n \nmy-transaction-id\n,\n \ndata\n});\n\n\nconsole\n.\nlog\n(\nrefund\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the switched transaction fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetGatewayLogs\n\n\ngetGatewayLogs\n({\nid\n, \ndata\n}) -\n \n{Collection}\n\n\nGet a collection of gateway logs for a transaction by using its \nid\n.\n\n\nExample\n\n\nconst\n \ncollection\n \n=\n \nawait\n \napi\n.\ntransactions\n.\nswitch\n({\nid\n:\n \nmy-transaction-id\n});\n\n\ncollection\n.\nitems\n.\nforEach\n(\nlog\n \n=\n \nconsole\n.\nlog\n(\nlog\n.\nfields\n.\nurl\n));\n\n\n\n\n\nReturns\n\n\nA collection of transaction gateway logs.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetLeadSource\n\n\ngetLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nGet a lead source by using the transaction \nid\n.\n\n\nExample\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ngetLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\nconsole\n.\nlog\n(\nlead\n.\nfields\n.\naffiliate\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreateLeadSource\n\n\ncreateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a lead source for a transaction \nid\n. A transaction can only have one lead source present at a time.\n\n\n\n\ntransaction Tracking\n\n\nThe lead source entity lets you track your transactions throughout your different campaigns.\n\n\n\n\nExample\n\n\n// first set the properties for the new lead source\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \ntransactions\n,\n\n    \ncontent\n:\n \ntransaction business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ncreateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created transaction lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdateLeadSource\n\n\nupdateLeadSource\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the lead source for a transaction \nid\n.\n\n\nExample\n\n\n// define the values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nmedium\n:\n \nfoobar\n,\n\n    \nsource\n:\n \nwww.google.com\n,\n\n    \ncampaign\n:\n \nmy-first-campaign\n,\n\n    \nterm\n:\n \ntransactions\n,\n\n    \ncontent\n:\n \ntransaction business\n,\n\n    \naffiliate\n:\n \nAcme\n,\n\n    \nsubAffiliate\n:\n \nnull\n,\n\n    \nsalesAgent\n:\n \nnull\n,\n\n    \nclickId\n:\n \nnull\n,\n\n    \npath\n:\n \nnull\n,\n\n    \nipAddress\n:\n \n12.34.56.78\n,\n\n    \ncurrency\n:\n \nUSD\n,\n\n    \namount\n:\n \n0\n\n\n};\n\n\n\nconst\n \nlead\n \n=\n \nawait\n \napi\n.\ntransactions\n.\nupdateLeadSource\n({\nid\n:\n \nmy-second-id\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the update transaction lead source fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndeleteLeadSource\n\n\ndeleteLeadSource\n({\nid\n}) -\n \n{Member}\n\n\nDelete a lead source using the transaction \nid\n.  \n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ndeleteLeadSource\n({\nid\n:\n \nmy-second-id\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetAllMatchedRules\n\n\ngetAllMatchedRules\n({\nid\n}) -\n \n{Collection}\n\n\nGet all previously matched event rules for a transaction \nid\n. The rules are defined within system events and are part of the Rules Engine.\n\n\n\n\nSee \nevents\n\n\n\n\nExample\n\n\nconst\n \nrules\n \n=\n \nawait\n \napi\n.\ntransactions\n.\ngetAllMatchedRules\n({\nid\n:\n \nfoobar-001\n});\n\n\n\n\n\nReturns\n\n\nA collection of matched rules for this dispute.\n\n\nType \nCollection", 
            "title": "Transactions"
        }, 
        {
            "location": "/reference/resources/transactions/#transactions-apitransactions", 
            "text": "Member of  RebillyAPI   A transaction is an instance of an action regarding a payment. It is always related to a customer and a payment method, and can be related to another transaction. Transactions can be scheduled to happen in the future.", 
            "title": "Transactions api.transactions"
        }, 
        {
            "location": "/reference/resources/transactions/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of transactions. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . transactions . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . transactions . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( transaction   =   console . log ( transaction . fields . type ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of transactions.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/transactions/#get", 
            "text": "get ({ id ,  expand opt }) -   {Member}  Get a transaction by its  id . Define  expand  to include additional data  Example  const   transaction   =   await   api . transactions . get ({ id :   foobar-001 });  console . log ( transaction . fields . billingAddress . firstName );   Returns  A member exposing the transaction fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/transactions/#downloadcsv", 
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of transactions in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . transactions . downloadCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . transactions . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadCSV"
        }, 
        {
            "location": "/reference/resources/transactions/#getallscheduled", 
            "text": "getAllScheduled \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Deprecated \nGet a collection of scheduled transactions. Each entry will be a member.   Scheduled Only  This method only returns only transactions that are schedule for future processing.   Example  // all parameters are optional  const   firstCollection   =   await   api . transactions . getAllScheduled ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . transactions . getAllScheduled ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( transaction   =   console . log ( transaction . fields . scheduledTime ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of transactions.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAllScheduled"
        }, 
        {
            "location": "/reference/resources/transactions/#updatescheduled", 
            "text": "updateScheduled ({ id ,  data }) -   {Member}  Update a scheduled transaction using its  id .  Example  // define the values to update  const   data   =   { \n     customerId :   foobar-0001 , \n     websiteId :   my-main-website , \n     paymentInstrument :   { \n         method :   payment-card , \n         paymentCardId :   my-payment-card-id , \n         gatewayAccountId :   my-gateway-account-id \n     }, \n     currency :   USD , \n     amount :   12.99 , \n     description :   manual transaction , \n     scheduledTime :   2017-09-28T16:13:44Z  };  const   transaction   =   await   api . transactions . updateScheduled ({ id :   my-second-id ,   data });   Returns  A member exposing the updated scheduled transaction fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateScheduled"
        }, 
        {
            "location": "/reference/resources/transactions/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a transaction for a specific customer and website. Optionally provide a specific  id  to use, or let Rebilly generate one.  A  scheduledTime  can be defined which will allow you schedule the transaction to be processed at a future date.  Example  // first set the properties for the new transaction  const   data   =   { \n     customerId :   foobar-0001 , \n     websiteId :   my-main-website , \n     paymentInstrument :   { \n         method :   payment-card , \n         paymentCardId :   my-payment-card-id , \n         gatewayAccountId :   my-gateway-account-id \n     }, \n     currency :   USD , \n     amount :   12.99 , \n     description :   manual transaction , \n\n     // optionally you can specify a scheduled time \n     // to process the transaction at a later date \n     // scheduledTime:  2017-09-28T16:13:44Z  };  // the ID is optional  const   firstTransaction   =   await   api . transactions . create ({ data });  // or you can provide one  const   secondTransaction   =   await   api . transactions . create ({ id :   my-second-id ,   data });   Returns  A member exposing the created transaction fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/transactions/#cancel", 
            "text": "cancel ({ id ,  data }) -   {Member}  Cancel a pending or scheduled transaction by using its  id . Once handled a transaction cannot be canceled.  Example  const   transaction   =   await   api . transactions . cancel ({ id :   my-second-id ,   data });  console . log ( transaction . fields . status );   Returns  A member exposing the canceled transaction fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "cancel"
        }, 
        {
            "location": "/reference/resources/transactions/#refund", 
            "text": "refund ({ id ,  data }) -   {Member}  Refund a transaction in full or using a partial amount, by using its  id .   Currency  The refund will be in the same currency as the original transaction.   Example  // define the refund amount  const   data   =   { \n     amount :   12.99  };  const   refund   =   await   api . transactions . switch ({ id :   my-transaction-id ,   data });  console . log ( refund . fields . status );   Returns  A member exposing the switched transaction fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "refund"
        }, 
        {
            "location": "/reference/resources/transactions/#getgatewaylogs", 
            "text": "getGatewayLogs ({ id ,  data }) -   {Collection}  Get a collection of gateway logs for a transaction by using its  id .  Example  const   collection   =   await   api . transactions . switch ({ id :   my-transaction-id });  collection . items . forEach ( log   =   console . log ( log . fields . url ));   Returns  A collection of transaction gateway logs.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getGatewayLogs"
        }, 
        {
            "location": "/reference/resources/transactions/#getleadsource", 
            "text": "getLeadSource ({ id }) -   {Member}  Get a lead source by using the transaction  id .  Example  const   lead   =   await   api . transactions . getLeadSource ({ id :   my-second-id });  console . log ( lead . fields . affiliate );   Returns  A member exposing the lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getLeadSource"
        }, 
        {
            "location": "/reference/resources/transactions/#createleadsource", 
            "text": "createLeadSource ({ id ,  data }) -   {Member}  Create a lead source for a transaction  id . A transaction can only have one lead source present at a time.   transaction Tracking  The lead source entity lets you track your transactions throughout your different campaigns.   Example  // first set the properties for the new lead source  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   transactions , \n     content :   transaction business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . transactions . createLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the created transaction lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "createLeadSource"
        }, 
        {
            "location": "/reference/resources/transactions/#updateleadsource", 
            "text": "updateLeadSource ({ id ,  data }) -   {Member}  Update the lead source for a transaction  id .  Example  // define the values to update  const   data   =   { \n     medium :   foobar , \n     source :   www.google.com , \n     campaign :   my-first-campaign , \n     term :   transactions , \n     content :   transaction business , \n     affiliate :   Acme , \n     subAffiliate :   null , \n     salesAgent :   null , \n     clickId :   null , \n     path :   null , \n     ipAddress :   12.34.56.78 , \n     currency :   USD , \n     amount :   0  };  const   lead   =   await   api . transactions . updateLeadSource ({ id :   my-second-id ,   data });   Returns  A member exposing the update transaction lead source fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updateLeadSource"
        }, 
        {
            "location": "/reference/resources/transactions/#deleteleadsource", 
            "text": "deleteLeadSource ({ id }) -   {Member}  Delete a lead source using the transaction  id .    Example  const   request   =   await   api . transactions . deleteLeadSource ({ id :   my-second-id });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "deleteLeadSource"
        }, 
        {
            "location": "/reference/resources/transactions/#getallmatchedrules", 
            "text": "getAllMatchedRules ({ id }) -   {Collection}  Get all previously matched event rules for a transaction  id . The rules are defined within system events and are part of the Rules Engine.   See  events   Example  const   rules   =   await   api . transactions . getAllMatchedRules ({ id :   foobar-001 });   Returns  A collection of matched rules for this dispute.  Type  Collection", 
            "title": "getAllMatchedRules"
        }, 
        {
            "location": "/reference/resources/users/", 
            "text": "Users \napi\n.\nusers\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nCreate and manage users. A user represents a person who can login to Rebilly, and take actions subject to their granted permissions.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of users. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nusers\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nusers\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nuser\n \n=\n \nconsole\n.\nlog\n(\nuser\n.\nfields\n.\nfirstName\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of users.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a user by its \nid\n.\n\n\nExample\n\n\nconst\n \nuser\n \n=\n \nawait\n \napi\n.\nusers\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nuser\n.\nfields\n.\nfirstName\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the user fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a user. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new user\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \njohn.doe+test@grr.la\n,\n\n    \nfirstName\n:\n \nJohn\n,\n\n    \nlastName\n:\n \nDoe\n,\n\n    \nbusinessPhone\n:\n \n151412345676\n,\n\n    \nmobilePhone\n:\n \n151412345676\n,\n\n    \npassword\n:\n \ngenericPasswordValue\n,\n\n    \npermissions\n:\n \n[],\n\n    \nreportingCurrency\n:\n \nUSD\n,\n\n    \n// totp requires the use of a smart phone\n\n    \n// with Google Authenticator installed\n\n    \ntotpRequired\n:\n \nfalse\n,\n\n    \ntotpSecret\n:\n \n,\n\n    \ntotpUrl\n:\n \n,\n\n    \ncountry\n:\n \nUS\n,\n\n    \npreferences\n:\n \n{}\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstProduct\n \n=\n \nawait\n \napi\n.\nusers\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondProduct\n \n=\n \nawait\n \napi\n.\nusers\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created user fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a user by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nemail\n:\n \njohn.doe+test@grr.la\n,\n\n    \nfirstName\n:\n \nJohn\n,\n\n    \nlastName\n:\n \nDoe\n,\n\n    \nreportingCurrency\n:\n \nCAD\n,\n\n    \ncountry\n:\n \nCA\n,\n\n\n};\n\n\n\nconst\n \nuser\n \n=\n \nawait\n \napi\n.\nusers\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated user fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a user by using its \nid\n.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nusers\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdatePassword\n\n\nupdatePassword\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate the password of a user identified by its \nid\n. \n\n\n\n\nCurrent Password Required\n\n\nThe user's current password is required to enable the update. \n\n\n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \ncurrentPassword\n:\n \npreviousUserPassword123\n,\n\n    \nnewPassword\n:\n \nnewUserPassword123\n\n\n};\n\n\n\nconst\n \nuser\n \n=\n \nawait\n \napi\n.\nusers\n.\nupdatePassword\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the user's fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nresetPassword\n\n\nupdatePassword\n({\ntoken\n, \ndata\n}) -\n \n{Member}\n\n\nReset a user's password using an existing forgot password \ntoken\n. \n\n\nExample\n\n\nconst\n \ntoken\n \n=\n \n4f6cf35x2c4y483za0a9158621f77a21\n;\n\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nnewPassword\n:\n \nnewUserPassword123\n\n\n};\n\n\n\nconst\n \nuser\n \n=\n \nawait\n \napi\n.\nusers\n.\nresetPassword\n({\ntoken\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the user's fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nresetTotp\n\n\nresetTotp\n(\nid\n) -\n \n{Member}\n\n\nRenew a user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication.\n\n\nExample\n\n\nconst\n \nprofile\n \n=\n \nawait\n \napi\n.\nusers\n.\nresetTotp\n({\nid\n:\n \nmy-second-key\n});\n\n\nconsole\n.\nlog\n(\nprofile\n.\nusers\n.\ntoptSecret\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the user's profile fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Users"
        }, 
        {
            "location": "/reference/resources/users/#users-apiusers", 
            "text": "Member of  RebillyAPI   Create and manage users. A user represents a person who can login to Rebilly, and take actions subject to their granted permissions.", 
            "title": "Users api.users"
        }, 
        {
            "location": "/reference/resources/users/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt \n        }) ->  {Collection} \n       Get a collection of users. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . users . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . users . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( user   =   console . log ( user . fields . firstName ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.     Returns  A collection of users.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/users/#get", 
            "text": "get ({ id }) -   {Member}  Get a user by its  id .  Example  const   user   =   await   api . users . get ({ id :   foobar-001 });  console . log ( user . fields . firstName );   Returns  A member exposing the user fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/users/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a user. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new user  const   data   =   { \n     email :   john.doe+test@grr.la , \n     firstName :   John , \n     lastName :   Doe , \n     businessPhone :   151412345676 , \n     mobilePhone :   151412345676 , \n     password :   genericPasswordValue , \n     permissions :   [], \n     reportingCurrency :   USD , \n     // totp requires the use of a smart phone \n     // with Google Authenticator installed \n     totpRequired :   false , \n     totpSecret :   , \n     totpUrl :   , \n     country :   US , \n     preferences :   {}  };  // the ID is optional  const   firstProduct   =   await   api . users . create ({ data });  // or you can provide one  const   secondProduct   =   await   api . users . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created user fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/users/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a user by using its  id .   Example  // define values to update  const   data   =   { \n     email :   john.doe+test@grr.la , \n     firstName :   John , \n     lastName :   Doe , \n     reportingCurrency :   CAD , \n     country :   CA ,  };  const   user   =   await   api . users . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated user fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/users/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a user by using its  id .  Example  const   request   =   await   api . users . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/users/#updatepassword", 
            "text": "updatePassword ({ id ,  data }) -   {Member}  Update the password of a user identified by its  id .    Current Password Required  The user's current password is required to enable the update.    Example  // define values to update  const   data   =   { \n     currentPassword :   previousUserPassword123 , \n     newPassword :   newUserPassword123  };  const   user   =   await   api . users . updatePassword ({ id :   my-second-key ,   data });   Returns  A member exposing the user's fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "updatePassword"
        }, 
        {
            "location": "/reference/resources/users/#resetpassword", 
            "text": "updatePassword ({ token ,  data }) -   {Member}  Reset a user's password using an existing forgot password  token .   Example  const   token   =   4f6cf35x2c4y483za0a9158621f77a21 ;  // define values to update  const   data   =   { \n     newPassword :   newUserPassword123  };  const   user   =   await   api . users . resetPassword ({ token ,   data });   Returns  A member exposing the user's fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "resetPassword"
        }, 
        {
            "location": "/reference/resources/users/#resettotp", 
            "text": "resetTotp ( id ) -   {Member}  Renew a user's Totp Secret (Time-based One-time Password). This feature is only used for two-factor authentication.  Example  const   profile   =   await   api . users . resetTotp ({ id :   my-second-key });  console . log ( profile . users . toptSecret );   Returns  A member exposing the user's profile fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "resetTotp"
        }, 
        {
            "location": "/reference/resources/webhooks/", 
            "text": "Webhooks \napi\n.\nwebhooks\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nWebhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice.\n\n\nThey allow you to collect information about those events. Rebilly can send this information to an URL of your choice.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n({\n        \nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n\n        \nfilter\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of webhooks. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nwebhooks\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nwebhooks\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nwebhook\n \n=\n \nconsole\n.\nlog\n(\nwebhook\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of webhooks.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a webhook by its \nid\n.\n\n\nExample\n\n\nconst\n \nwebhook\n \n=\n \nawait\n \napi\n.\nwebhooks\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nwebhook\n.\nfields\n.\nid\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the webhook fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a webhook. Optionally provide a specific \nid\n to use, or let Rebilly generate one. Use \neventsFilter\n to limit the events that can trigger the webhook, or leave empty to trigger for any event.\n\n\nAllowed \neventsFilter\n values:\n\n\n\n\ngateway-account-requested\n\n\nsubscription-trial-ended\n\n\nsubscription-activated\n\n\nsubscription-canceled\n\n\nsubscription-renewed\n\n\ntransaction-processed\n\n\npayment-card-expired\n\n\npayment-declined\n\n\ninvoice-modified\n\n\ndispute-created\n\n\nsuspended-payment-completed\n\n\n\n\nExample\n\n\n// first set the properties for the new webhook\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \n// leave filter empty to enable \n\n    \n// the webhook for all events\n\n    \neventsFilter\n:\n \n[],\n\n    \nstatus\n:\n \nactive\n,\n\n    \nmethod\n:\n \nPOST\n,\n\n    \nheaders\n:\n \n{},\n\n    \nurl\n:\n \nhttps://requestb.in/1lmf8481\n,\n\n    \n// created prior to the test\n\n    \ncredentialHash\n:\n \ndcf6e32f2daee457a1db8ce5fdfbe200\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstWebhook\n \n=\n \nawait\n \napi\n.\nwebhooks\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondWebhook\n \n=\n \nawait\n \napi\n.\nwebhooks\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created webhook fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a webhook by using its \nid\n. To soft delete a webhook, set its \nstatus\n to \ninactive\n.\n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \neventsFilter\n:\n \n[\nsuspended-payment-completed\n],\n\n    \nstatus\n:\n \nactive\n,\n\n    \nmethod\n:\n \nPOST\n,\n\n    \nheaders\n:\n \n{},\n\n    \nurl\n:\n \nhttps://requestb.in/1lmf8481\n,\n\n    \n// created prior to the test\n\n    \ncredentialHash\n:\n \ndcf6e32f2daee457a1db8ce5fdfbe200\n\n\n};\n\n\n\nconst\n \nwebhook\n \n=\n \nawait\n \napi\n.\nwebhooks\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated webhook fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Webhooks"
        }, 
        {
            "location": "/reference/resources/webhooks/#webhooks-apiwebhooks", 
            "text": "Member of  RebillyAPI   Webhooks are designed to notify your systems when certain or all registered events happen in near real-time, such as: a new transaction, a new subscription, a new invoice.  They allow you to collect information about those events. Rebilly can send this information to an URL of your choice.", 
            "title": "Webhooks api.webhooks"
        }, 
        {
            "location": "/reference/resources/webhooks/#getall", 
            "text": "getAll ({\n         limit opt , \n         offset opt , \n         sort opt \n         filter opt \n        }) ->  {Collection} \n       Get a collection of webhooks. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . webhooks . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . webhooks . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( webhook   =   console . log ( webhook . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.     Returns  A collection of webhooks.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/webhooks/#get", 
            "text": "get ({ id }) -   {Member}  Get a webhook by its  id .  Example  const   webhook   =   await   api . webhooks . get ({ id :   foobar-001 });  console . log ( webhook . fields . id );   Returns  A member exposing the webhook fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/webhooks/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a webhook. Optionally provide a specific  id  to use, or let Rebilly generate one. Use  eventsFilter  to limit the events that can trigger the webhook, or leave empty to trigger for any event.  Allowed  eventsFilter  values:   gateway-account-requested  subscription-trial-ended  subscription-activated  subscription-canceled  subscription-renewed  transaction-processed  payment-card-expired  payment-declined  invoice-modified  dispute-created  suspended-payment-completed   Example  // first set the properties for the new webhook  const   data   =   { \n     // leave filter empty to enable  \n     // the webhook for all events \n     eventsFilter :   [], \n     status :   active , \n     method :   POST , \n     headers :   {}, \n     url :   https://requestb.in/1lmf8481 , \n     // created prior to the test \n     credentialHash :   dcf6e32f2daee457a1db8ce5fdfbe200  };  // the ID is optional  const   firstWebhook   =   await   api . webhooks . create ({ data });  // or you can provide one  const   secondWebhook   =   await   api . webhooks . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created webhook fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/webhooks/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a webhook by using its  id . To soft delete a webhook, set its  status  to  inactive .  Example  // define values to update  const   data   =   { \n     eventsFilter :   [ suspended-payment-completed ], \n     status :   active , \n     method :   POST , \n     headers :   {}, \n     url :   https://requestb.in/1lmf8481 , \n     // created prior to the test \n     credentialHash :   dcf6e32f2daee457a1db8ce5fdfbe200  };  const   webhook   =   await   api . webhooks . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated webhook fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/websites/", 
            "text": "Websites \napi\n.\nwebsites\n\n\n\n\nMember of \nRebillyAPI\n\n\n\n\nThe website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of websites. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nwebsites\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nwebsites\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nwebsite\n \n=\n \nconsole\n.\nlog\n(\nwebsite\n.\nfields\n.\nname\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of websites.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nid\n}) -\n \n{Member}\n\n\nGet a website by its \nid\n.\n\n\nExample\n\n\nconst\n \nwebsite\n \n=\n \nawait\n \napi\n.\nwebsites\n.\nget\n({\nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nwebsite\n.\nfields\n.\nname\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the website fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndownloadCSV\n\n\n\n    \n\n        \ndownloadCSV\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{File}\n\n    \n\n\n\n\n\nGet a collection of websites in CSV format. The first row of data will include the headers of the fields included within the CSV list.\n\n\n\n\nNote\n\n\nThe \ndownloadCSV\n method is exactly the same as the \ngetAll\n method, with the only difference that the former returns a file instead of a collection.\n\n\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstFile\n \n=\n \nawait\n \napi\n.\nwebsites\n.\ndownloadCSV\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondFile\n \n=\n \nawait\n \napi\n.\nwebsites\n.\ndownloadCSV\n(\nparams\n);\n\n\n\n// access the file data to view the CSV content \n\n\nconsole\n.\nlog\n(\nsecondFile\n.\ndata\n);\n\n\n\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA file with the response data.\n\n\nType \nFile\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ncreate\n\n\ncreate\n({\nid\nopt\n, \ndata\n}) -\n \n{Member}\n\n\nCreate a website. Optionally provide a specific \nid\n to use, or let Rebilly generate one.\n\n\nExample\n\n\n// first set the properties for the new website\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy website\n,\n\n    \nurl\n:\n \nhttps://www.acme.com\n,\n\n    \nservicePhone\n:\n \n15451234567\n,\n\n    \nserviceEmail\n:\n \nsupport@acme.com\n,\n\n    \n// used to build the checkout page URI,\n\n    \n// this value would result in \n\n    \n// https://checkout.rebilly.com/acme/page\n\n    \ncheckoutPageUri\n:\n \nacme\n,\n\n    \ncustomFields\n:\n \n{}\n\n\n};\n\n\n\n// the ID is optional\n\n\nconst\n \nfirstWebsite\n \n=\n \nawait\n \napi\n.\nwebsites\n.\ncreate\n({\ndata\n});\n\n\n\n// or you can provide one\n\n\nconst\n \nsecondWebsite\n \n=\n \nawait\n \napi\n.\nwebsites\n.\ncreate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the created website fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nupdate\n\n\nupdate\n({\nid\n, \ndata\n}) -\n \n{Member}\n\n\nUpdate a website by using its \nid\n. \n\n\nExample\n\n\n// define values to update\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nMy website\n,\n\n    \nurl\n:\n \nhttps://www.acme.com\n,\n\n    \nservicePhone\n:\n \n15451234567\n,\n\n    \nserviceEmail\n:\n \nsupport@acme.com\n,\n\n    \n// used to build the checkout page URI,\n\n    \n// this value would result in \n\n    \n// https://checkout.rebilly.com/acme-checkout/page\n\n    \ncheckoutPageUri\n:\n \nacme-checkout\n,\n\n    \ncustomFields\n:\n \n{}\n\n\n};\n\n\n\nconst\n \nwebsite\n \n=\n \nawait\n \napi\n.\nwebsites\n.\nupdate\n({\nid\n:\n \nmy-second-key\n,\n \ndata\n});\n\n\n\n\n\nReturns\n\n\nA member exposing the updated website fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ndelete\n\n\ndelete\n({\nid\n}) -\n \n{Member}\n\n\nDelete a website by using its \nid\n.\n\n\nExample\n\n\nconst\n \nrequest\n \n=\n \nawait\n \napi\n.\nwebsites\n.\ndelete\n({\nid\n:\n \nmy-second-key\n});\n\n\n\n// the request does not return any fields but\n\n\n// you can confirm the success using the status code\n\n\nconsole\n.\nlog\n(\nrequest\n.\nresponse\n.\nstatus\n);\n \n// 204\n\n\n\n\n\nReturns\n\n\nAn empty member without fields. Check the response property to validate the expected status code.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Websites"
        }, 
        {
            "location": "/reference/resources/websites/#websites-apiwebsites", 
            "text": "Member of  RebillyAPI   The website is related to each invoice and each payment gateway account. This feature would allow you to have gateway accounts that are related to multiple websites, or exclusive to particular websites. And gives you more control over your business.", 
            "title": "Websites api.websites"
        }, 
        {
            "location": "/reference/resources/websites/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of websites. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . websites . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . websites . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( website   =   console . log ( website . fields . name ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of websites.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/websites/#get", 
            "text": "get ({ id }) -   {Member}  Get a website by its  id .  Example  const   website   =   await   api . websites . get ({ id :   foobar-001 });  console . log ( website . fields . name );   Returns  A member exposing the website fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/websites/#downloadcsv", 
            "text": "downloadCSV \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {File} \n       Get a collection of websites in CSV format. The first row of data will include the headers of the fields included within the CSV list.   Note  The  downloadCSV  method is exactly the same as the  getAll  method, with the only difference that the former returns a file instead of a collection.   Example  // all parameters are optional  const   firstFile   =   await   api . websites . downloadCSV ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondFile   =   await   api . websites . downloadCSV ( params );  // access the file data to view the CSV content   console . log ( secondFile . data );    Tip  You can generate a binary file to download from the CSV content directly in the browser, or save it locally via the file system in Node.   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A file with the response data.  Type  File  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "downloadCSV"
        }, 
        {
            "location": "/reference/resources/websites/#create", 
            "text": "create ({ id opt ,  data }) -   {Member}  Create a website. Optionally provide a specific  id  to use, or let Rebilly generate one.  Example  // first set the properties for the new website  const   data   =   { \n     name :   My website , \n     url :   https://www.acme.com , \n     servicePhone :   15451234567 , \n     serviceEmail :   support@acme.com , \n     // used to build the checkout page URI, \n     // this value would result in  \n     // https://checkout.rebilly.com/acme/page \n     checkoutPageUri :   acme , \n     customFields :   {}  };  // the ID is optional  const   firstWebsite   =   await   api . websites . create ({ data });  // or you can provide one  const   secondWebsite   =   await   api . websites . create ({ id :   my-second-key ,   data });   Returns  A member exposing the created website fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "create"
        }, 
        {
            "location": "/reference/resources/websites/#update", 
            "text": "update ({ id ,  data }) -   {Member}  Update a website by using its  id .   Example  // define values to update  const   data   =   { \n     name :   My website , \n     url :   https://www.acme.com , \n     servicePhone :   15451234567 , \n     serviceEmail :   support@acme.com , \n     // used to build the checkout page URI, \n     // this value would result in  \n     // https://checkout.rebilly.com/acme-checkout/page \n     checkoutPageUri :   acme-checkout , \n     customFields :   {}  };  const   website   =   await   api . websites . update ({ id :   my-second-key ,   data });   Returns  A member exposing the updated website fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "update"
        }, 
        {
            "location": "/reference/resources/websites/#delete", 
            "text": "delete ({ id }) -   {Member}  Delete a website by using its  id .  Example  const   request   =   await   api . websites . delete ({ id :   my-second-key });  // the request does not return any fields but  // you can confirm the success using the status code  console . log ( request . response . status );   // 204   Returns  An empty member without fields. Check the response property to validate the expected status code.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "delete"
        }, 
        {
            "location": "/reference/resources/experimental/customers/", 
            "text": "Customers \napi\n.\ncustomers\n\n\n\n\nMember of \nRebillyExperimentalAPI\n\n\n\n\nExperimental\n \n\n\nAccess customer lifetime metrics. \n\n\ngetCustomerLifetimeSummaryMetrics\n\n\ngetCustomerLifetimeSummaryMetrics\n({\nid\n}) -\n \n{Member}\n\n\nGet a the summary of a customer's lifetime metrics by using its \nid\n.\n\n\nExample\n\n\nconst\n \nmetrics\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetCustomerLifetimeSummaryMetrics\n({\nid\n:\n \nfoobar-0001\n});\n\n\nconsole\n.\nlog\n(\nmetrics\n.\nfields\n.\nrevenueAmount\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the customer's lifetime metrics.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Customers"
        }, 
        {
            "location": "/reference/resources/experimental/customers/#customers-apicustomers", 
            "text": "Member of  RebillyExperimentalAPI   Experimental    Access customer lifetime metrics.", 
            "title": "Customers api.customers"
        }, 
        {
            "location": "/reference/resources/experimental/customers/#getcustomerlifetimesummarymetrics", 
            "text": "getCustomerLifetimeSummaryMetrics ({ id }) -   {Member}  Get a the summary of a customer's lifetime metrics by using its  id .  Example  const   metrics   =   await   api . customers . getCustomerLifetimeSummaryMetrics ({ id :   foobar-0001 });  console . log ( metrics . fields . revenueAmount );   Returns  A member exposing the customer's lifetime metrics.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getCustomerLifetimeSummaryMetrics"
        }, 
        {
            "location": "/reference/resources/experimental/exports/", 
            "text": "Exports \napi\n.\nexports\n\n\n\n\nMember of \nRebillyExperimentalAPI\n\n\n\n\nExperimental\n \n\n\nQueue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported.\n\n\ngetAll\n\n\n\n    \n\n        \ngetAll\n\n        ({\nlimit\nopt\n, \n        \noffset\nopt\n, \n        \nsort\nopt\n,\n        \nexpand\nopt\n,\n        \nfilter\nopt\n,\n        \nq\nopt\n,\n        \ncriteria\nopt\n\n        }) -> \n{Collection}\n\n    \n\n\n\n\n\nGet a collection of queued exports. Each entry will be a member.\n\n\nExample\n\n\n// all parameters are optional\n\n\nconst\n \nfirstCollection\n \n=\n \nawait\n \napi\n.\nexports\n.\ngetAll\n();\n\n\n\n// alternatively you can specify one or more of them\n\n\nconst\n \nparams\n \n=\n \n{\nlimit\n:\n \n20\n,\n \noffset\n:\n \n100\n,\n \nsort\n:\n \n-createdTime\n};\n \n\nconst\n \nsecondCollection\n \n=\n \nawait\n \napi\n.\nexports\n.\ngetAll\n(\nparams\n);\n\n\n\n// access the collection items, each item is a Member\n\n\nsecondCollection\n.\nitems\n.\nforEach\n(\nfile\n \n=\n \nconsole\n.\nlog\n(\nexports\n.\nfields\n.\nstatus\n));\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nAttribute\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nOptional\n\n\nThe amount of members to return per request.\nDefaults to \n100\n.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nOptional\n\n\nMember index from which to start returning results. \nDefaults to \n0\n.\n\n\n\n\n\n\nsort\n\n\nstring\n\n\nOptional\n\n\nThe member field on which to sort on. Sorting is ascending by default. Use \n-\n (dash) to make it descending.\nExample: \ncreatedTime\n and \n-createdTime\n.\n\n\n\n\n\n\nexpand\n\n\nstring\n\n\nOptional\n\n\nA string representing an entity to expand within each member. Use \n,\n (comma) to expand multiple entities.\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nOptional\n\n\nA list of one or more member fields and their values, used to filter the collection results.\nExample: \nstatus\n:\nactive\n.\n See the \nfilters guide\n for more details.\n\n\n\n\n\n\nq\n\n\nstring\n\n\nOptional\n\n\nA string to search for within the indexed member fields. This is useful for members that have any field match the search value.\n\n\n\n\n\n\ncriteria\n\n\nstring\n\n\nOptional\n\n\nA stringified JSON object representing a Rebilly compatible criteria.\n See the \ncriteria guide\n for more details.\n\n\n\n\n\n\n\n\nReturns\n\n\nA collection of queued exports.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nget\n\n\nget\n({\nresource\n, \nid\n}) -\n \n{Member}\n\n\nGet a queued export by its \nid\n for a specific \nresource\n.\n\n\n\n\nTransactions\n\n\nCurrently the only supported resource is \ntransaction\n.\n\n\n\n\nExample\n\n\nconst\n \nqueuedExport\n \n=\n \nawait\n \napi\n.\nexports\n.\nget\n({\nresource\n:\n \ntransaction\n,\n \nid\n:\n \nfoobar-001\n});\n\n\nconsole\n.\nlog\n(\nqueuedExport\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the customer fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\nqueue\n\n\nget\n({\nresource\n, \nid\n}) -\n \n{Member}\n\n\nQueue an export for a specific \nresource\n. The processing time for the export can vary from a few seconds to a few minutes depending on the amount of data requested.\n\n\n\n\nTransactions\n\n\nCurrently the only supported resource is \ntransaction\n.\n\n\n\n\nExample\n\n\n// first prepare the details of the export\n\n\nconst\n \ndata\n \n=\n \n{\n\n    \nname\n:\n \nmy-first-export\n,\n\n    \n// only CSV is currently supported\n\n    \nformat\n:\n \ncsv\n,\n\n    \n// define filters, criteria, etc. \n\n    \n// to reduce the amount of values exported\n\n    \narguments\n:\n \n{},\n\n    \ndateRange\n:\n \n{\n\n        \nrange\n:\n \nall\n\n    \n},\n\n    \n// list email addresses that will receive\n\n    \n//  a notification once the download is ready\n\n    \nemailNotification\n:\n \n[\n]\n\n\n};\n\n\n\nconst\n \nqueuedExport\n \n=\n \nawait\n \napi\n.\nexports\n.\nqueue\n({\nresource\n:\n \ntransaction\n,\n \ndata\n});\n\n\nconsole\n.\nlog\n(\nqueuedExport\n.\nfields\n.\nstatus\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the newly queued export fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Exports"
        }, 
        {
            "location": "/reference/resources/experimental/exports/#exports-apiexports", 
            "text": "Member of  RebillyExperimentalAPI   Experimental    Queue data exports for resources and download the result in CSV format. There is no limit to the amount of data that can be exported.", 
            "title": "Exports api.exports"
        }, 
        {
            "location": "/reference/resources/experimental/exports/#getall", 
            "text": "getAll \n        ({ limit opt , \n         offset opt , \n         sort opt ,\n         expand opt ,\n         filter opt ,\n         q opt ,\n         criteria opt \n        }) ->  {Collection} \n       Get a collection of queued exports. Each entry will be a member.  Example  // all parameters are optional  const   firstCollection   =   await   api . exports . getAll ();  // alternatively you can specify one or more of them  const   params   =   { limit :   20 ,   offset :   100 ,   sort :   -createdTime };   const   secondCollection   =   await   api . exports . getAll ( params );  // access the collection items, each item is a Member  secondCollection . items . forEach ( file   =   console . log ( exports . fields . status ));   Parameters     Name  Type  Attribute  Description      limit  number  Optional  The amount of members to return per request. Defaults to  100 .    offset  number  Optional  Member index from which to start returning results.  Defaults to  0 .    sort  string  Optional  The member field on which to sort on. Sorting is ascending by default. Use  -  (dash) to make it descending. Example:  createdTime  and  -createdTime .    expand  string  Optional  A string representing an entity to expand within each member. Use  ,  (comma) to expand multiple entities.    filter  string  Optional  A list of one or more member fields and their values, used to filter the collection results. Example:  status : active .  See the  filters guide  for more details.    q  string  Optional  A string to search for within the indexed member fields. This is useful for members that have any field match the search value.    criteria  string  Optional  A stringified JSON object representing a Rebilly compatible criteria.  See the  criteria guide  for more details.     Returns  A collection of queued exports.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getAll"
        }, 
        {
            "location": "/reference/resources/experimental/exports/#get", 
            "text": "get ({ resource ,  id }) -   {Member}  Get a queued export by its  id  for a specific  resource .   Transactions  Currently the only supported resource is  transaction .   Example  const   queuedExport   =   await   api . exports . get ({ resource :   transaction ,   id :   foobar-001 });  console . log ( queuedExport . fields . status );   Returns  A member exposing the customer fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "get"
        }, 
        {
            "location": "/reference/resources/experimental/exports/#queue", 
            "text": "get ({ resource ,  id }) -   {Member}  Queue an export for a specific  resource . The processing time for the export can vary from a few seconds to a few minutes depending on the amount of data requested.   Transactions  Currently the only supported resource is  transaction .   Example  // first prepare the details of the export  const   data   =   { \n     name :   my-first-export , \n     // only CSV is currently supported \n     format :   csv , \n     // define filters, criteria, etc.  \n     // to reduce the amount of values exported \n     arguments :   {}, \n     dateRange :   { \n         range :   all \n     }, \n     // list email addresses that will receive \n     //  a notification once the download is ready \n     emailNotification :   [ ]  };  const   queuedExport   =   await   api . exports . queue ({ resource :   transaction ,   data });  console . log ( queuedExport . fields . status );   Returns  A member exposing the newly queued export fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "queue"
        }, 
        {
            "location": "/reference/resources/experimental/histograms/", 
            "text": "Histograms \napi\n.\nhistograms\n\n\n\n\nMember of \nRebillyExperimentalAPI\n\n\n\n\nExperimental\n \n\n\nHistograms are for a particular kinds of reports with cohorts and periods. \n\n\ngetTransactionHistogramReport\n\n\n\n    \n\n        \ngetTransactionHistogramReport\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \naggregationField\n,\n        \naggregationPeriod\n,\n        \nmetric\n \n        }) -\n \n{Member}\n\n    \n\n\n\n\nGet transaction report histogram data. The returned values can be used to render a histogram.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \n// seven day period\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \naggregationField\n:\n \nwebsite\n,\n\n    \naggregationPeriod\n:\n \nday\n,\n\n    \nmetric\n:\n \napproval\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nhistograms\n.\ngetTransactionHistogramReport\n(\nparams\n);\n\n\nconsole\n.\nlog\n(\nreport\n.\nfields\n.\ndata\n);\n\n\n\n\n\nReturns\n\n\nA member exposing a list of date based values.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Histograms"
        }, 
        {
            "location": "/reference/resources/experimental/histograms/#histograms-apihistograms", 
            "text": "Member of  RebillyExperimentalAPI   Experimental    Histograms are for a particular kinds of reports with cohorts and periods.", 
            "title": "Histograms api.histograms"
        }, 
        {
            "location": "/reference/resources/experimental/histograms/#gettransactionhistogramreport", 
            "text": "getTransactionHistogramReport \n        ({ periodStart ,\n         periodEnd ,\n         aggregationField ,\n         aggregationPeriod ,\n         metric  \n        }) -   {Member} \n       Get transaction report histogram data. The returned values can be used to render a histogram.  Example  const   params   =   { \n     periodStart :   2017-09-21T00:00:00Z , \n     // seven day period \n     periodEnd :   2017-09-28T23:59:59Z , \n     aggregationField :   website , \n     aggregationPeriod :   day , \n     metric :   approval  };  const   report   =   await   api . histograms . getTransactionHistogramReport ( params );  console . log ( report . fields . data );   Returns  A member exposing a list of date based values.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getTransactionHistogramReport"
        }, 
        {
            "location": "/reference/resources/experimental/reports/", 
            "text": "Reports \napi\n.\nreports\n\n\n\n\nMember of \nRebillyExperimentalAPI\n\n\n\n\nExperimental\n \n\n\nRetrieve summary information about your customers, subscriptions, transactions, and more.\n\n\ngetApiLogSummary\n\n\n\n    \n\n        \ngetApiLogSummary\n\n        ({\naggregationField\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nGet transaction report histogram data. The returned values can be used to render a histogram.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetApiLogSummary\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\n\n\n\ngetCumulativeSubscriptionsPlans\n\n\n\n    \n\n        \ngetCumulativeSubscriptionsPlans\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ncriteria\nopt\n,\n        \ntz\nopt\n \n        }) -\n \n{Collection}\n\n    \n\n\n\n\nRetrieve a cumulative subscriptions report aggregated by day and plans.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetApiLogSummary\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA collection exposing the report items.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetCumulativeSubscriptions\n\n\n\n    \n\n        \ngetCumulativeSubscriptions\n\n        ({\naggregationField\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ncriteria\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a cumulative subscriptions report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nday\n,\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetCumulativeSubscriptions\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetDccMarkup\n\n\n\n    \n\n        \ngetDccMarkup\n\n        ({\naggregationField\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a DCC markup report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nday\n,\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \nfilter\n:\n \n`gatewayAccounts:f9b4fa10-df1d-48a3-85b3-ff6bd7ce0ed2; \n\\\n\n\n            transactionResult:approved,canceled,declined,unknown`\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetDccMarkup\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetDisputes\n\n\n\n    \n\n        \ngetDisputes\n\n        ({\naggregationField\n,\n        \nperiodMonth\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a disputes report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nwebsite\n,\n\n    \nperiodMonth\n:\n \n2017-09\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetDisputes\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetEventsTriggeredSummary\n\n\n\n    \n\n        \ngetEventsTriggeredSummary\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve an events triggered summary report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-22T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-29T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetEventsTriggeredSummary\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRulesMatchedSummary\n\n\n\n    \n\n        \ngetRulesMatchedSummary\n\n        ({\neventType\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve an events triggered summary report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-22T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-29T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetRulesMatchedSummary\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetFutureRenewals\n\n\n\n    \n\n        \ngetFutureRenewals\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a future renewals report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-22T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-29T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetFutureRenewals\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRenewalSales\n\n\n\n    \n\n        \ngetRenewalSales\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a renewal sales report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09\n,\n\n    \nperiodEnd\n:\n \n2017-09\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetRenewalSales\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRetentionPercentage\n\n\n\n    \n\n        \ngetRetentionPercentage\n\n        ({\naggregationField\n,\n        \naggregationPeriod\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nincludeSwitchedSubscriptions\nopt\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a retention percentage report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nmonth\n,\n\n    \naggregationPeriod\n:\n \nmonth\n,\n\n    \nperiodStart\n:\n \n2016-09-01T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-01T00:00:00Z\n,\n\n    \nincludeSwitchedSubscriptions\n:\n \nfalse\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetRetentionPercentage\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRetentionValue\n\n\n\n    \n\n        \ngetRetentionValue\n\n        ({\naggregationField\n,\n        \naggregationPeriod\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nincludeRefunds\nopt\n,\n        \nincludeDisputes\nopt\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ncriteria\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a retention value report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nmonth\n,\n\n    \naggregationPeriod\n:\n \nmonth\n,\n\n    \nperiodStart\n:\n \n2016-09-01T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-01T00:00:00Z\n,\n\n    \nincludeRefunds\n:\n \ntrue\n,\n\n    \nincludeDisputes\n:\n \nfalse\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetRetentionValue\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetRetryTransaction\n\n\n\n    \n\n        \ngetRetryTransaction\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ncriteria\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a payment retry report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-22T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-29T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetRetryTransaction\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetStatistics\n\n\n\n    \n\n        \ngetStatistics\n\n        () -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a statistics report. Returns overall values relative to total revenue, customer count, cancels, refunds and their respective growth.\n\n\nExample\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetStatistics\n();\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetSubscriptionCancellation\n\n\n\n    \n\n        \ngetSubscriptionCancellation\n\n        ({\naggregationField\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ncriteria\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a subscription cancellation report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nday\n,\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetSubscriptionCancellation\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetSubscriptionRenewalList\n\n\n\n    \n\n        \ngetSubscriptionRenewalList\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n \n        }) -\n \n{Collection}\n\n    \n\n\n\n\nRetrieve a list of subscription renewals data.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetSubscriptionRenewalList\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA collection exposing the report items.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetSubscriptionRenewal\n\n\n\n    \n\n        \ngetSubscriptionRenewal\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a subscription renewal report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetSubscriptionRenewal\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetTimeSeriesTransaction\n\n\n\n    \n\n        \ngetTimeSeriesTransaction\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \ntype\n,\n        \nsubaggregate\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a transactions report aggregated by time periods.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-08-29T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-29T23:59:59Z\n,\n\n    \ntype\n:\n \ncount\n,\n\n    \nsubaggregate\n:\n \ngateway-account\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetTimeSeriesTransaction\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetTransactionsPlan\n\n\n\n    \n\n        \ngetTransactionsPlan\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \ntz\nopt\n \n        }) -\n \n{Collection}\n\n    \n\n\n\n\nRetrieve transactions with their plan data.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetTransactionsPlan\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA collection exposing the report items.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetTransactionsTimeDispute\n\n\n\n    \n\n        \ngetTransactionsTimeDispute\n\n        ({\naggregationField\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ncriteria\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a dispute delays in days report, how much time between a transaction and a dispute.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nwebsite\n,\n\n    \nperiodStart\n:\n \n2017-09-22T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-29T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetTransactionsTimeDispute\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetTransactions\n\n\n\n    \n\n        \ngetTransactions\n\n        ({\naggregationField\n,\n        \nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n,\n        \ncriteria\nopt\n,\n        \ntz\nopt\n\n        }) -\n \n{Member}\n\n    \n\n\n\n\nRetrieve a transactions report.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \naggregationField\n:\n \nwebsite\n,\n\n    \nperiodStart\n:\n \n2017-09-22T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-29T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n,\n\n    \ntz\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetTransactions\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA member exposing the report fields.\n\n\nType \nMember\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.\n\n\ngetPaymentsSuccessByDeclineReason\n\n\n\n    \n\n        \ngetPaymentsSuccessByDeclineReason\n\n        ({\nperiodStart\n,\n        \nperiodEnd\n,\n        \nlimit\nopt\n,\n        \noffset\nopt\n,\n        \nfilter\nopt\n \n        }) -\n \n{Collection}\n\n    \n\n\n\n\nRetrieve a report of payments successful retries throughput.\n\n\nExample\n\n\nconst\n \nparams\n \n=\n \n{\n\n    \nperiodStart\n:\n \n2017-09-21T00:00:00Z\n,\n\n    \nperiodEnd\n:\n \n2017-09-28T23:59:59Z\n,\n\n    \nlimit\n:\n \n20\n,\n\n    \noffset\n:\n \n0\n\n\n};\n\n\nconst\n \nreport\n \n=\n \nawait\n \napi\n.\nreports\n.\ngetPaymentsSuccessByDeclineReason\n(\nparams\n);\n\n\n\n\n\nReturns\n\n\nA collection exposing the report items.\n\n\nType \nCollection\n\n\nAPI Spec\n\n\nSee the \ndetailed API spec\n for all payload fields and response data.", 
            "title": "Reports"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#reports-apireports", 
            "text": "Member of  RebillyExperimentalAPI   Experimental    Retrieve summary information about your customers, subscriptions, transactions, and more.", 
            "title": "Reports api.reports"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getapilogsummary", 
            "text": "getApiLogSummary \n        ({ aggregationField ,\n         periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt \n        }) -   {Member} \n       Get transaction report histogram data. The returned values can be used to render a histogram.  Example  const   params   =   { \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getApiLogSummary ( params );   Returns  A member exposing the report fields.  Type  Member", 
            "title": "getApiLogSummary"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getcumulativesubscriptionsplans", 
            "text": "getCumulativeSubscriptionsPlans \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         criteria opt ,\n         tz opt  \n        }) -   {Collection} \n       Retrieve a cumulative subscriptions report aggregated by day and plans.  Example  const   params   =   { \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getApiLogSummary ( params );   Returns  A collection exposing the report items.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getCumulativeSubscriptionsPlans"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getcumulativesubscriptions", 
            "text": "getCumulativeSubscriptions \n        ({ aggregationField ,\n         periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         criteria opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a cumulative subscriptions report.  Example  const   params   =   { \n     aggregationField :   day , \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getCumulativeSubscriptions ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getCumulativeSubscriptions"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getdccmarkup", 
            "text": "getDccMarkup \n        ({ aggregationField ,\n         periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a DCC markup report.  Example  const   params   =   { \n     aggregationField :   day , \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     filter :   `gatewayAccounts:f9b4fa10-df1d-48a3-85b3-ff6bd7ce0ed2;  \\              transactionResult:approved,canceled,declined,unknown` , \n     tz :   0  };  const   report   =   await   api . reports . getDccMarkup ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getDccMarkup"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getdisputes", 
            "text": "getDisputes \n        ({ aggregationField ,\n         periodMonth ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a disputes report.  Example  const   params   =   { \n     aggregationField :   website , \n     periodMonth :   2017-09 , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getDisputes ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getDisputes"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#geteventstriggeredsummary", 
            "text": "getEventsTriggeredSummary \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve an events triggered summary report.  Example  const   params   =   { \n     periodStart :   2017-09-22T00:00:00Z , \n     periodEnd :   2017-09-29T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getEventsTriggeredSummary ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getEventsTriggeredSummary"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getrulesmatchedsummary", 
            "text": "getRulesMatchedSummary \n        ({ eventType ,\n         periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve an events triggered summary report.  Example  const   params   =   { \n     periodStart :   2017-09-22T00:00:00Z , \n     periodEnd :   2017-09-29T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getRulesMatchedSummary ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRulesMatchedSummary"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getfuturerenewals", 
            "text": "getFutureRenewals \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a future renewals report.  Example  const   params   =   { \n     periodStart :   2017-09-22T00:00:00Z , \n     periodEnd :   2017-09-29T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getFutureRenewals ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getFutureRenewals"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getrenewalsales", 
            "text": "getRenewalSales \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a renewal sales report.  Example  const   params   =   { \n     periodStart :   2017-09 , \n     periodEnd :   2017-09 , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getRenewalSales ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRenewalSales"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getretentionpercentage", 
            "text": "getRetentionPercentage \n        ({ aggregationField ,\n         aggregationPeriod ,\n         periodStart ,\n         periodEnd ,\n         includeSwitchedSubscriptions opt ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a retention percentage report.  Example  const   params   =   { \n     aggregationField :   month , \n     aggregationPeriod :   month , \n     periodStart :   2016-09-01T00:00:00Z , \n     periodEnd :   2017-09-01T00:00:00Z , \n     includeSwitchedSubscriptions :   false , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getRetentionPercentage ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRetentionPercentage"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getretentionvalue", 
            "text": "getRetentionValue \n        ({ aggregationField ,\n         aggregationPeriod ,\n         periodStart ,\n         periodEnd ,\n         includeRefunds opt ,\n         includeDisputes opt ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         criteria opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a retention value report.  Example  const   params   =   { \n     aggregationField :   month , \n     aggregationPeriod :   month , \n     periodStart :   2016-09-01T00:00:00Z , \n     periodEnd :   2017-09-01T00:00:00Z , \n     includeRefunds :   true , \n     includeDisputes :   false , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getRetentionValue ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRetentionValue"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getretrytransaction", 
            "text": "getRetryTransaction \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         criteria opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a payment retry report.  Example  const   params   =   { \n     periodStart :   2017-09-22T00:00:00Z , \n     periodEnd :   2017-09-29T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getRetryTransaction ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getRetryTransaction"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getstatistics", 
            "text": "getStatistics \n        () -   {Member} \n       Retrieve a statistics report. Returns overall values relative to total revenue, customer count, cancels, refunds and their respective growth.  Example  const   report   =   await   api . reports . getStatistics ();   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getStatistics"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getsubscriptioncancellation", 
            "text": "getSubscriptionCancellation \n        ({ aggregationField ,\n         periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         criteria opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a subscription cancellation report.  Example  const   params   =   { \n     aggregationField :   day , \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getSubscriptionCancellation ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getSubscriptionCancellation"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getsubscriptionrenewallist", 
            "text": "getSubscriptionRenewalList \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt  \n        }) -   {Collection} \n       Retrieve a list of subscription renewals data.  Example  const   params   =   { \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getSubscriptionRenewalList ( params );   Returns  A collection exposing the report items.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getSubscriptionRenewalList"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getsubscriptionrenewal", 
            "text": "getSubscriptionRenewal \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a subscription renewal report.  Example  const   params   =   { \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getSubscriptionRenewal ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getSubscriptionRenewal"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#gettimeseriestransaction", 
            "text": "getTimeSeriesTransaction \n        ({ periodStart ,\n         periodEnd ,\n         type ,\n         subaggregate ,\n         limit opt ,\n         offset opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a transactions report aggregated by time periods.  Example  const   params   =   { \n     periodStart :   2017-08-29T00:00:00Z , \n     periodEnd :   2017-09-29T23:59:59Z , \n     type :   count , \n     subaggregate :   gateway-account , \n     limit :   20 , \n     offset :   0  };  const   report   =   await   api . reports . getTimeSeriesTransaction ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getTimeSeriesTransaction"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#gettransactionsplan", 
            "text": "getTransactionsPlan \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         tz opt  \n        }) -   {Collection} \n       Retrieve transactions with their plan data.  Example  const   params   =   { \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getTransactionsPlan ( params );   Returns  A collection exposing the report items.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getTransactionsPlan"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#gettransactionstimedispute", 
            "text": "getTransactionsTimeDispute \n        ({ aggregationField ,\n         periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         criteria opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a dispute delays in days report, how much time between a transaction and a dispute.  Example  const   params   =   { \n     aggregationField :   website , \n     periodStart :   2017-09-22T00:00:00Z , \n     periodEnd :   2017-09-29T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getTransactionsTimeDispute ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getTransactionsTimeDispute"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#gettransactions", 
            "text": "getTransactions \n        ({ aggregationField ,\n         periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt ,\n         criteria opt ,\n         tz opt \n        }) -   {Member} \n       Retrieve a transactions report.  Example  const   params   =   { \n     aggregationField :   website , \n     periodStart :   2017-09-22T00:00:00Z , \n     periodEnd :   2017-09-29T23:59:59Z , \n     limit :   20 , \n     offset :   0 , \n     tz :   0  };  const   report   =   await   api . reports . getTransactions ( params );   Returns  A member exposing the report fields.  Type  Member  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getTransactions"
        }, 
        {
            "location": "/reference/resources/experimental/reports/#getpaymentssuccessbydeclinereason", 
            "text": "getPaymentsSuccessByDeclineReason \n        ({ periodStart ,\n         periodEnd ,\n         limit opt ,\n         offset opt ,\n         filter opt  \n        }) -   {Collection} \n       Retrieve a report of payments successful retries throughput.  Example  const   params   =   { \n     periodStart :   2017-09-21T00:00:00Z , \n     periodEnd :   2017-09-28T23:59:59Z , \n     limit :   20 , \n     offset :   0  };  const   report   =   await   api . reports . getPaymentsSuccessByDeclineReason ( params );   Returns  A collection exposing the report items.  Type  Collection  API Spec  See the  detailed API spec  for all payload fields and response data.", 
            "title": "getPaymentsSuccessByDeclineReason"
        }, 
        {
            "location": "/reference/types/member/", 
            "text": "Member \nType\n\n\nOne of the three types returned by both the standard and experimental clients, the Member type represents an instance of a single resource entity in Rebilly (e.g. one customer, one transaction).\n\n\n\n\nFrozen Object\n\n\nLike the Collection, the Member type is immutable (frozen). Attempting to modify the Member directly will result in a \nTypeError\n. You can retrieve a plain JSON object for mutation using the \ngetJSON\n method.\n\n\n\n\nProperties\n\n\nEach member instance exposes the same properties.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\nObject\n\n\nAn object literal with key/value pairs for each field returned by the API in the response.\n\n\n\n\n\n\nresponse\n\n\nObject\n\n\nThe original response stripped down to the status code, status text and headers. Exposes three more properties: \n{status, statusText, headers}\n.\n\n\n\n\n\n\ngetJSON\n\n\nFunction\n\n\nReturns a plain mutable JSON object exposing the \nfields\n of the current member instance. Discards the \nresponse\n property.\n\n\n\n\n\n\n\n\nExample\n\n\nAfter retrieving a single customer entity we have access to all three properties:\n\nconst\n \ncustomer\n \n=\n \nawait\n \napi\n.\ncustomers\n.\nget\n({\nid\n:\n \nfoobar-0001\n});\n\n\n/**\n\n\n* Properties:\n\n\n* customer.fields\n\n\n* customer.response\n\n\n* customer.getJSON\n\n\n*/\n\n\n\n\nWe can access the field containing its \nfirstName\n:\n\nconsole\n.\nlog\n(\ncustomer\n.\nfields\n.\nprimaryAddress\n.\nfirstName\n);\n\n\n\n\nAnd check the response's status code:\n\nconsole\n.\nlog\n(\ncustomer\n.\nresponse\n.\nstatus\n);\n\n\n\n\nOr get the plain JSON object and modify it:\n\nconst\n \nmutableCustomer\n \n=\n \ncustomer\n.\ngetJSON\n();\n\n\nmutableCustomer\n.\nnewProperty\n \n=\n \ntrue\n;\n\n\n\n// the fields are still available\n\n\nconsole\n.\nlog\n(\nmutableCustomer\n.\nfields\n.\nprimaryAddress\n.\nfirstName\n);", 
            "title": "Member"
        }, 
        {
            "location": "/reference/types/member/#member-type", 
            "text": "One of the three types returned by both the standard and experimental clients, the Member type represents an instance of a single resource entity in Rebilly (e.g. one customer, one transaction).   Frozen Object  Like the Collection, the Member type is immutable (frozen). Attempting to modify the Member directly will result in a  TypeError . You can retrieve a plain JSON object for mutation using the  getJSON  method.", 
            "title": "Member Type"
        }, 
        {
            "location": "/reference/types/member/#properties", 
            "text": "Each member instance exposes the same properties.     Name  Type  Description      fields  Object  An object literal with key/value pairs for each field returned by the API in the response.    response  Object  The original response stripped down to the status code, status text and headers. Exposes three more properties:  {status, statusText, headers} .    getJSON  Function  Returns a plain mutable JSON object exposing the  fields  of the current member instance. Discards the  response  property.     Example  After retrieving a single customer entity we have access to all three properties: const   customer   =   await   api . customers . get ({ id :   foobar-0001 });  /**  * Properties:  * customer.fields  * customer.response  * customer.getJSON  */   We can access the field containing its  firstName : console . log ( customer . fields . primaryAddress . firstName );   And check the response's status code: console . log ( customer . response . status );   Or get the plain JSON object and modify it: const   mutableCustomer   =   customer . getJSON ();  mutableCustomer . newProperty   =   true ;  // the fields are still available  console . log ( mutableCustomer . fields . primaryAddress . firstName );", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/types/collection/", 
            "text": "Collection \nType\n\n\nOne of the three types returned by both the standard and experimental clients, the Collection type represents a list of Members (e.g. a list of customers, a list of transactions).\n\n\n\n\nFrozen Object\n\n\nLike the Member, the Collection type is immutable (frozen). Attempting to modify the Collection directly will result in a \nTypeError\n. You can retrieve a plain JSON object for mutation using the \ngetJSON\n method.\n\n\n\n\nProperties\n\n\nEach collection instance exposes the same properties.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitems\n\n\nArray\nMember\n\n\nAn array of member entities. See the \nMember type\n for details.\n\n\n\n\n\n\ntotal\n\n\nnumber\n\n\nAn integer defining the total amount of members that exist regardless of the requested limit.\n\n\n\n\n\n\nlimit\n\n\nnumber\n\n\nAn integer defining the count of values returned by the API request. Reflects the \nlimit\n value passed to the function which returned the Collection.\n\n\n\n\n\n\noffset\n\n\nnumber\n\n\nA zero-based index defining the starting position for the requested members.\n\n\n\n\n\n\nresponse\n\n\nObject\n\n\nThe original response stripped down to the status code, status text and headers. Exposes three more properties: \n{status, statusText, headers}\n.\n\n\n\n\n\n\ngetJSON\n\n\nFunction\n\n\nReturns a plain mutable JSON object exposing the \nitems\n of the current collection instance. Discards all other property.\n\n\n\n\n\n\n\n\nExample\n\n\nAfter retrieving a list of customers we have access to all properties:\n\nconst\n \ncustomers\n \n=\n \nawait\n \napi\n.\ncustomers\n.\ngetAll\n({\nlimit\n:\n \n50\n,\n \noffset\n:\n \n25\n});\n\n\n/**\n\n\n* Properties:\n\n\n* customers.items\n\n\n* customers.total\n\n\n* customers.limit\n\n\n* customers.offset\n\n\n* customers.response\n\n\n* customers.getJSON\n\n\n*/\n\n\n\n\nWe can see the limit is equal to the value requested:\n\nconsole\n.\nlog\n(\ncustomers\n.\nlimit\n);\n \n// 50\n\n\n//the item count is also the same\n\n\nconsole\n.\nlog\n(\ncustomers\n.\nitems\n.\nlength\n);\n \n// 50\n\n\n\n\nAnd check the response's status code:\n\nconsole\n.\nlog\n(\ncustomers\n.\nresponse\n.\nstatus\n);\n\n\n\n\nWe can loop through the customers and check their ID:\n\n//each `customer` is a Member instance with fields\n\n\ncustomers\n.\nitems\n.\nforEach\n(\ncustomer\n \n=\n \nconsole\n.\nlog\n(\ncustomer\n.\nfields\n.\nid\n))\n\n\n\n\nOr get the plain JSON object and modify it:\n\nconst\n \nmutableList\n \n=\n \ncustomers\n.\ngetJSON\n();\n\n\nmutableList\n.\nnewProperty\n \n=\n \ntrue\n;\n\n\n\n// only the `items` property are still available\n\n\nconsole\n.\nlog\n(\nmutableList\n.\nitems\n.\nlength\n);\n \n// 50", 
            "title": "Collection"
        }, 
        {
            "location": "/reference/types/collection/#collection-type", 
            "text": "One of the three types returned by both the standard and experimental clients, the Collection type represents a list of Members (e.g. a list of customers, a list of transactions).   Frozen Object  Like the Member, the Collection type is immutable (frozen). Attempting to modify the Collection directly will result in a  TypeError . You can retrieve a plain JSON object for mutation using the  getJSON  method.", 
            "title": "Collection Type"
        }, 
        {
            "location": "/reference/types/collection/#properties", 
            "text": "Each collection instance exposes the same properties.     Name  Type  Description      items  Array Member  An array of member entities. See the  Member type  for details.    total  number  An integer defining the total amount of members that exist regardless of the requested limit.    limit  number  An integer defining the count of values returned by the API request. Reflects the  limit  value passed to the function which returned the Collection.    offset  number  A zero-based index defining the starting position for the requested members.    response  Object  The original response stripped down to the status code, status text and headers. Exposes three more properties:  {status, statusText, headers} .    getJSON  Function  Returns a plain mutable JSON object exposing the  items  of the current collection instance. Discards all other property.     Example  After retrieving a list of customers we have access to all properties: const   customers   =   await   api . customers . getAll ({ limit :   50 ,   offset :   25 });  /**  * Properties:  * customers.items  * customers.total  * customers.limit  * customers.offset  * customers.response  * customers.getJSON  */   We can see the limit is equal to the value requested: console . log ( customers . limit );   // 50  //the item count is also the same  console . log ( customers . items . length );   // 50   And check the response's status code: console . log ( customers . response . status );   We can loop through the customers and check their ID: //each `customer` is a Member instance with fields  customers . items . forEach ( customer   =   console . log ( customer . fields . id ))   Or get the plain JSON object and modify it: const   mutableList   =   customers . getJSON ();  mutableList . newProperty   =   true ;  // only the `items` property are still available  console . log ( mutableList . items . length );   // 50", 
            "title": "Properties"
        }, 
        {
            "location": "/reference/types/file/", 
            "text": "File \nType\n\n\nOne of the three types returned by both the standard and experimental clients, the File type allows you to access the \narraybuffer\n data from API requests that return files. The files can be either exported CSV data or generated invoice PDFs.\n\n\n\n\nTip\n\n\nYou can generate a binary file to download from the file content directly in the browser, or save it locally via the file system in Node.\n\n\n\n\n\n\nSee \nArrayBuffer\n\n\n\n\nProperties\n\n\nEach file instance exposes the same properties.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndata\n\n\nObject\n\n\nAn \narraybuffer\n containing the file data returned by the request.\n\n\n\n\n\n\nresponse\n\n\nObject\n\n\nThe original response stripped down to the status code, status text and headers. Exposes three more properties: \n{status, statusText, headers}\n.\n\n\n\n\n\n\n\n\nExample\n\n\nAfter retrieving an invoice PDF we have access to all properties:\n\nconst\n \npdf\n \n=\n \nawait\n \napi\n.\ninvoices\n.\ndownloadPDF\n({\nid\n:\n \nfoobar-001\n});\n\n\n/**\n\n\n* Properties:\n\n\n* pdf.data\n\n\n* pdf.response\n\n\n*/\n\n\n\n\nWe can access the \narraybuffer\n:\n\nconsole\n.\nlog\n(\npdf\n.\ndata\n);\n\n\n\n\nAnd check the response's status code:\n\nconsole\n.\nlog\n(\npdf\n.\nresponse\n.\nstatus\n);", 
            "title": "File"
        }, 
        {
            "location": "/reference/types/file/#file-type", 
            "text": "One of the three types returned by both the standard and experimental clients, the File type allows you to access the  arraybuffer  data from API requests that return files. The files can be either exported CSV data or generated invoice PDFs.   Tip  You can generate a binary file to download from the file content directly in the browser, or save it locally via the file system in Node.    See  ArrayBuffer", 
            "title": "File Type"
        }, 
        {
            "location": "/reference/types/file/#properties", 
            "text": "Each file instance exposes the same properties.     Name  Type  Description      data  Object  An  arraybuffer  containing the file data returned by the request.    response  Object  The original response stripped down to the status code, status text and headers. Exposes three more properties:  {status, statusText, headers} .     Example  After retrieving an invoice PDF we have access to all properties: const   pdf   =   await   api . invoices . downloadPDF ({ id :   foobar-001 });  /**  * Properties:  * pdf.data  * pdf.response  */   We can access the  arraybuffer : console . log ( pdf . data );   And check the response's status code: console . log ( pdf . response . status );", 
            "title": "Properties"
        }, 
        {
            "location": "/guides/criteria/", 
            "text": "Criteria\n\n\nN/A", 
            "title": "Criteria"
        }, 
        {
            "location": "/guides/criteria/#criteria", 
            "text": "N/A", 
            "title": "Criteria"
        }, 
        {
            "location": "/guides/filters/", 
            "text": "Filters\n\n\nN/A", 
            "title": "Filters"
        }, 
        {
            "location": "/guides/filters/#filters", 
            "text": "N/A", 
            "title": "Filters"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nMIT License\n\n\nCopyright (c) 2017, Rebilly, Inc.\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT License  Copyright (c) 2017, Rebilly, Inc.  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.", 
            "title": "License"
        }
    ]
}